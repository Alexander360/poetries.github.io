<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2019-01-25T09:06:54.483Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs系列之websocket及socket.io</title>
    <link href="http://blog.poetries.top/2019/01/24/node-socketio/"/>
    <id>http://blog.poetries.top/2019/01/24/node-socketio/</id>
    <published>2019-01-24T07:00:43.000Z</published>
    <updated>2019-01-25T09:06:54.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-WebSocket"><a href="#第一部分-WebSocket" class="headerlink" title="第一部分 WebSocket"></a>第一部分 WebSocket</h1><h2 id="一、WebSocket-解决了什么问题"><a href="#一、WebSocket-解决了什么问题" class="headerlink" title="一、WebSocket 解决了什么问题"></a>一、WebSocket 解决了什么问题</h2><ul><li>客户端(浏览器)和服务器端进行通信，只能由客户端发起<code>ajax</code>请求，才能进行通信，服务器端无法主动向客户端推送信息</li><li>当出现类似体育赛事、聊天室、实时位置之类的场景时，客户端要获取服务器端的变化，就只能通过轮询(定时请求)来了解服务器端有没有新的信息变化</li></ul><p>轮询效率低，非常浪费资源(需要不断发送请求，不停链接服务器)</p><blockquote><p><code>WebSocket</code>的出现，让服务器端可以主动向服务器端发送信息，使得浏览器具备了实时双向通信的能力,这就是<code>WebSocket</code>解决的问题</p></blockquote><p><strong>一个超简单例子</strong></p><blockquote><p>新建一个<code>html</code>文件，将本栗子找个地方跑一下试试，即可轻松入门<code>WebSocket</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">socketConnect</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 客户端与服务器进行连接</span></span><br><span class="line">    <span class="keyword">let</span> ws = <span class="keyword">new</span> WebSocket(url); <span class="comment">// 返回`WebSocket`对象，赋值给变量ws</span></span><br><span class="line">    <span class="comment">// 连接成功回调</span></span><br><span class="line">    ws.onopen = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'连接成功'</span>, e)</span><br><span class="line">        ws.send(<span class="string">'我发送消息给服务端'</span>); <span class="comment">// 客户端与服务器端通信</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听服务器端返回的信息</span></span><br><span class="line">    ws.onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务器端返回：'</span>, e.data)</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ws; <span class="comment">// 返回websocket对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> wsValue = socketConnect(<span class="string">'ws://121.40.165.18:8800'</span>); <span class="comment">// websocket对象</span></span><br></pre></td></tr></table></figure><blockquote><p>上述栗子中<code>WebSocket</code>的接口地址出自：<code>WebSocket</code> 在线测试，在开发的时候也可以用于测试后端给的地址是否可用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1be015e181b7ed6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、webSocket的class类"><a href="#二、webSocket的class类" class="headerlink" title="二、webSocket的class类"></a>二、webSocket的class类</h2><blockquote><p>当项目中很多地方使用<code>WebSocket</code>，把它封成一个<code>class</code>类，是更好的选择</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocketClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 初始化实例属性，保存参数</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; url ws的接口</span></span><br><span class="line"><span class="comment">     * @param &#123;Function&#125; msgCallback 服务器信息的回调传数据给函数</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; name 可选值 用于区分ws，用于debugger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">constructor</span>(url, msgCallback, name = 'default') &#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.msgCallback = msgCallback;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.ws = <span class="literal">null</span>;  <span class="comment">// websocket对象</span></span><br><span class="line">        <span class="keyword">this</span>.status = <span class="literal">null</span>; <span class="comment">// websocket是否关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description: 初始化 连接websocket或重连webSocket时调用</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; 可选值 要传的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    connect(data) &#123;</span><br><span class="line">        <span class="comment">// 新建 WebSocket 实例</span></span><br><span class="line">        <span class="keyword">this</span>.ws = <span class="keyword">new</span> WebSocket(<span class="keyword">this</span>.url);</span><br><span class="line">        <span class="keyword">this</span>.ws.onopen = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 连接ws成功回调</span></span><br><span class="line">            <span class="keyword">this</span>.status = <span class="string">'open'</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>连接成功`</span>, e)</span><br><span class="line">            <span class="comment">// this.heartCheck();</span></span><br><span class="line">            <span class="keyword">if</span> (data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="comment">// 有要传的数据,就发给后端</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.ws.send(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 监听服务器端返回的信息</span></span><br><span class="line">        <span class="keyword">this</span>.ws.onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 把数据传给回调函数，并执行回调</span></span><br><span class="line">            <span class="comment">// if (e.data === 'pong') &#123;</span></span><br><span class="line">            <span class="comment">//     this.pingPong = 'pong'; // 服务器端返回pong,修改pingPong的状态</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.msgCallback(e.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ws关闭回调</span></span><br><span class="line">        <span class="keyword">this</span>.ws.onclose = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.closeHandle(e); <span class="comment">// 判断是否关闭</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ws出错回调</span></span><br><span class="line">        <span class="keyword">this</span>.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.closeHandle(e); <span class="comment">// 判断是否关闭</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// heartCheck() &#123;</span></span><br><span class="line">    <span class="comment">//     // 心跳机制的时间可以自己与后端约定</span></span><br><span class="line">    <span class="comment">//     this.pingPong = 'ping'; // ws的心跳机制状态值</span></span><br><span class="line">    <span class="comment">//     this.pingInterval = setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//         if (this.ws.readyState === 1) &#123;</span></span><br><span class="line">    <span class="comment">//             // 检查ws为链接状态 才可发送</span></span><br><span class="line">    <span class="comment">//             this.ws.send('ping'); // 客户端发送ping</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;, 10000)</span></span><br><span class="line">    <span class="comment">//     this.pongInterval = setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//         this.pingPong = false;</span></span><br><span class="line">    <span class="comment">//         if (this.pingPong === 'ping') &#123;</span></span><br><span class="line">    <span class="comment">//             this.closeHandle('pingPong没有改变为pong'); // 没有返回pong 重启webSocket</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         // 重置为ping 若下一次 ping 发送失败 或者pong返回失败(pingPong不会改成pong)，将重启</span></span><br><span class="line">    <span class="comment">//         console.log('返回pong')</span></span><br><span class="line">    <span class="comment">//         this.pingPong = 'ping'</span></span><br><span class="line">    <span class="comment">//     &#125;, 20000)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 发送信息给服务器</span></span><br><span class="line">    sendHandle(data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>发送消息给服务器:`</span>, data)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ws.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">    closeHandle(e = <span class="string">'err'</span>) &#123;</span><br><span class="line">        <span class="comment">// 因为webSocket并不稳定，规定只能手动关闭(调closeMyself方法)，否则就重连</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status !== <span class="string">'close'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>断开，重连websocket`</span>, e)</span><br><span class="line">            <span class="comment">// if (this.pingInterval !== undefined &amp;&amp; this.pongInterval !== undefined) &#123;</span></span><br><span class="line">            <span class="comment">//     // 清除定时器</span></span><br><span class="line">            <span class="comment">//     clearInterval(this.pingInterval);</span></span><br><span class="line">            <span class="comment">//     clearInterval(this.pongInterval);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">this</span>.connect(); <span class="comment">// 重连</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>websocket手动关闭`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动关闭WebSocket</span></span><br><span class="line">    closeMyself() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`关闭<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'close'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ws.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收服务器消息的回调：'</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const wsValue = new WebSocketClass('ws://121.40.165.18:8800', someFn, 'wsName'); // 这个链接一天只能发送消息50次</span></span><br><span class="line"><span class="keyword">const</span> wsValue = <span class="keyword">new</span> WebSocketClass(<span class="string">'wss://echo.websocket.org'</span>, someFn, <span class="string">'wsName'</span>); <span class="comment">// 阮一峰老师教程链接</span></span><br><span class="line">wsValue.connect(<span class="string">'立即与服务器通信'</span>); <span class="comment">// 连接服务器</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     wsValue.sendHandle('传消息给服务器')</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     wsValue.closeMyself(); // 关闭ws</span></span><br><span class="line"><span class="comment">// &#125;, 10000)</span></span><br></pre></td></tr></table></figure><blockquote><p>可以把<code>class</code>放在一个js文件里面,<code>export</code>出去，然后在需要用的地方再<code>import</code>进来，把参数传进去就可以用了</p></blockquote><h2 id="三、WebSocket不稳定"><a href="#三、WebSocket不稳定" class="headerlink" title="三、WebSocket不稳定"></a>三、WebSocket不稳定</h2><blockquote><p><code>WebSocket</code>并不稳定，在使用一段时间后，可能会断开连接，貌似至今没有一个为何会断开连接的公论，所以我们需要让<code>WebSocket</code>保持连接状态，这里推荐两种方法</p></blockquote><h3 id="3-1-WebSocket设置变量，判断是否手动关闭连接"><a href="#3-1-WebSocket设置变量，判断是否手动关闭连接" class="headerlink" title="3.1 WebSocket设置变量，判断是否手动关闭连接"></a>3.1 WebSocket设置变量，判断是否手动关闭连接</h3><blockquote><p><code>class</code>类中就是用的这种方式:设置一个变量，在<code>webSocket</code>关闭/报错的回调中，判断是不是手动关闭的，如果不是的话，就重新连接，这样做的优缺点如下</p></blockquote><ul><li>优点：请求较少(相对于心跳连接)，易设置。</li><li>缺点：可能会导致丢失数据,在断开重连的这段时间中，恰好双方正在通信</li></ul><h3 id="3-2-WebSocket心跳机制"><a href="#3-2-WebSocket心跳机制" class="headerlink" title="3.2 WebSocket心跳机制"></a>3.2 WebSocket心跳机制</h3><blockquote><p>因为第一种方案的缺点，并且可能会有其他一些未知情况导致断开连接而没有触发Error或Close事件。这样就导致实际连接已经断开了，而客户端和服务端却不知道，还在傻傻的等着消息来</p></blockquote><ul><li>想出了一种叫做心跳机制的解决方法：</li><li>客户端就像心跳一样每隔固定的时间发送一次ping，来告诉服务器，我还活着，而服务器也会返回pong，来告诉客户端，服务器还活着。</li><li>具体的实现方法，在上面<code>class</code>的注释中，将其打开，即可看到效果</li></ul><h2 id="四、关于WebSocket"><a href="#四、关于WebSocket" class="headerlink" title="四、关于WebSocket"></a>四、关于WebSocket</h2><h3 id="4-1-WebSocket的当前状态-WebSocket-readyState"><a href="#4-1-WebSocket的当前状态-WebSocket-readyState" class="headerlink" title="4.1 WebSocket的当前状态:WebSocket.readyState"></a>4.1 WebSocket的当前状态:<code>WebSocket.readyState</code></h3><p><strong>下面是WebSocket.readyState的四个值(四种状态)：</strong></p><ul><li><code>0</code>: 表示正在连接</li><li><code>1</code>: 表示连接成功，可以通信了</li><li><code>2</code>: 表示连接正在关闭</li><li><code>3</code>: 表示连接已经关闭，或者打开连接失败</li></ul><blockquote><p>我们可以利用当前状态来做一些事情，比如上面栗子中当<code>WebSocket</code>链接成功后，才允许客户端发<code>送ping</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.ws.readyState === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查ws为链接状态 才可发送</span></span><br><span class="line">    <span class="keyword">this</span>.ws.send(<span class="string">'ping'</span>); <span class="comment">// 客户端发送ping</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-WebSocket还可以发送-接收-二进制数据"><a href="#4-2-WebSocket还可以发送-接收-二进制数据" class="headerlink" title="4.2 WebSocket还可以发送/接收 二进制数据"></a>4.2 <code>WebSocket</code>还可以发送/接收 二进制数据</h3><blockquote><p>二进制数据包括：<code>blob</code>对象和<code>Arraybuffer</code>对象，所以我们需要分开来处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 接收数据</span></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断 ArrayBuffer 对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(event.data <span class="keyword">instanceof</span> Blob)&#123;</span><br><span class="line">        <span class="comment">// 判断 Blob 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 Blob 对象的例子</span></span><br><span class="line"><span class="keyword">let</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'input[type="file"]'</span>).files[<span class="number">0</span>];</span><br><span class="line">ws.send(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 ArrayBuffer 对象的例子</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(img.data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.length; i++) &#123;</span><br><span class="line">    binary[i] = img.data[i];</span><br><span class="line">&#125;</span><br><span class="line">ws.send(binary.buffer);</span><br></pre></td></tr></table></figure><blockquote><p>如果你要发送的二进制数据很大的话，如何判断发送完毕：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webSocket.bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去：</span><br><span class="line"></span><br><span class="line">var data = new ArrayBuffer(10000000);</span><br><span class="line">socket.send(data);</span><br><span class="line">if (socket.bufferedAmount === 0) &#123;</span><br><span class="line">    // 发送完毕</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 发送还没结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、WebSocket的优点"><a href="#五、WebSocket的优点" class="headerlink" title="五、WebSocket的优点"></a>五、WebSocket的优点</h2><ul><li>双向通信</li><li>数据格式比较轻量，性能开销小，通信高效<ul><li>协议控制的数据包头部较小，而<code>HTTP</code>协议每次通信都需要携带完整的头部</li></ul></li><li>更好的二进制支持</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>与 <code>HTTP</code> 协议有着良好的兼容性。默认端口也是<code>80</code>和<code>443</code>，并且握手阶段采用 <code>HTTP</code> 协议，因此握手时不容易屏蔽，能通过各种 <code>HTTP</code> 代理服务器</li></ul><h1 id="第二部分-socket-io"><a href="#第二部分-socket-io" class="headerlink" title="第二部分 socket.io"></a>第二部分 <code>socket.io</code></h1><h2 id="一、原生Node与socket-io通信"><a href="#一、原生Node与socket-io通信" class="headerlink" title="一、原生Node与socket.io通信"></a>一、原生Node与socket.io通信</h2><blockquote><p>原生<code>nodejs</code>结合<code>Socket.io</code>实现服务器和客户端的相互通信</p></blockquote><blockquote><p>官方文档 <a href="https://socket.io" target="_blank" rel="noopener">https://socket.io</a></p></blockquote><h3 id="1-1-搭建服务"><a href="#1-1-搭建服务" class="headerlink" title="1.1 搭建服务"></a>1.1 搭建服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建目录</span></span><br><span class="line">mkdir socket &amp;&amp; <span class="built_in">cd</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成package.json</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装socket</span></span><br><span class="line">npm install socket.io</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url == <span class="string">"/"</span>)&#123; <span class="comment">//显示首页</span></span><br><span class="line">        fs.readFile(<span class="string">"./index.html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123; </span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听连接事件 </span></span><br><span class="line">io.on(<span class="string">"connection"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1 个客户端连接了"</span>); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app run at 127.0.0.1:3000'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写完这句话之后，你就会发现，http://127.0.0.1:3000/socket.io/socket.io.js 就是一个 js 文件 的地址了</span></span><br></pre></td></tr></table></figure><h3 id="1-2-新建页面"><a href="#1-2-新建页面" class="headerlink" title="1.2 新建页面"></a>1.2 新建页面</h3><blockquote><p>现在需要制作一个<code>index</code>页面，这个页面中，必须引用秘密<code>js</code>文件。调用<code>io</code>函数，取得<code>socket</code> 对象</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是 index 页面，我引用了秘密 script 文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io(); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(socket)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>至此，服务器和客户端都有 <code>socket</code> 对象了。服务器的 <code>socket</code> 对象:</p></blockquote><blockquote><p><code>socket对象</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f1291bcc30268d6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="socket对象"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f2f39a010a759422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-3-服务器端通过emit广播，通过on接收广播"><a href="#1-3-服务器端通过emit广播，通过on接收广播" class="headerlink" title="1.3 服务器端通过emit广播，通过on接收广播"></a>1.3 服务器端通过emit广播，通过on接收广播</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url == <span class="string">"/"</span>)&#123; <span class="comment">//显示首页</span></span><br><span class="line">        fs.readFile(<span class="string">"./index.html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123; </span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听连接事件 </span></span><br><span class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'和服务器建立连接了'</span>);</span><br><span class="line">    </span><br><span class="line">    socket.on(<span class="string">'to-server'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 接收客户端传过来的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端说:'</span> + data);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向客户端发送数据</span></span><br><span class="line">        <span class="comment">// socket 只给当前发送消息给服务端的客户端发送消息</span></span><br><span class="line">        socket.emit(<span class="string">'to-client'</span>,<span class="string">'我是服务器返回的数据'</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;) </span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'断开连接了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">"127.0.0.1"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app run at 127.0.0.1:3000'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5898ad47b41a08a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>每一个连接上来的用户，都有一个 <code>socket</code>。由于我们的 <code>emit</code> 语句，是 <code>socket.emit()</code>发 出的，所以指的是向这个客户端发出语句。<br>广播，就是给所有当前连接的用户发送信息:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'和服务器建立连接了'</span>)</span><br><span class="line">    </span><br><span class="line">    socket.on(<span class="string">'to-server'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端说:'</span> + data);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// io 给所有建立连接的客户端发送数据，不管是哪个客户端发送消息，都会对所有客户端进行广播一次</span></span><br><span class="line">        io.emit(<span class="string">'to-client'</span>,<span class="string">'我是服务器返回的数据'</span>);</span><br><span class="line">    &#125;) </span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'断开连接了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-822ab86304a154ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1092d5ff05c378b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>io.emit()</code>可以实现聊天室消息群发</li><li><code>socket.emit()</code>可以实现聊天机器人，一对一发送</li></ul><h3 id="1-4-客户端端通过emit广播，通过on接收广播"><a href="#1-4-客户端端通过emit广播，通过on接收广播" class="headerlink" title="1.4 客户端端通过emit广播，通过on接收广播"></a>1.4 客户端端通过emit广播，通过on接收广播</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt; </span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;socket demo&lt;<span class="regexp">/title&gt; </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我是 index 页面，我引用了秘密 script 文件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="btn"&gt;给服务端发送数据&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/socket.io/socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接的地址http://localhost:3000 后台提供</span></span><br><span class="line">    <span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost:3000'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端建立连接</span></span><br><span class="line">    socket.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端和服务端建立连接了'</span>);</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端和服务端断开连接了'</span>);</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端给服务端发送数据后，监听服务端返回的数据</span></span><br><span class="line">    socket.on(<span class="string">'to-client'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端说:'</span> + data);</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        socket.emit(<span class="string">'to-server'</span>,<span class="string">'我是客户端的数据'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt; </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、聊天室、智能机器人实现原理"><a href="#二、聊天室、智能机器人实现原理" class="headerlink" title="二、聊天室、智能机器人实现原理"></a>二、聊天室、智能机器人实现原理</h2><h3 id="2-1-express简单例子"><a href="#2-1-express简单例子" class="headerlink" title="2.1 express简单例子"></a>2.1 express简单例子</h3><blockquote><p><code>Express</code> 结合 <code>Socket.io</code> 实现服务器和客户 端的相互通信、聊天室、智能机器人实现 原理</p></blockquote><blockquote><ul><li><a href="http://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">express文档</a></li><li><a href="https://socket.io/docs" target="_blank" rel="noopener">socket.io文档</a></li></ul></blockquote><p><strong>1. Server (app.js)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">// WARNING: app.listen(80) will NOT work here!</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>2. Client (index.html)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost'</span>);</span></span><br><span class="line"><span class="javascript">  socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">    socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-express实现智能机器人"><a href="#2-2-express实现智能机器人" class="headerlink" title="2.2 express实现智能机器人"></a>2.2 express实现智能机器人</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--views/index.ejx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"msg"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket = io.connect(<span class="string">'http://127.0.0.1:8000'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//群聊功能--聊天室</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> msg=$(<span class="string">'#msg'</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">'message'</span>,msg);  <span class="comment">/*客户端给服务器发送数据*/</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">//接受服务器返回的数据</span></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'servermessage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第一步*/</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'ejs'</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//res.send('首页');</span></span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/news'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'news'</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.监听端口</span></span><br><span class="line">server.listen(<span class="number">8000</span>,<span class="string">'127.0.0.1'</span>);   <span class="comment">/*改ip*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、写socket的代码</span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'建立链接'</span>)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//io.emit  广播 --- 聊天室</span></span><br><span class="line">        <span class="comment">//socket.emit  谁给我发的信息我回返回给谁 --- 智能机器人</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//io.emit('servermessage',data);   /*服务器给客户端发送数据*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(data==<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> msg=<span class="string">'您当前的话费有2元'</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> msg=<span class="string">'您当前的流量有200M'</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> msg=<span class="string">'请输入正确的信息'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.emit(<span class="string">'servermessage'</span>,msg);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/poetries/socket.io-demo/tree/master/express-socket-chat" target="_blank" rel="noopener">完整代码</a></p></blockquote><h3 id="2-3-express结合socket-io及数据库实现智能机器人"><a href="#2-3-express结合socket-io及数据库实现智能机器人" class="headerlink" title="2.3 express结合socket.io及数据库实现智能机器人"></a>2.3 express结合<code>socket.io</code>及数据库实现智能机器人</h3><blockquote><p>跨域也可以访问<code>socket.io</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DB=<span class="built_in">require</span>(<span class="string">'./module/db.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第一步*/</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'ejs'</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//res.send('首页');</span></span><br><span class="line">    res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/news'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'news'</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.监听端口</span></span><br><span class="line">server.listen(<span class="number">8000</span>,<span class="string">'127.0.0.1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app run at 127.0.0.1:8000'</span>)</span><br><span class="line">&#125;);   <span class="comment">/*改ip*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、写socket的代码</span></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'建立链接'</span>)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="comment">//socket.emit('servermessage',msg);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> msg=data.msg||<span class="string">''</span>;  <span class="comment">/*获取客户端的数据*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//去服务器查询数据</span></span><br><span class="line"></span><br><span class="line">        DB.find(<span class="string">'article'</span>,&#123;<span class="string">'title'</span>:&#123;<span class="attr">$regex</span>:<span class="keyword">new</span> <span class="built_in">RegExp</span>(msg)&#125;&#125;,&#123;<span class="string">'title'</span>:<span class="number">1</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            socket.emit(<span class="string">'servermessage'</span>,&#123;</span><br><span class="line">                result:data</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.min.js"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 360px;</span></span><br><span class="line"><span class="undefined">            overflow-y: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.message</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="undefined">            line-height: 44px;</span></span><br><span class="line"><span class="undefined">            display: flex;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.message</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.message</span> <span class="selector-tag">input</span><span class="selector-attr">[type='text']</span>&#123;</span></span><br><span class="line"><span class="undefined">            flex: 1;</span></span><br><span class="line"><span class="undefined">            height: 38px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.message</span> <span class="selector-tag">input</span><span class="selector-attr">[type='button']</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"send"</span> <span class="attr">value</span>=<span class="string">"发送"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket = io.connect(<span class="string">'http://127.0.0.1:8000'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        socket.on(<span class="string">'servermessage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(data.result.length)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> str=<span class="string">'&lt;ul&gt;'</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.result.length;i++)&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    str+=<span class="string">'&lt;li&gt;'</span>+data.result[i].title+<span class="string">'&lt;/li&gt;'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                str+=<span class="string">'&lt;/ul&gt;'</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> str=<span class="string">'&lt;p&gt;没有找到您要的数据，请联系人工客服&lt;/p&gt;'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#list'</span>).append(str);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#footer'</span>).get(<span class="number">0</span>).scrollIntoView();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username=<span class="string">'zhangsan'</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//群聊功能--聊天室</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> msg=$(<span class="string">'#msg'</span>).val();</span></span><br><span class="line"><span class="javascript">            socket.emit(<span class="string">'message'</span>,&#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">'username'</span>:username,</span></span><br><span class="line"><span class="javascript">                <span class="string">'msg'</span>:msg</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#list'</span>).append(<span class="string">`&lt;p&gt;&lt;strong&gt;<span class="subst">$&#123;username&#125;</span>:&lt;/strong&gt;  <span class="subst">$&#123;msg&#125;</span>&lt;/p&gt;`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#msg'</span>).val();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/poetries/socket.io-demo/tree/master/express-socket-chat-use-db" target="_blank" rel="noopener">完整代码</a></p></blockquote><h2 id="三、Koa中Socket-io的使用"><a href="#三、Koa中Socket-io的使用" class="headerlink" title="三、Koa中Socket.io的使用"></a>三、Koa中Socket.io的使用</h2><p><strong>1. 服务端配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 安装</span></span><br><span class="line">cnpm i -S koa-socket</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 引入</span></span><br><span class="line"><span class="keyword">const</span> IO = <span class="built_in">require</span>( <span class="string">'koa-socket'</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 实例化</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> IO()</span><br><span class="line"></span><br><span class="line">io.attach( app )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 配置服务端</span></span><br><span class="line"></span><br><span class="line">app._io.on( <span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'建立连接了'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 客户端代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:3000/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> socket=io.connect(<span class="string">'http://localhost:3000/'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/poetries/socket.io-demo/tree/master/koa-socket.io" target="_blank" rel="noopener">完整代码</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分-WebSocket&quot;&gt;&lt;a href=&quot;#第一部分-WebSocket&quot; class=&quot;headerlink&quot; title=&quot;第一部分 WebSocket&quot;&gt;&lt;/a&gt;第一部分 WebSocket&lt;/h1&gt;&lt;h2 id=&quot;一、WebSocket-解决了什么
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Socket" scheme="http://blog.poetries.top/tags/Socket/"/>
    
      <category term="Websocket" scheme="http://blog.poetries.top/tags/Websocket/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB拾遗(一)</title>
    <link href="http://blog.poetries.top/2019/01/22/mongodb-review-1/"/>
    <id>http://blog.poetries.top/2019/01/22/mongodb-review-1/</id>
    <published>2019-01-22T09:10:30.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-mongodb简介"><a href="#1-1-mongodb简介" class="headerlink" title="1.1 mongodb简介"></a>1.1 mongodb简介</h2><ul><li><code>MongoDB</code>旨在为WEB应用提供可扩展的高性能数据存储解决方案</li><li><code>MongoDB</code> 将数据存储为一个文档，数据结构由键值(<code>key=&gt;value</code>)对组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组</li></ul><p><img src="http://www.runoob.com/wp-content/uploads/2013/10/crud-annotated-document.png" alt=""></p><p><strong>主要特点</strong></p><ul><li>高可扩展性</li><li>分布式存储</li><li>低成本</li><li>结构灵活</li></ul><h2 id="1-2-window下mongodb环境搭建"><a href="#1-2-window下mongodb环境搭建" class="headerlink" title="1.2 window下mongodb环境搭建"></a>1.2 window下mongodb环境搭建</h2><ul><li>下载安装包或压缩包</li><li>添加<code>db</code>存储和日志存储文件夹</li><li>添加服务、配置环境变量、启动<code>Mongo</code></li></ul><blockquote><p>配置演示</p></blockquote><ul><li>在任意目录创建几个文件夹</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5831e0dfd11d0593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/1480597-a003b9fd9732c9c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>通过命令行启动服务</strong></p><blockquote><p>配置环境变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  --dbpath指定数据存储位置</span></span><br><span class="line">C:\Program Files\MongoDB\Server\3.4\bin\mongod --dbpath d:\mongodb\data</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c7b26e6dfcfbbf2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>通配置启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置d:\mongodb\etc\mongodb.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库路径</span></span><br><span class="line">dbpath=d:\mongodb\data\</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出文件路径</span></span><br><span class="line">logpath=d:\mongodb\logs\mongodb.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#端口号 默认为27017</span></span><br><span class="line">port=27017</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定存储引擎（默认先不加此引擎，如果报错了，大家在加进去）</span></span><br><span class="line">storageEngine=mmapv1</span><br><span class="line"></span><br><span class="line"><span class="comment">#http配置 开启这个服务才可以在网页中访问 端口28017</span></span><br><span class="line">httpinterface=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>启动方式 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MongoDB\Server\3.4\bin\mongod --config d:\mongodb\data</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-a8ee6a8c3346a04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>更加简洁的启动方式</strong></p><blockquote><p>安装到<code>window</code>的服务里面，打开Windows看一下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MongoDB\Server\3.4\bin\mongod --config d:\mongodb\data --install --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d4264668a126d16a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>使用MongoVue连接数据库</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c95265b254748783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-e829f03b6d3b27c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-3-linux下mongodb环境搭建"><a href="#1-3-linux下mongodb环境搭建" class="headerlink" title="1.3 linux下mongodb环境搭建"></a>1.3 linux下mongodb环境搭建</h2><ul><li>下载安装包或压缩包</li><li>添加<code>db</code>存储和日志存储文件夹</li><li>添加服务、配置环境变量、启动<code>Mongo</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程登录服务器</span></span><br><span class="line">ssh root@123.142.25.365</span><br></pre></td></tr></table></figure><blockquote><p>上传本地的安装包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传文件夹，传文件不需要r</span></span><br><span class="line">scp /mongodb/... -r root@123.142.25.365:/home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传到服务器的/home/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在指定的目录创建启动需要的文件</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /home/</span><br><span class="line">$ mkdir etc logs data</span><br><span class="line">$ touch logs/mongodb.log etc/mongo.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /home/etc/mongo.conf配置</span></span><br><span class="line"></span><br><span class="line">dbpath=/home/mongodb/data</span><br><span class="line">logpath=/mongodb/logs/mongodb.log</span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line">port=2701</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">mongod -f /home/mongodb/etc/mongo.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line"></span><br><span class="line">ln -s /home/mongodb/bin/mongo /usr/<span class="built_in">local</span>/bin/mongo</span><br><span class="line"></span><br><span class="line">ln -s /home/mongodb/bin/mongod /usr/<span class="built_in">local</span>/bin/mongod</span><br></pre></td></tr></table></figure><h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><h2 id="2-1-数据库对比"><a href="#2-1-数据库对比" class="headerlink" title="2.1 数据库对比"></a>2.1 数据库对比</h2><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解析/说明</th></tr></thead><tbody><tr><td><code>database</code></td><td><code>database</code></td><td>数据库</td></tr><tr><td><code>table</code></td><td><code>collection</code></td><td>数据表/集合</td></tr><tr><td><code>row</code></td><td><code>document</code></td><td>数据记录/文档</td></tr><tr><td><code>column</code></td><td><code>field</code></td><td>数据记录行/文档</td></tr><tr><td><code>index</code></td><td><code>index</code></td><td>索引</td></tr><tr><td><code>table</code></td><td><code>joins</code></td><td>表连接，<code>MongoDB</code>不支持</td></tr><tr><td><code>primary key</code></td><td><code>primary key</code></td><td>主键,<code>MongoDB</code>自动将<code>_id</code>字段设置为主键</td></tr></tbody></table><p><img src="http://www.runoob.com/wp-content/uploads/2013/10/Figure-1-Mapping-Table-to-Collection-1.png" alt=""></p><h2 id="2-2-数据库"><a href="#2-2-数据库" class="headerlink" title="2.2 数据库"></a>2.2 数据库</h2><ul><li>一个<code>mongodb</code>中可以建立多个数据库</li><li><code>MongoDB</code>的默认数据库为”<code>db</code>“，该数据库存储在<code>data</code>目录中</li><li><code>&quot;show dbs&quot;</code> 命令可以显示所有数据的列表</li><li>执行 <code>&quot;db&quot;</code> 命令可以显示当前数据库对象或集合</li><li><code>&quot;use&quot;</code>命令，可以连接到一个指定的数据库</li></ul><h2 id="2-3-文档"><a href="#2-3-文档" class="headerlink" title="2.3 文档"></a>2.3 文档</h2><ul><li>文档是一组键值(<code>key-value</code>)对(即<code>BSON</code>)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"site"</span>:<span class="string">"www.runoob.com"</span>, <span class="string">"name"</span>:<span class="string">"菜鸟教程"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-插入文档"><a href="#2-4-插入文档" class="headerlink" title="2.4 插入文档"></a>2.4 插入文档</h2><ul><li>切换数据库<ul><li><code>use</code> 数据库名(没有就创建)</li></ul></li><li><code>db.createCollection(&quot;user&quot;)</code><ul><li>创建集合相当于创建表名</li><li>或者这样创建<ul><li><code>db.user.inert({id:123})</code></li></ul></li></ul></li></ul><h2 id="2-5-插入数据表"><a href="#2-5-插入数据表" class="headerlink" title="2.5 插入数据表"></a>2.5 插入数据表</h2><p><strong>1. 手动插入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换创建数据库</span></span><br><span class="line">use demo </span><br><span class="line"></span><br><span class="line"><span class="comment"># goods相当于数据表</span></span><br><span class="line">db.goods.insert(&#123;<span class="string">"prodictId"</span>:<span class="string">"10001"</span>,<span class="string">"productName"</span>:<span class="string">"aaa"</span>,<span class="string">"slaePrice"</span>:246,<span class="string">"productImage"</span>:<span class="string">"1.jpg"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表，暂时不需插入数据</span></span><br><span class="line">db.createCollection(<span class="string">"goods"</span>)</span><br></pre></td></tr></table></figure><p><strong>2. 客户端插入</strong></p><blockquote><p>利用<code>mongodbVue</code>导入</p></blockquote><h1 id="三、常用操作"><a href="#三、常用操作" class="headerlink" title="三、常用操作"></a>三、常用操作</h1><h2 id="3-1-创建用户"><a href="#3-1-创建用户" class="headerlink" title="3.1 创建用户"></a>3.1 创建用户</h2><p><strong>1. 创建管理员</strong></p><ul><li>开启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --auth进行授权，需要认证才可以</span></span><br><span class="line">mongod -f d:/mongodb/etc/mongodb.conf --auth</span><br></pre></td></tr></table></figure><p><strong>2. 通过非授权的方式启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建admin数据库</span></span><br><span class="line">use admin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给admin数据库创建账号 </span></span><br><span class="line">db.createUser(&#123;user:<span class="string">"admin"</span>,<span class="built_in">pwd</span>:<span class="string">"admin"</span>,roles:[<span class="string">"root"</span>]&#125;) <span class="comment"># 3.4</span></span><br><span class="line">db.addUser <span class="comment"># 2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建成功需要认证</span></span><br><span class="line">db.auth(<span class="string">"admin"</span>,<span class="string">"admin"</span>) <span class="comment"># 账号、密码</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c909a3f3f48e4bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>3. 给使用的数据库添加用户</strong></p><ol><li>创建用户</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/1480597-feec4daf98fa1492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>然后在授权登录试一下</li></ol><h2 id="3-2-MongoDB-创建数据库"><a href="#3-2-MongoDB-创建数据库" class="headerlink" title="3.2 MongoDB 创建数据库"></a>3.2 MongoDB 创建数据库</h2><ul><li><code>MongoDB</code> 创建数据库的语法格式如下</li><li>如果数据库不存在，则创建数据库，否则切换到指定数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure><ul><li>查看所有数据库 <ul><li><code>show dbs</code></li></ul></li><li>我们刚创建的数据库 runoob 并不在数据库的列表中， 要显示它，我们需要向 runoob 数据库插入一些数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.runoob.insert(&#123;<span class="string">"name"</span>:<span class="string">"poetries"</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; show dbs</span><br></pre></td></tr></table></figure><h2 id="3-3-MongoDB-删除数据库"><a href="#3-3-MongoDB-删除数据库" class="headerlink" title="3.3 MongoDB 删除数据库"></a>3.3 MongoDB 删除数据库</h2><ul><li><code>MongoDB</code>删除数据库的语法格式如下</li><li>删除当前数据库，默认为 <code>test</code>，你可以使用 <code>db</code> 命令查看当前数据库名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h2 id="3-4-删除集合"><a href="#3-4-删除集合" class="headerlink" title="3.4 删除集合"></a>3.4 删除集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><h2 id="3-5-MongoDB-插入文档"><a href="#3-5-MongoDB-插入文档" class="headerlink" title="3.5 MongoDB 插入文档"></a>3.5 MongoDB 插入文档</h2><blockquote><p>文档的数据结构和<code>JSON</code>基本一样</p></blockquote><h2 id="3-6-插入文档"><a href="#3-6-插入文档" class="headerlink" title="3.6 插入文档"></a>3.6 插入文档</h2><ul><li><code>MongoDB</code> 使用 <code>insert()</code>或 <code>save()</code> 方法向集合中插入文档，语法如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br></pre></td></tr></table></figure><ul><li>以下文档可以存储在 <code>MongoDB</code> 的 <code>runoob</code>数据库 的 <code>col</code> 集合中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: <span class="string">'MongoDB 学习'</span>, </span><br><span class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</span><br><span class="line">    by: <span class="string">'poetries'</span>,</span><br><span class="line">    url: <span class="string">'http://blog.poetries.top'</span>,</span><br><span class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>以上实例中 <code>col</code> 是我们的集合名，如果该集合不在该数据库中， <code>MongoDB</code> 会自动创建该集合并插入文档。</p></li><li><p>查看已插入文档</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find()</span><br><span class="line">&gt; db.col.find().pretty() <span class="comment">#格式化方式查看</span></span><br></pre></td></tr></table></figure><h2 id="3-7-MongoDB-更新文档"><a href="#3-7-MongoDB-更新文档" class="headerlink" title="3.7 MongoDB 更新文档"></a>3.7 MongoDB 更新文档</h2><ul><li><code>MongoDB</code> 使用 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档</li></ul><h2 id="3-7-update-方法"><a href="#3-7-update-方法" class="headerlink" title="3.7 update() 方法"></a>3.7 update() 方法</h2><blockquote><p><code>update()</code> 方法用于更新已存在的文档。语法格式如下</p></blockquote><ul><li>通过 <code>update()</code>方法来更新标题(<code>title</code>):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update(&#123;&apos;title&apos;:&apos;MongoDB 学习&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;MongoDB&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="四、常用查询语句"><a href="#四、常用查询语句" class="headerlink" title="四、常用查询语句"></a>四、常用查询语句</h1><table><thead><tr><th>mongo</th><th>sql</th><th>说明</th></tr></thead><tbody><tr><td><code>db.users.find()</code></td><td><code>select * from users</code></td><td>从<code>user</code>表中查询所有数据</td></tr><tr><td><code>db.users.find({“username” : “joe”, “age” : 27})</code></td><td><code>select * from users where “username” = “joe” and age = 27</code></td><td>查找<code>username = joe</code>且<code>age = 27</code>的人</td></tr><tr><td><code>db.users.find({}, {“username” : 1, “email” : 1})</code></td><td><code>select username, email from users</code></td><td>查找<code>username</code>,<code>email</code>这<code>2</code>个子项</td></tr><tr><td><code>db.users.find({“age” : {“$gt” : 18}})</code></td><td><code>select * from users where age &gt;18</code></td><td>查找<code>age &gt; 18</code>的会员</td></tr><tr><td><code>db.users.find({“age” : {“$gte” : 18}})</code></td><td><code>select * from users where age &gt;=18</code></td><td>查找<code>age &gt;= 18</code>的人</td></tr><tr><td><code>db.users.find({“age” : {“$lt” : 18}})</code></td><td><code>select * from users where age &lt;18</code></td><td>查找<code>age &lt; 18</code>的人</td></tr><tr><td><code>db.users.find({“age” : {“$lte” : 18}})</code></td><td><code>select * from users where age &lt;=18</code></td><td>查找<code>age &lt;= 18</code>的人</td></tr><tr><td><code>db.users.find({“username” : {“$ne” : “joe”}})</code></td><td><code>select * from users where username &lt;&gt; “joe”</code></td><td>查找 <code>username != joe</code>的会员</td></tr><tr><td><code>db.users.find({“ticket_no” : {“$in” : [725, 542, 390]}})</code></td><td><code>select * from users where ticket_no in (725, 542, 390)</code></td><td>符合<code>tickt_no</code>在此范围的结果</td></tr><tr><td><code>db.users.find({“ticket_no” : {“$nin” : [725, 542, 390]}})</code></td><td><code>select * from users where ticket_no not in (725, 542, 390)</code></td><td>符合<code>tickt_no</code>不在此范围的结果</td></tr><tr><td><code>db.users.find({“name” : /joey^/})</code></td><td><code>select * from users where name like “joey%”</code></td><td>查找前<code>4</code>个字符为<code>joey</code>的人</td></tr></tbody></table><h1 id="五、MongoDB链接"><a href="#五、MongoDB链接" class="headerlink" title="五、MongoDB链接"></a>五、MongoDB链接</h1><h2 id="5-1-MongoDB链接express"><a href="#5-1-MongoDB链接express" class="headerlink" title="5.1 MongoDB链接express"></a>5.1 MongoDB链接express</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接mongo 并且使用React这个集合，没有就会新建</span></span><br><span class="line"><span class="keyword">const</span> DB_URL = <span class="string">'mongodb://127.0.0.1:27017/react'</span>;</span><br><span class="line">mongoose.connect(DB_URL);</span><br><span class="line">mongoose.connection.on(<span class="string">'connected'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mongo connect success'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于MySQL的表 mongo里有文档、字段的概念</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'user'</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    user:&#123;<span class="attr">type</span>:<span class="built_in">String</span>,<span class="attr">require</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    age:&#123;<span class="attr">type</span>:<span class="built_in">Number</span>,<span class="attr">require</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据</span></span><br><span class="line"><span class="comment">// User.create(&#123;</span></span><br><span class="line"><span class="comment">//     user:'小胡',</span></span><br><span class="line"><span class="comment">//     age:18</span></span><br><span class="line"><span class="comment">// &#125;,(err,doc)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     if(!err) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(doc)</span></span><br><span class="line"><span class="comment">//     &#125; else &#123;</span></span><br><span class="line"><span class="comment">//         console.log(err)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 &#123;&#125;过滤对象</span></span><br><span class="line"><span class="comment">// User.remove(&#123;age:22&#125;,(err,doc)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(doc)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">User.update(&#123;<span class="string">'user'</span>:<span class="string">'小明'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="attr">age</span>:<span class="number">30</span>&#125;&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(doc)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">'&lt;h1&gt;Hello word!&lt;/h1&gt;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/data'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// findOne 只返回一条，返回对象直接使用，而不是返回数组</span></span><br><span class="line">    User.findOne(&#123;<span class="string">'user'</span>:<span class="string">'小明'</span>&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">        res.json(doc)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">9000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Node app listen 9000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一、环境搭建&quot;&gt;&lt;/a&gt;一、环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-1-mongodb简介&quot;&gt;&lt;a href=&quot;#1-1-mongodb简介&quot; class=&quot;he
      
    
    </summary>
    
      <category term="DataBase" scheme="http://blog.poetries.top/categories/DataBase/"/>
    
    
      <category term="MongoDB" scheme="http://blog.poetries.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Mysql基础复习</title>
    <link href="http://blog.poetries.top/2019/01/22/mysql-base-review/"/>
    <id>http://blog.poetries.top/2019/01/22/mysql-base-review/</id>
    <published>2019-01-22T07:26:48.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没用<code>sql</code>，都忘得干干净净，翻阅以前的学习笔记，觉得有些可记录的点，放在这里以便备用查阅</p></blockquote><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><blockquote><p><code>mac</code>安装<code>MySQL</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fa5376b2c9fa8418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line">mysql.server start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录</span></span><br><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="1、数据库的连接"><a href="#1、数据库的连接" class="headerlink" title="1、数据库的连接"></a>1、数据库的连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line">mysql -u root -p 123456 -h 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li><code>-u</code> 用户名</li><li><code>-p</code> 密码</li><li><code>-h</code> <code>host</code>主机</li></ul><h3 id="2、库级知识"><a href="#2、库级知识" class="headerlink" title="2、库级知识"></a>2、库级知识</h3><blockquote><p>命令后面加上分号</p></blockquote><ul><li>显示数据库: <code>show databases;</code></li><li>选择数据库: <code>use dbname;</code></li><li>创建数据库: <code>create database dbname charset utf8;</code></li><li>删除数据库: <code>drop database dbname;</code></li></ul><h3 id="3、表级操作"><a href="#3、表级操作" class="headerlink" title="3、表级操作"></a>3、表级操作</h3><h4 id="3-1-显示库下面的表"><a href="#3-1-显示库下面的表" class="headerlink" title="3.1 显示库下面的表"></a>3.1 显示库下面的表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h4 id="3-2-查看表的结构"><a href="#3-2-查看表的结构" class="headerlink" title="3.2 查看表的结构"></a>3.2 查看表的结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc tableName;</span><br></pre></td></tr></table></figure><h4 id="3-3-查看表的创建过程"><a href="#3-3-查看表的创建过程" class="headerlink" title="3.3 查看表的创建过程:"></a>3.3 查看表的创建过程:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table  tableName;</span><br></pre></td></tr></table></figure><h4 id="3-4-创建表"><a href="#3-4-创建表" class="headerlink" title="3.4 创建表"></a>3.4 创建表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table tbName (</span><br><span class="line">列名称1　列类型　[列参数]　[not null default ],</span><br><span class="line">列名称N　列类型　[列参数]　[not null default ]</span><br><span class="line">) engine myisam/innodb charset utf8/gbk</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table user (</span><br><span class="line">    id    int         auto_increment,</span><br><span class="line">    name  varchar(20) not null default <span class="string">''</span>,</span><br><span class="line">    age   tinyint unsigned not null default 0,</span><br><span class="line">    index id (id)</span><br><span class="line">)engine=innodb charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:innodb是表引擎,也可以是myisam或其他,但最常用的是myisam和innodb,</span></span><br><span class="line"><span class="comment"># charset 常用的有utf8,gbk;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-修改表"><a href="#3-5-修改表" class="headerlink" title="3.5 修改表"></a>3.5 修改表</h4><p><strong>3.5.1    修改表之增加列</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName add 列名称１　列类型　[列参数]　[not null default ]　</span><br><span class="line"></span><br><span class="line"><span class="comment">#(add之后的旧列名之后的语法和创建表时的列声明一样)</span></span><br></pre></td></tr></table></figure><p><strong>3.5.2    修改表之修改列</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName change 旧列名  新列名  列类型　[列参数]　[not null default ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (注:旧列名之后的语法和创建表时的列声明一样)</span></span><br></pre></td></tr></table></figure><p><strong>3.5.3    修改表之减少列</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName drop 列名称;</span><br></pre></td></tr></table></figure><p><strong>3.5.4    修改表之增加主键</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName add primary key(主键所在列名);</span><br></pre></td></tr></table></figure><blockquote><p>例:<code>alter table goods add primary key(id)</code> 该例是把主键建立在<code>id</code>列上</p></blockquote><p><strong>3.5.5    修改表之删除主键</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName　drop primary key;</span><br></pre></td></tr></table></figure><p><strong>3.5.6    修改表之增加索引</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName add [unique|fulltext] index 索引名(列名);</span><br></pre></td></tr></table></figure><p><strong>3.5.7    修改表之删除索引</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tbName drop index 索引名;</span><br></pre></td></tr></table></figure><p><strong>3.5.8    清空表的数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate tableName;</span><br></pre></td></tr></table></figure><h3 id="4、列类型讲解"><a href="#4、列类型讲解" class="headerlink" title="4、列类型讲解"></a>4、列类型讲解</h3><h4 id="4-1-列类型"><a href="#4-1-列类型" class="headerlink" title="4.1 列类型"></a>4.1 列类型</h4><ul><li><code>tinyint (0~255/-128~127)</code></li><li><code>smallint (0~65535/-32768~32767)</code></li><li><code>mediumint</code></li><li><code>int</code> </li><li><code>bigint</code></li></ul><p><strong>参数解释</strong></p><blockquote><p><code>unsigned</code> 无符号(不能为负)  <code>zerofill 0</code>填充  <code>M</code> 填充后的宽度</p></blockquote><ul><li>举例:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tinyint unsigned;</span><br><span class="line">tinyint(6) zerofill;</span><br></pre></td></tr></table></figure><h4 id="4-2-数值型"><a href="#4-2-数值型" class="headerlink" title="4.2 数值型"></a>4.2 数值型</h4><ul><li>浮点型:<code>float</code> <code>double</code></li><li>格式:<code>float(M,D)</code>  <code>unsigned\zerofill;</code></li></ul><h4 id="4-3-字符型"><a href="#4-3-字符型" class="headerlink" title="4.3 字符型"></a>4.3 字符型</h4><ul><li><code>char(m)</code> 定长</li><li><code>varchar(m)</code>变长</li><li><code>text</code></li></ul><table><thead><tr><th>列</th><th>实存字符i</th><th>实占空间</th><th>利用率</th></tr></thead><tbody><tr><td><code>char(M)</code></td><td><code>0&lt;=i&lt;=M</code></td><td><code>M</code></td><td><code>i/m&lt;=100%</code></td></tr><tr><td><code>varchar(M)</code></td><td><code>0&lt;=i&lt;=M</code></td><td><code>i+1,2</code></td><td><code>i/i+1/2&lt;100%</code></td></tr></tbody></table><h4 id="4-4-日期时间类型"><a href="#4-4-日期时间类型" class="headerlink" title="4.4 日期时间类型"></a>4.4 日期时间类型</h4><ul><li><code>year</code>       <code>YYYY</code>    范围:<code>1901~2155</code>. 可输入值<code>2</code>位和<code>4</code>位(如<code>98</code>,<code>2012</code>)</li><li><code>date</code>       <code>YYYY-MM-DD</code> 如:<code>2010-03-14</code></li><li><code>time</code>       <code>HH:MM:SS</code>    如:<code>19:26:32</code></li><li><code>datetime</code>   <code>YYYY-MM-DD</code>  <code>HH:MM:SS</code> 如:<code>2010-03-14 19:26:32</code></li><li><code>timestamp</code>  <code>YYYY-MM-DD</code>  <code>HH:MM:SS</code> </li></ul><blockquote><p>特性:不用赋值,该列会为自己赋当前的具体时间</p></blockquote><h3 id="5、增删改查基本操作"><a href="#5、增删改查基本操作" class="headerlink" title="5、增删改查基本操作"></a>5、增删改查基本操作</h3><h4 id="5-1-插入数据"><a href="#5-1-插入数据" class="headerlink" title="5.1 插入数据"></a>5.1 插入数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(col1,col2,……) values(val1,val2……); <span class="comment"># -- 插入指定列</span></span><br><span class="line"></span><br><span class="line">insert into 表名 values (,,,,); <span class="comment"># -- 插入所有列</span></span><br><span class="line"></span><br><span class="line">insert into 表名 values<span class="comment"># -- 一次插入多行 </span></span><br><span class="line">(val1,val2……),</span><br><span class="line">(val1,val2……),</span><br><span class="line">(val1,val2……);</span><br></pre></td></tr></table></figure><h4 id="5-2-修改数据"><a href="#5-2-修改数据" class="headerlink" title="5.2 修改数据"></a>5.2 修改数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update tablename </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> </span><br><span class="line"></span><br><span class="line">col1=newval1,  </span><br><span class="line">col2=newval2,</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">colN=newvalN</span><br><span class="line"><span class="built_in">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id="5-3-删除数据"><a href="#5-3-删除数据" class="headerlink" title="5.3 删除数据"></a>5.3 删除数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from tablenaeme <span class="built_in">where</span> 条件;</span><br></pre></td></tr></table></figure><h4 id="5-4-select-查询"><a href="#5-4-select-查询" class="headerlink" title="5.4 select 查询"></a>5.4 select 查询</h4><ol><li>条件查询   <code>where</code></li></ol><ul><li>条件表达式的意义，表达式为真，则该行取出</li><li>比较运算符  <code>=</code> ，<code>!=</code>，<code>&lt; &gt;</code> <code>&lt;=</code> <code>&gt;=</code></li><li><code>like</code> , <code>not like</code> (‘<code>%</code>‘匹配任意多个字符,’<code>_</code>‘匹配任意单个字符) <code>in</code>, <code>not in</code> , <code>between and</code></li><li><code>is null</code> , <code>is not null</code></li></ul><ol start="2"><li>分组 <code>group by</code> 一般要配合<code>5</code>个聚合函数使用 <code>max</code>, <code>min</code>, <code>sum</code>, <code>avg</code>, <code>count</code></li><li>筛选<code>having</code></li><li>排序<code>order by</code></li><li>限制<code>limit</code></li></ol><h3 id="6、连接查询"><a href="#6、连接查询" class="headerlink" title="6、连接查询"></a>6、连接查询</h3><h4 id="6-1-左连接"><a href="#6-1-左连接" class="headerlink" title="6.1 左连接"></a>6.1 左连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.. left join .. on</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table A left join table B on tableA.col1 = tableB.col2 ;</span><br></pre></td></tr></table></figure><blockquote><p>例句:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名 from table A left join table B on tableA.col1 = tableB.col2</span><br></pre></td></tr></table></figure><h4 id="6-2-右链接"><a href="#6-2-右链接" class="headerlink" title="6.2 右链接"></a>6.2 右链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">right join</span><br></pre></td></tr></table></figure><h4 id="6-3-内连接"><a href="#6-3-内连接" class="headerlink" title="6.3 内连接"></a>6.3 内连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inner join</span><br></pre></td></tr></table></figure><ul><li>左右连接都是以在左边的表的数据为准,沿着左表查右表.</li><li>内连接是以两张表都有的共同部分数据为准,也就是左右连接的数据之交集</li></ul><h3 id="7、子查询"><a href="#7、子查询" class="headerlink" title="7、子查询"></a>7、子查询</h3><blockquote><p><code>where</code> 型子查询:内层<code>sql</code>的返回值在<code>where</code>后作为条件表达式的一部分</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例句: select * from tableA where colA = (select colB from tableB where ...);</span></span><br></pre></td></tr></table></figure><blockquote><p><code>from</code> 型子查询:内层<code>sql</code>查询结果,作为一张表,供外层的<code>sql</code>语句再次查询</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句:select * from (select * from ...) as tableName <span class="built_in">where</span> ....</span><br></pre></td></tr></table></figure><h3 id="8、字符集"><a href="#8、字符集" class="headerlink" title="8、字符集"></a>8、字符集</h3><ul><li>客户端<code>sql</code>编码 <code>character_set_client</code></li><li>服务器转化后的<code>sql</code>编码 <code>character_set_connection</code></li><li>服务器返回给客户端的结果集编码<code>character_set_results</code></li><li>快速把以上<code>3</code>个变量设为相同值: <code>set names</code> 字符集</li></ul><p><strong>存储引擎 engine=1\2</strong></p><ul><li><code>Myisam</code>  速度快 不支持事务 回滚</li><li><code>Innodb</code>  速度慢 支持事务,回滚</li></ul><p><strong>事务</strong></p><ul><li>开启事务  <code>start transaction</code></li><li>运行<code>sql;</code>      </li><li>提交,同时生效\回滚 <code>commit\rollback</code></li></ul><p><strong>触发器</strong></p><ul><li>触发器 <code>trigger</code></li><li>监视地点:表</li><li>监视行为:增 删 改</li><li>触发时间:<code>after\before</code></li><li>触发事件:增删改</li></ul><p><strong>创建触发器语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create trigger tgName</span><br><span class="line">after/before insert/delete/update </span><br><span class="line">on tableName</span><br><span class="line"><span class="keyword">for</span> each row</span><br><span class="line">sql; <span class="comment"># -- 触发语句</span></span><br></pre></td></tr></table></figure><ul><li>删除触发器:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger tgName;</span><br></pre></td></tr></table></figure><p><strong>索引</strong></p><ul><li>提高查询速度,但是降低了增删改的速度,所以使用索引时,要综合考虑.</li><li>索引不是越多越好,一般我们在常出现于条件表达式中的列加索引.</li><li>值越分散的列，索引的效果越好</li></ul><p><strong>索引类型</strong></p><ul><li><code>primary key</code>主键索引</li><li><code>index</code> 普通索引</li><li><code>unique index</code> 唯一性索引</li><li><code>fulltext index</code> 全文索引</li></ul><p><strong>综合练习:</strong></p><ul><li>连接上数据库服务器</li><li>创建一个<code>gbk</code>编码的数据库</li><li>建立商品表和栏目表,字段如下:</li></ul><p><strong>商品表:goods</strong></p><ul><li><code>goods_id</code>　–主键,</li><li><code>goods_name</code> – 商品名称</li><li><code>cat_id</code>  – 栏目<code>id</code></li><li><code>brand_id</code> – 品牌<code>id</code></li><li><code>goods_sn</code> – 货号</li><li><code>goods_number</code> – 库存量</li><li><code>shop_price</code>  – 价格</li><li><code>goods_desc</code>　–商品详细描述</li></ul><p><strong>栏目表:category</strong></p><ul><li>cat_id –主键 </li><li>cat_name – 栏目名称</li><li>parent_id – 栏目的父id</li></ul><blockquote><p>建表完成后,作以下操作:</p></blockquote><ul><li>删除goods表的goods_desc 字段,及货号字段</li><li>并增加字段:click_count  – 点击量</li><li>在goods_name列上加唯一性索引</li><li>在shop_price列上加普通索引</li><li>在clcik_count列上加普通索引</li><li>删除click_count列上的索引</li></ul><p><strong>对goods表插入以下数据:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">+----------+------------------------------+--------+----------+-----------+--------------+------------+-------------+</span><br><span class="line">| goods_id | goods_name                   | cat_id | brand_id | goods_sn  | goods_number | shop_price | click_count |</span><br><span class="line">+----------+------------------------------+--------+----------+-----------+--------------+------------+-------------+</span><br><span class="line">|        1 | KD876                        |      4 |        8 | ECS000000 |           10 |    1388.00 |           7 |</span><br><span class="line">|        4 | 诺基亚N85原装充电器          |      8 |        1 | ECS000004 |           17 |      58.00 |           0 |</span><br><span class="line">|        3 | 诺基亚原装5800耳机           |      8 |        1 | ECS000002 |           24 |      68.00 |           3 |</span><br><span class="line">|        5 | 索爱原装M2卡读卡器           |     11 |        7 | ECS000005 |            8 |      20.00 |           3 |</span><br><span class="line">|        6 | 胜创KINGMAX内存卡            |     11 |        0 | ECS000006 |           15 |      42.00 |           0 |</span><br><span class="line">|        7 | 诺基亚N85原装立体声耳机HS-82 |      8 |        1 | ECS000007 |           20 |     100.00 |           0 |</span><br><span class="line">|        8 | 飞利浦9@9v                   |      3 |        4 | ECS000008 |           17 |     399.00 |           9 |</span><br><span class="line">|        9 | 诺基亚E66                    |      3 |        1 | ECS000009 |           13 |    2298.00 |          20 |</span><br><span class="line">|       10 | 索爱C702c                    |      3 |        7 | ECS000010 |            7 |    1328.00 |          11 |</span><br><span class="line">|       11 | 索爱C702c                    |      3 |        7 | ECS000011 |            1 |    1300.00 |           0 |</span><br><span class="line">|       12 | 摩托罗拉A810                 |      3 |        2 | ECS000012 |            8 |     983.00 |          14 |</span><br><span class="line">|       13 | 诺基亚5320 XpressMusic       |      3 |        1 | ECS000013 |            8 |    1311.00 |          13 |</span><br><span class="line">|       14 | 诺基亚5800XM                 |      4 |        1 | ECS000014 |            4 |    2625.00 |           6 |</span><br><span class="line">|       15 | 摩托罗拉A810                 |      3 |        2 | ECS000015 |            3 |     788.00 |           8 |</span><br><span class="line">|       16 | 恒基伟业G101                 |      2 |       11 | ECS000016 |            0 |     823.33 |           3 |</span><br><span class="line">|       17 | 夏新N7                       |      3 |        5 | ECS000017 |            1 |    2300.00 |           2 |</span><br><span class="line">|       18 | 夏新T5                       |      4 |        5 | ECS000018 |            1 |    2878.00 |           0 |</span><br><span class="line">|       19 | 三星SGH-F258                 |      3 |        6 | ECS000019 |            0 |     858.00 |           7 |</span><br><span class="line">|       20 | 三星BC01                     |      3 |        6 | ECS000020 |           13 |     280.00 |          14 |</span><br><span class="line">|       21 | 金立 A30                     |      3 |       10 | ECS000021 |           40 |    2000.00 |           4 |</span><br><span class="line">|       22 | 多普达Touch HD               |      3 |        3 | ECS000022 |            0 |    5999.00 |          15 |</span><br><span class="line">|       23 | 诺基亚N96                    |      5 |        1 | ECS000023 |            8 |    3700.00 |          17 |</span><br><span class="line">|       24 | P806                         |      3 |        9 | ECS000024 |          148 |    2000.00 |          36 |</span><br><span class="line">|       25 | 小灵通/固话50元充值卡        |     13 |        0 | ECS000025 |            2 |      48.00 |           0 |</span><br><span class="line">|       26 | 小灵通/固话20元充值卡        |     13 |        0 | ECS000026 |            2 |      19.00 |           0 |</span><br><span class="line">|       27 | 联通100元充值卡              |     15 |        0 | ECS000027 |            2 |      95.00 |           0 |</span><br><span class="line">|       28 | 联通50元充值卡               |     15 |        0 | ECS000028 |            0 |      45.00 |           0 |</span><br><span class="line">|       29 | 移动100元充值卡              |     14 |        0 | ECS000029 |            0 |      90.00 |           0 |</span><br><span class="line">|       30 | 移动20元充值卡               |     14 |        0 | ECS000030 |            9 |      18.00 |           1 |</span><br><span class="line">|       31 | 摩托罗拉E8                   |      3 |        2 | ECS000031 |            1 |    1337.00 |           5 |</span><br><span class="line">|       32 | 诺基亚N85                    |      3 |        1 | ECS000032 |            1 |    3010.00 |           9 |</span><br><span class="line">+----------+------------------------------+--------+----------+-----------+--------------+------------+-------------+</span><br></pre></td></tr></table></figure><h2 id="三、查询知识"><a href="#三、查询知识" class="headerlink" title="三、查询知识"></a>三、查询知识</h2><blockquote><p>注:以下查询基于<code>ecshop</code>网站的商品表(<code>ecs_goods</code>)</p></blockquote><blockquote><p>在练习时可以只取部分列,方便查看.</p></blockquote><h3 id="3-1-基础查询-where的练习"><a href="#3-1-基础查询-where的练习" class="headerlink" title="3.1 基础查询 where的练习"></a>3.1 基础查询 where的练习</h3><blockquote><p>查出满足以下条件的商品</p></blockquote><h4 id="3-1-1-主键为32的商品"><a href="#3-1-1-主键为32的商品" class="headerlink" title="3.1.1 主键为32的商品"></a>3.1.1 主键为32的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,shop_price </span><br><span class="line">     from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> goods_id=32;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-不属第3栏目的所有商品"><a href="#3-1-2-不属第3栏目的所有商品" class="headerlink" title="3.1.2 不属第3栏目的所有商品"></a>3.1.2 不属第3栏目的所有商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> cat_id!=3;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-本店价格高于3000元的商品"><a href="#3-1-3-本店价格高于3000元的商品" class="headerlink" title="3.1.3 本店价格高于3000元的商品"></a>3.1.3 本店价格高于3000元的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> shop_price &gt;3000;</span><br></pre></td></tr></table></figure><h4 id="3-1-4-本店价格低于或等于100元的商品"><a href="#3-1-4-本店价格低于或等于100元的商品" class="headerlink" title="3.1.4 本店价格低于或等于100元的商品"></a>3.1.4 本店价格低于或等于100元的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods <span class="built_in">where</span> shop_price &lt;=100;</span><br></pre></td></tr></table></figure><h4 id="3-1-5-取出第4栏目或第11栏目的商品-不许用or"><a href="#3-1-5-取出第4栏目或第11栏目的商品-不许用or" class="headerlink" title="3.1.5 取出第4栏目或第11栏目的商品(不许用or)"></a>3.1.5 取出第4栏目或第11栏目的商品(不许用or)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> cat_id <span class="keyword">in</span> (4,11);</span><br></pre></td></tr></table></figure><h4 id="3-1-6-取出100-lt-价格-lt-500的商品-不许用and"><a href="#3-1-6-取出100-lt-价格-lt-500的商品-不许用and" class="headerlink" title="3.1.6 取出100&lt;=价格&lt;=500的商品(不许用and)"></a>3.1.6 取出100&lt;=价格&lt;=500的商品(不许用and)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> shop_price between 100 and 500;</span><br></pre></td></tr></table></figure><h4 id="3-1-7-取出不属于第3栏目且不属于第11栏目的商品-and-或not-in分别实现"><a href="#3-1-7-取出不属于第3栏目且不属于第11栏目的商品-and-或not-in分别实现" class="headerlink" title="3.1.7 取出不属于第3栏目且不属于第11栏目的商品(and,或not in分别实现)"></a>3.1.7 取出不属于第3栏目且不属于第11栏目的商品(and,或not in分别实现)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goods <span class="built_in">where</span> cat_id!=3 and cat_id!=11;</span><br><span class="line"></span><br><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goods <span class="built_in">where</span> cat_id not <span class="keyword">in</span> (3,11);</span><br></pre></td></tr></table></figure><h4 id="3-1-8-取出价格大于100且小于300-或者大于4000且小于5000的商品"><a href="#3-1-8-取出价格大于100且小于300-或者大于4000且小于5000的商品" class="headerlink" title="3.1.8 取出价格大于100且小于300,或者大于4000且小于5000的商品"></a>3.1.8 取出价格大于100且小于300,或者大于4000且小于5000的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goods <span class="built_in">where</span> shop_price&gt;100 and shop_price &lt;300 or shop_price &gt;4000 and shop_price &lt;5000;</span><br></pre></td></tr></table></figure><h4 id="3-1-9-取出第3个栏目下面价格-lt-1000或-gt-3000-并且点击量-gt-5的系列商品"><a href="#3-1-9-取出第3个栏目下面价格-lt-1000或-gt-3000-并且点击量-gt-5的系列商品" class="headerlink" title="3.1.9 取出第3个栏目下面价格&lt;1000或&gt;3000,并且点击量&gt;5的系列商品"></a>3.1.9 取出第3个栏目下面价格&lt;1000或&gt;3000,并且点击量&gt;5的系列商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price,click_count from ecs_goods <span class="built_in">where</span></span><br><span class="line">cat_id=3 and (shop_price &lt;1000 or shop_price&gt;3000) and click_count&gt;5;</span><br></pre></td></tr></table></figure><h4 id="3-1-10-取出第1个栏目下面的商品-注意-1栏目下面没商品-但其子栏目下有"><a href="#3-1-10-取出第1个栏目下面的商品-注意-1栏目下面没商品-但其子栏目下有" class="headerlink" title="3.1.10 取出第1个栏目下面的商品(注意:1栏目下面没商品,但其子栏目下有)"></a>3.1.10 取出第1个栏目下面的商品(注意:1栏目下面没商品,但其子栏目下有)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price,click_count from ecs_goods</span><br><span class="line">     <span class="built_in">where</span> cat_id <span class="keyword">in</span> (2,3,4,5);</span><br></pre></td></tr></table></figure><h4 id="3-1-11-取出名字以”诺基亚”开头的商品"><a href="#3-1-11-取出名字以”诺基亚”开头的商品" class="headerlink" title="3.1.11 取出名字以”诺基亚”开头的商品"></a>3.1.11 取出名字以”诺基亚”开头的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods     <span class="built_in">where</span> goods_name like <span class="string">'诺基亚%'</span>;</span><br></pre></td></tr></table></figure><h4 id="3-1-12-取出名字为”诺基亚Nxx”的手机"><a href="#3-1-12-取出名字为”诺基亚Nxx”的手机" class="headerlink" title="3.1.12 取出名字为”诺基亚Nxx”的手机"></a>3.1.12 取出名字为”诺基亚Nxx”的手机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods  </span><br><span class="line">   <span class="built_in">where</span> goods_name like <span class="string">'诺基亚N__'</span>;</span><br></pre></td></tr></table></figure><h4 id="3-1-13-取出名字不以”诺基亚”开头的商品"><a href="#3-1-13-取出名字不以”诺基亚”开头的商品" class="headerlink" title="3.1.13 取出名字不以”诺基亚”开头的商品"></a>3.1.13 取出名字不以”诺基亚”开头的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goos</span><br><span class="line">     <span class="built_in">where</span> goods_name not like <span class="string">'诺基亚%'</span>;</span><br></pre></td></tr></table></figure><h4 id="3-1-14-取出第3个栏目下面价格在1000到3000之间-并且点击量-gt-5-“诺基亚”开头的系列商品"><a href="#3-1-14-取出第3个栏目下面价格在1000到3000之间-并且点击量-gt-5-“诺基亚”开头的系列商品" class="headerlink" title="3.1.14 取出第3个栏目下面价格在1000到3000之间,并且点击量&gt;5 “诺基亚”开头的系列商品"></a>3.1.14 取出第3个栏目下面价格在1000到3000之间,并且点击量&gt;5 “诺基亚”开头的系列商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goods <span class="built_in">where</span> </span><br><span class="line">cat_id=3 and shop_price&gt;1000 and shop_price &lt;3000 and click_count&gt;5 and goods_name like <span class="string">'诺基亚%'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price  from ecs_goods <span class="built_in">where</span> </span><br><span class="line">shop_price between 1000 and 3000 and cat_id=3  and click_count&gt;5 and goods_name like <span class="string">'诺基亚%'</span>;</span><br></pre></td></tr></table></figure><h4 id="3-1-15-一道面试题"><a href="#3-1-15-一道面试题" class="headerlink" title="3.1.15 一道面试题"></a>3.1.15 一道面试题</h4><blockquote><p>有如下表和数组</p></blockquote><ul><li>把<code>num</code>值处于<code>[20,29]</code>之间,改为<code>20</code></li><li><code>num</code>值处于<code>[30,39]</code>之间的,改为<code>30</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">|    3 |</span><br><span class="line">|   12 |</span><br><span class="line">|   15 |</span><br><span class="line">|   25 |</span><br><span class="line">|   23 |</span><br><span class="line">|   29 |</span><br><span class="line">|   34 |</span><br><span class="line">|   37 |</span><br><span class="line">|   32 |</span><br><span class="line">|   45 |</span><br><span class="line">|   48 |</span><br><span class="line">|   52 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h4 id="3-1-16-练习题"><a href="#3-1-16-练习题" class="headerlink" title="3.1.16 练习题:"></a>3.1.16 练习题:</h4><blockquote><p>把<code>good</code>表中商品名为’诺基亚xxxx’的商品,改为’HTCxxxx’,</p></blockquote><ul><li>提示:大胆的把列看成变量,参与运算,甚至调用函数来处理 。<code>ubstring()</code>, <code>concat()</code></li></ul><h3 id="3-2-分组查询group"><a href="#3-2-分组查询group" class="headerlink" title="3.2    分组查询group"></a>3.2    分组查询group</h3><h4 id="3-2-1-查出最贵的商品的价格"><a href="#3-2-1-查出最贵的商品的价格" class="headerlink" title="3.2.1 查出最贵的商品的价格"></a>3.2.1 查出最贵的商品的价格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(shop_price) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-查出最大-最新-的商品编号"><a href="#3-2-2-查出最大-最新-的商品编号" class="headerlink" title="3.2.2 查出最大(最新)的商品编号"></a>3.2.2 查出最大(最新)的商品编号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(goods_id) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-查出最便宜的商品的价格"><a href="#3-2-3-查出最便宜的商品的价格" class="headerlink" title="3.2.3 查出最便宜的商品的价格"></a>3.2.3 查出最便宜的商品的价格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(shop_price) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-查出最旧-最小-的商品编号"><a href="#3-2-4-查出最旧-最小-的商品编号" class="headerlink" title="3.2.4 查出最旧(最小)的商品编号"></a>3.2.4 查出最旧(最小)的商品编号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(goods_id) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-查询该店所有商品的库存总量"><a href="#3-2-5-查询该店所有商品的库存总量" class="headerlink" title="3.2.5 查询该店所有商品的库存总量"></a>3.2.5 查询该店所有商品的库存总量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(goods_number) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-6-查询所有商品的平均价"><a href="#3-2-6-查询所有商品的平均价" class="headerlink" title="3.2.6 查询所有商品的平均价"></a>3.2.6 查询所有商品的平均价</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(shop_price) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-7-查询该店一共有多少种商品"><a href="#3-2-7-查询该店一共有多少种商品" class="headerlink" title="3.2.7 查询该店一共有多少种商品"></a>3.2.7 查询该店一共有多少种商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-2-8-查询每个栏目下面"><a href="#3-2-8-查询每个栏目下面" class="headerlink" title="3.2.8 查询每个栏目下面"></a>3.2.8 查询每个栏目下面</h4><ul><li>最贵商品价格</li><li>最低商品价格</li><li>商品平均价格</li><li>商品库存量</li><li>商品种类</li></ul><blockquote><p>提示:(<code>5</code>个聚合函数,<code>sum</code>, <code>avg</code>, <code>max</code>, <code>min</code>, <code>count</code>与<code>group</code>综合运用)<br><code>select cat_id,max(shop_price) from ecs_goods  group by cat_id;</code></p></blockquote><h3 id="3-3-having与group综合运用查询"><a href="#3-3-having与group综合运用查询" class="headerlink" title="3.3 having与group综合运用查询"></a>3.3 having与group综合运用查询</h3><h4 id="3-3-1-查询该店的商品比市场价所节省的价格"><a href="#3-3-1-查询该店的商品比市场价所节省的价格" class="headerlink" title="3.3.1 查询该店的商品比市场价所节省的价格"></a>3.3.1 查询该店的商品比市场价所节省的价格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,market_price-shop_price as j </span><br><span class="line">     from ecs_goods ;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-查询每个商品所积压的货款-提示-库存-单价"><a href="#3-3-2-查询每个商品所积压的货款-提示-库存-单价" class="headerlink" title="3.3.2 查询每个商品所积压的货款(提示:库存*单价)"></a>3.3.2 查询每个商品所积压的货款(提示:库存*单价)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,goods_number*shop_price  from ecs_goods</span><br></pre></td></tr></table></figure><h4 id="3-3-3-查询该店积压的总货款"><a href="#3-3-3-查询该店积压的总货款" class="headerlink" title="3.3.3 查询该店积压的总货款"></a>3.3.3 查询该店积压的总货款</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(goods_number*shop_price) from ecs_goods;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-查询该店每个栏目下面积压的货款"><a href="#3-3-4-查询该店每个栏目下面积压的货款" class="headerlink" title="3.3.4 查询该店每个栏目下面积压的货款."></a>3.3.4 查询该店每个栏目下面积压的货款.</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select cat_id,sum(goods_number*shop_price) as k from ecs_goods group by cat_id;</span><br></pre></td></tr></table></figure><h4 id="3-3-5-查询比市场价省钱200元以上的商品及该商品所省的钱-where和having分别实现"><a href="#3-3-5-查询比市场价省钱200元以上的商品及该商品所省的钱-where和having分别实现" class="headerlink" title="3.3.5 查询比市场价省钱200元以上的商品及该商品所省的钱(where和having分别实现)"></a>3.3.5 查询比市场价省钱200元以上的商品及该商品所省的钱(where和having分别实现)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,market_price-shop_price  as k from ecs_goods</span><br><span class="line"><span class="built_in">where</span> market_price-shop_price &gt;200;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,market_price-shop_price  as k from ecs_goods</span><br><span class="line">having k &gt;200;</span><br></pre></td></tr></table></figure><h4 id="3-3-6-查询积压货款超过2W元的栏目-以及该栏目积压的货款"><a href="#3-3-6-查询积压货款超过2W元的栏目-以及该栏目积压的货款" class="headerlink" title="3.3.6 查询积压货款超过2W元的栏目,以及该栏目积压的货款"></a>3.3.6 查询积压货款超过2W元的栏目,以及该栏目积压的货款</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select cat_id,sum(goods_number*shop_price) as k from ecs_goods group by cat_id</span><br><span class="line">having k&gt;20000</span><br></pre></td></tr></table></figure><h4 id="3-3-7-where-having-group综合练习题"><a href="#3-3-7-where-having-group综合练习题" class="headerlink" title="3. 3.7 where-having-group综合练习题"></a>3. 3.7 where-having-group综合练习题</h4><blockquote><p>有如下表及数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+---------+-------+</span><br><span class="line">| name | subject | score |</span><br><span class="line">+------+---------+-------+</span><br><span class="line">| 张三 | 数学    |    90 |</span><br><span class="line">| 张三 | 语文    |    50 |</span><br><span class="line">| 张三 | 地理    |    40 |</span><br><span class="line">| 李四 | 语文    |    55 |</span><br><span class="line">| 李四 | 政治    |    45 |</span><br><span class="line">| 王五 | 政治    |    30 |</span><br><span class="line">+------+---------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>要求:查询出2门及2门以上不及格者的平均成绩</p></blockquote><p>先查看每个人的平均成绩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,avg(score) from stu group by name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+</span><br><span class="line">| name | avg(score) |</span><br><span class="line">+------+------------+</span><br><span class="line">| 张三 |    60.0000 |</span><br><span class="line">| 李四 |    50.0000 |</span><br><span class="line">| 王五 |    30.0000 |</span><br><span class="line">| 赵六 |    99.0000 |</span><br><span class="line">+------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>看每个人挂科情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,score &lt; 60 from stu;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+</span><br><span class="line">| name | score &lt; 60 |</span><br><span class="line">+------+------------+</span><br><span class="line">| 张三 |          0 |</span><br><span class="line">| 张三 |          1 |</span><br><span class="line">| 张三 |          1 |</span><br><span class="line">| 李四 |          1 |</span><br><span class="line">| 李四 |          1 |</span><br><span class="line">| 王五 |          1 |</span><br><span class="line">| 赵六 |          0 |</span><br><span class="line">| 赵六 |          0 |</span><br><span class="line">| 赵六 |          0 |</span><br><span class="line">+------+------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>计算每个人的挂科科目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,sum(score &lt; 60) from stu group by name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+-----------------+</span><br><span class="line">| name | sum(score &lt; 60) |</span><br><span class="line">+------+-----------------+</span><br><span class="line">| 张三 |               2 |</span><br><span class="line">| 李四 |               2 |</span><br><span class="line">| 王五 |               1 |</span><br><span class="line">| 赵六 |               0 |</span><br><span class="line">+------+-----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>同时计算每人的平均分</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,sum(score &lt; 60),avg(score) as pj from stu group by name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+-----------------+---------+</span><br><span class="line">| name | sum(score &lt; 60) | pj      |</span><br><span class="line">+------+-----------------+---------+</span><br><span class="line">| 张三 |               2 | 60.0000 |</span><br><span class="line">| 李四 |               2 | 50.0000 |</span><br><span class="line">| 王五 |               1 | 30.0000 |</span><br><span class="line">| 赵六 |               0 | 99.0000 |</span><br><span class="line">+------+-----------------+---------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>利用<code>having</code>筛选挂科<code>2</code>门以上的.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,sum(score &lt; 60) as gk ,avg(score) as pj from stu group by name having gk &gt;=2;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+------+---------+</span><br><span class="line">| name | gk   | pj      |</span><br><span class="line">+------+------+---------+</span><br><span class="line">| 张三 |    2 | 60.0000 |</span><br><span class="line">| 李四 |    2 | 50.0000 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-4、order-by-与-limit查询"><a href="#3-4、order-by-与-limit查询" class="headerlink" title="3.4、order by 与 limit查询"></a>3.4、order by 与 limit查询</h3><h4 id="3-4-1-按价格由高到低排序"><a href="#3-4-1-按价格由高到低排序" class="headerlink" title="3.4.1 按价格由高到低排序"></a>3.4.1 按价格由高到低排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,shop_price from ecs_goods order by shop_price desc;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-按发布时间由早到晚排序"><a href="#3-4-2-按发布时间由早到晚排序" class="headerlink" title="3.4.2 按发布时间由早到晚排序"></a>3.4.2 按发布时间由早到晚排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,add_time from ecs_goods order by add_time;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-接栏目由低到高排序-栏目内部按价格由高到低排序"><a href="#3-4-3-接栏目由低到高排序-栏目内部按价格由高到低排序" class="headerlink" title="3.4.3 接栏目由低到高排序,栏目内部按价格由高到低排序"></a>3.4.3 接栏目由低到高排序,栏目内部按价格由高到低排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,cat_id,goods_name,shop_price from ecs_goods</span><br><span class="line">     order by cat_id ,shop_price desc;</span><br></pre></td></tr></table></figure><h4 id="3-4-4-取出价格最高的前三名商品"><a href="#3-4-4-取出价格最高的前三名商品" class="headerlink" title="3.4.4 取出价格最高的前三名商品"></a>3.4.4 取出价格最高的前三名商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,shop_price from ecs_goods order by shop_price desc <span class="built_in">limit</span> 3;</span><br></pre></td></tr></table></figure><h4 id="3-4-5-取出点击量前三名到前5名的商品"><a href="#3-4-5-取出点击量前三名到前5名的商品" class="headerlink" title="3.4.5 取出点击量前三名到前5名的商品"></a>3.4.5 取出点击量前三名到前5名的商品</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,click_count from ecs_goods order by click_count desc <span class="built_in">limit</span> 2,3;</span><br></pre></td></tr></table></figure><h3 id="3-5-连接查询"><a href="#3-5-连接查询" class="headerlink" title="3.5    连接查询"></a>3.5    连接查询</h3><h4 id="3-5-1-取出所有商品的商品名-栏目名-价格"><a href="#3-5-1-取出所有商品的商品名-栏目名-价格" class="headerlink" title="3.5.1 取出所有商品的商品名,栏目名,价格"></a>3.5.1 取出所有商品的商品名,栏目名,价格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select goods_name,cat_name,shop_price from </span><br><span class="line">ecs_goods left join ecs_category</span><br><span class="line">on ecs_goods.cat_id=ecs_category.cat_id;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-取出第4个栏目下的商品的商品名-栏目名-价格"><a href="#3-5-2-取出第4个栏目下的商品的商品名-栏目名-价格" class="headerlink" title="3.5.2 取出第4个栏目下的商品的商品名,栏目名,价格"></a>3.5.2 取出第4个栏目下的商品的商品名,栏目名,价格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select goods_name,cat_name,shop_price from </span><br><span class="line">ecs_goods left join ecs_category</span><br><span class="line">on ecs_goods.cat_id=ecs_category.cat_id</span><br><span class="line"><span class="built_in">where</span> ecs_goods.cat_id = 4;</span><br></pre></td></tr></table></figure><h4 id="3-5-3-取出第4个栏目下的商品的商品名-栏目名-与品牌名"><a href="#3-5-3-取出第4个栏目下的商品的商品名-栏目名-与品牌名" class="headerlink" title="3.5.3 取出第4个栏目下的商品的商品名,栏目名,与品牌名"></a>3.5.3 取出第4个栏目下的商品的商品名,栏目名,与品牌名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select goods_name,cat_name,brand_name from </span><br><span class="line">ecs_goods left join ecs_category</span><br><span class="line">on ecs_goods.cat_id=ecs_category.cat_id</span><br><span class="line">left join ecs_brand </span><br><span class="line">on ecs_goods.brand_id=ecs_brand.brand_id</span><br><span class="line"><span class="built_in">where</span> ecs_goods.cat_id = 4;</span><br></pre></td></tr></table></figure><h4 id="3-5-4-面试题"><a href="#3-5-4-面试题" class="headerlink" title="3.5.4 面试题"></a>3.5.4 面试题</h4><blockquote><p>根据给出的表结构按要求写出<code>SQL</code>语句。</p></blockquote><p><strong>Match 赛程表</strong></p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td><code>matchID</code></td><td><code>int</code></td><td>主键</td></tr><tr><td><code>hostTeamID</code></td><td><code>int</code></td><td>主队的<code>ID</code></td></tr><tr><td><code>guestTeamID</code></td><td><code>int</code></td><td>客队的<code>ID</code></td></tr><tr><td><code>matchResult</code></td><td><code>varchar(20)</code></td><td>比赛结果，如（<code>2:0</code>）</td></tr><tr><td><code>matchTime</code></td><td><code>date</code></td><td>比赛开始时间</td></tr></tbody></table><p><strong>Team 参赛队伍表</strong></p><table><thead><tr><th>字段名称</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td><code>teamID</code></td><td><code>int</code></td><td>主键</td></tr><tr><td><code>teamName</code></td><td><code>varchar(20)</code></td><td>队伍名称</td></tr></tbody></table><ul><li><code>Match</code>的<code>hostTeamID</code>与<code>guestTeamID</code>都与<code>Team</code>中的<code>teamID</code>关联</li><li>查出 <code>2006-6-1</code> 到<code>2006-7-1</code>之间举行的所有比赛，并且用以下形式列出：</li><li>拜仁  <code>2：0</code> 不来梅 <code>2006-6-21</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from m;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----+------+------+------+------------+</span><br><span class="line">| mid | hid  | gid  | mres | matime     |</span><br><span class="line">+-----+------+------+------+------------+</span><br><span class="line">|   1 |    1 |    2 | 2:0  | 2006-05-21 |</span><br><span class="line">|   2 |    2 |    3 | 1:2  | 2006-06-21 |</span><br><span class="line">|   3 |    3 |    1 | 2:5  | 2006-06-25 |</span><br><span class="line">|   4 |    2 |    1 | 3:2  | 2006-07-21 |</span><br><span class="line">+-----+------+------+------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+</span><br><span class="line">| tid  | tname    |</span><br><span class="line">+------+----------+</span><br><span class="line">|    1 | 国安     |</span><br><span class="line">|    2 | 申花     |</span><br><span class="line">|    3 | 公益联队 |</span><br><span class="line">+------+----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select hid,t1.tname as hname ,mres,gid,t2.tname as gname,matime</span><br><span class="line">    -&gt; from </span><br><span class="line">    -&gt; m left join t as t1</span><br><span class="line">    -&gt; on m.hid = t1.tid</span><br><span class="line">    -&gt; left join t as t2</span><br><span class="line">    -&gt; on m.gid = t2.tid;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+------+------+----------+------------+</span><br><span class="line">| hid  | hname    | mres | gid  | gname    | matime     |</span><br><span class="line">+------+----------+------+------+----------+------------+</span><br><span class="line">|    1 | 国安     | 2:0  |    2 | 申花     | 2006-05-21 |</span><br><span class="line">|    2 | 申花     | 1:2  |    3 | 公益联队 | 2006-06-21 |</span><br><span class="line">|    3 | 公益联队 | 2:5  |    1 | 国安     | 2006-06-25 |</span><br><span class="line">|    2 | 申花     | 3:2  |    1 | 国安     | 2006-07-21 |</span><br><span class="line">+------+----------+------+------+----------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-6、union查询"><a href="#3-6、union查询" class="headerlink" title="3.6、union查询"></a>3.6、union查询</h3><ul><li>把<code>ecs_comment</code>,<code>ecs_feedback</code>两个表中的数据,各取出<code>4</code>列,并把结果集<code>union</code>成一个结果集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A表:</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">| a    |    5 |</span><br><span class="line">| b    |   10 |</span><br><span class="line">| c    |   15 |</span><br><span class="line">| d    |   10 |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B表:</span><br><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">| b    |    5 |</span><br><span class="line">| c    |   15 |</span><br><span class="line">| d    |   20 |</span><br><span class="line">| e    |   99 |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><p>要求查询出以下效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+</span><br><span class="line">| id   |    num   |</span><br><span class="line">+------+----------+</span><br><span class="line">| a    |        5 |</span><br><span class="line">| b    |       15 |</span><br><span class="line">| c    |       30 |</span><br><span class="line">| d    |       30 |</span><br><span class="line">| e    |       99 |</span><br><span class="line">+------+----------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table a (</span><br><span class="line">id char(1),</span><br><span class="line">num int</span><br><span class="line">) engine myisam charset utf8;</span><br><span class="line"></span><br><span class="line">insert into a values (<span class="string">'a'</span>,5),(<span class="string">'b'</span>,10),(<span class="string">'c'</span>,15),(<span class="string">'d'</span>,10);</span><br><span class="line"></span><br><span class="line">create table b (</span><br><span class="line">id char(1),</span><br><span class="line">num int</span><br><span class="line">) engine myisam charset utf8;</span><br><span class="line"></span><br><span class="line">insert into b values (<span class="string">'b'</span>,5),(<span class="string">'c'</span>,15),(<span class="string">'d'</span>,20),(<span class="string">'e'</span>,99);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="comment"># 合并 ,注意all的作用</span></span><br><span class="line">mysql&gt; select * from ta </span><br><span class="line">    -&gt; union all</span><br><span class="line">    -&gt; select * from tb;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+------+------+</span><br><span class="line">| id   | num  |</span><br><span class="line">+------+------+</span><br><span class="line">| a    |    5 |</span><br><span class="line">| b    |   10 |</span><br><span class="line">| c    |   15 |</span><br><span class="line">| d    |   10 |</span><br><span class="line">| b    |    5 |</span><br><span class="line">| c    |   15 |</span><br><span class="line">| d    |   20 |</span><br><span class="line">| e    |   99 |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><p><strong>参考答案:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="comment"># sum,group求和</span></span><br><span class="line">mysql&gt; select id,sum(num) from (select * from ta union all select * from tb) as tmp group by id;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+</span><br><span class="line">| id   | sum(num) |</span><br><span class="line">+------+----------+</span><br><span class="line">| a    |        5 |</span><br><span class="line">| b    |       15 |</span><br><span class="line">| c    |       30 |</span><br><span class="line">| d    |       30 |</span><br><span class="line">| e    |       99 |</span><br><span class="line">+------+----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-7、子查询"><a href="#3-7、子查询" class="headerlink" title="3.7、子查询:"></a>3.7、子查询:</h3><p><strong>查询出最新一行商品(以商品编号最大为最新,用子查询实现)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name from </span><br><span class="line">     ecs_goods <span class="built_in">where</span> goods_id =(select max(goods_id) from ecs_goods);</span><br></pre></td></tr></table></figure><ul><li>查询出编号为<code>19</code>的商品的栏目名称(用左连接查询和子查询分别)</li><li>用<code>where</code>型子查询把<code>ecs_goods</code>表中的每个栏目下面最新的商品取出来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,cat_id from ecs_goods <span class="built_in">where</span> goods_id <span class="keyword">in</span> (select max(goods_id) from ecs_goods group by cat_id);</span><br></pre></td></tr></table></figure><p><strong>用from型子查询把ecs_goods表中的每个栏目下面最新的商品取出来</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select goods_id,cat_id,goods_name from ecs_goods order by goods_id desc) as t group by cat_id;</span><br></pre></td></tr></table></figure><p><strong>用exists型子查询,查出所有有商品的栏目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from category</span><br><span class="line"><span class="built_in">where</span> exists (select * from goods <span class="built_in">where</span> goods.cat_id=category.cat_id);</span><br></pre></td></tr></table></figure><p><strong>创建触发器:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE  trigger tg2</span><br><span class="line">after insert on ord</span><br><span class="line"><span class="keyword">for</span> each row</span><br><span class="line">update goods <span class="built_in">set</span> goods_number=goods_number-new.num <span class="built_in">where</span> id=new.gid</span><br><span class="line"></span><br><span class="line">CREATE trigger tg3</span><br><span class="line">after delete on ord</span><br><span class="line"><span class="keyword">for</span> each row</span><br><span class="line">update goods <span class="built_in">set</span> goods_number=good_number+old.num <span class="built_in">where</span> id=old.gid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE  trigger tg4</span><br><span class="line">after update on ord</span><br><span class="line"><span class="keyword">for</span> each row</span><br><span class="line">update goods <span class="built_in">set</span> goods_number=goods_number+old.num-new.num <span class="built_in">where</span> id=old.gid</span><br></pre></td></tr></table></figure><h2 id="四、常用表管理语句"><a href="#四、常用表管理语句" class="headerlink" title="四、常用表管理语句"></a>四、常用表管理语句</h2><ul><li>设置字符编码 <code>set names gbk;</code></li><li>查看所有数据库：<code>show databases;</code></li><li>查看所有表：<code>show tables</code></li><li>查看表结构：<code>desc 表名/视图名</code></li><li>选择表 <code>use 表名;</code></li><li>查看建表过程：<code>show  create table  表名</code></li><li>查看建视图过程：<code>show create view 视图</code></li><li>查看所有详细表信息：<code>show table status\G(让结果显示好看一些)</code></li><li>查看某张表详细信息：<code>show table status where name=&#39;goods（表名）&#39;\G</code></li><li>删除表：<code>drop table 表名</code></li><li>删除视图：<code>drop view 视图名；</code></li><li>删除列：<code>alter table drop column 指定列</code></li><li>改表名：<code>rename table oldName to newName</code></li><li>更新表：<code>update 表名 set 字段</code></li><li>插入数据：<code>insert into 表名 value()</code></li><li>清空数据：<code>truncate 表名;(相当于删除表在重建)</code></li><li>写错语句退出:<code>\c</code></li><li>让结果显示好看一些:<code>\G</code></li></ul><h2 id="五、查询总结"><a href="#五、查询总结" class="headerlink" title="五、查询总结"></a>五、查询总结</h2><h3 id="5-1-insert"><a href="#5-1-insert" class="headerlink" title="5.1 insert"></a>5.1 insert</h3><ul><li><code>insert into 表名</code> 插入列与值要严格对应</li><li>数字不必加单引号 字符串必须加单引号</li><li>例子：<code>insert into test(age,name)values(10,&#39;小明&#39;);</code></li></ul><h3 id="5-2-update操作"><a href="#5-2-update操作" class="headerlink" title="5.2 update操作"></a>5.2 update操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子：</span></span><br><span class="line">update user set age=<span class="number">8</span> where name=lianying;</span><br><span class="line"><span class="comment">//（注意where条件不加会影响所有行，需要小心）</span></span><br></pre></td></tr></table></figure><h3 id="5-3-delete操作"><a href="#5-3-delete操作" class="headerlink" title="5.3 delete操作"></a>5.3 delete操作</h3><ul><li>不可能针对某一列删除 要删必须一行</li><li><code>delete from 表名 where 添加</code></li><li><code>delete from user where uid=1;</code>（必须加上添加，否则全部数据删除）</li></ul><h3 id="5-4-select查找"><a href="#5-4-select查找" class="headerlink" title="5.4 select查找"></a>5.4 select查找</h3><ul><li><code>select * from 表名</code>（全部查出）</li><li><code>select uid,name from user where uid&gt;10;</code></li><li><code>select * from user where uid=11;</code></li></ul><h3 id="5-5-select查询模型（重要）"><a href="#5-5-select查询模型（重要）" class="headerlink" title="5.5 select查询模型（重要）"></a>5.5 select查询模型（重要）</h3><ul><li><code>select * from 表名 where 1</code>（<code>where</code>是一个表达式 为真则取出来 为假不取）</li><li>把列看成变量，既然是变量就能参与运。这个过程称为广义投影（比如：取出两列参与运算）也可以带到函数里面计算</li></ul><blockquote><p>注意：<code>NULL</code>：查询方法： <code>select * from test where name is （not）null</code></p></blockquote><h3 id="5-6-limit用法（做分页类能用到）"><a href="#5-6-limit用法（做分页类能用到）" class="headerlink" title="5.6 limit用法（做分页类能用到）"></a>5.6 limit用法（做分页类能用到）</h3><blockquote><p>限制取出条目（limit有两个参数 ：偏移量 取出的条目）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select goods_id,goods_name,shop_price</span><br><span class="line">-&gt; from goods</span><br><span class="line">-&gt; order by shop_price desc</span><br><span class="line">-&gt; <span class="built_in">limit</span>  0,3;</span><br></pre></td></tr></table></figure><h3 id="5-7-子句的查询陷阱"><a href="#5-7-子句的查询陷阱" class="headerlink" title="5.7 子句的查询陷阱"></a>5.7 子句的查询陷阱</h3><blockquote><p><code>5</code>种语句有严格的顺序，<code>where</code> ，<code>group by</code>,<code>having</code>,<code>order by</code>,<code>limit</code><br>不能颠倒顺序</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子:语句有严格的顺序</span></span><br><span class="line">mysql&gt; select id,sum(num) </span><br><span class="line">-&gt; from</span><br><span class="line">-&gt; (select * from a union select * from b) as temp</span><br><span class="line">-&gt; group by id</span><br><span class="line">-&gt; having sum(num)&gt;10</span><br><span class="line">-&gt; order by sum(num) desc</span><br><span class="line">-&gt; <span class="built_in">limit</span> 0,1;</span><br></pre></td></tr></table></figure><h3 id="5-8-子查询"><a href="#5-8-子查询" class="headerlink" title="5.8 子查询"></a>5.8 子查询</h3><p><strong>where字查询：（内层的查询结果作为外层的比较条件）</strong></p><ul><li>静态的：select goods_id,goods_name from goods where goods_id=32;</li><li>动态的：select goods_id,goods_name from goods where goods_id=(select max(goods_id) from goods);</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取出每个栏目下最新的商品：</span></span><br><span class="line">select goods_id,cat_id,goods_name from goods <span class="built_in">where</span> goods_id <span class="keyword">in</span> (select max(goods_id) from goods group by cat_id);</span><br></pre></td></tr></table></figure><h3 id="5-9-from子查询"><a href="#5-9-from子查询" class="headerlink" title="5.9 from子查询"></a>5.9 from子查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每个栏目下最新的商品：</span></span><br><span class="line">mysql&gt; select goods_id,goods_name from (select * from goods <span class="built_in">where</span> 1 order by cat_id desc) as tmp</span><br><span class="line">-&gt; group by cat_id;</span><br></pre></td></tr></table></figure><h3 id="5-10-exists子查询："><a href="#5-10-exists子查询：" class="headerlink" title="5.10 exists子查询："></a>5.10 exists子查询：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询栏目下是否有商品</span></span><br><span class="line">mysql&gt; select * from category</span><br><span class="line">-&gt; <span class="built_in">where</span> exists(select * from goods <span class="built_in">where</span> goods.cat_id=category.cat_id)</span><br></pre></td></tr></table></figure><h3 id="5-11-内连接查询（重要）"><a href="#5-11-内连接查询（重要）" class="headerlink" title="5.11 内连接查询（重要）"></a>5.11 内连接查询（重要）</h3><blockquote><p>内连接是左右连接结果的交集</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select xxx from</span><br><span class="line">table1 inner jion table2 on table1.xx=table2.xx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select boy.hid,boy.bname,girl.hid,girl.gname</span><br><span class="line">-&gt; from</span><br><span class="line">-&gt; boy inner join girl on boy.hid=girl.hid;</span><br></pre></td></tr></table></figure><h3 id="5-12-左连接特点"><a href="#5-12-左连接特点" class="headerlink" title="5.12 左连接特点"></a>5.12 左连接特点</h3><blockquote><p>以左表的数据为标准，去找右表的数据，查不到的为<code>NULL</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#左连接</span></span><br><span class="line">mysql&gt; select boy.hid,boy.bname,girl.hid,girl.gname</span><br><span class="line">-&gt; from</span><br><span class="line">-&gt; boy left join girl on boy.hid=girl.hid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#右连接</span></span><br><span class="line">mysql&gt; select boy.hid,boy.bname,girl.hid,girl.gname</span><br><span class="line">-&gt; from</span><br><span class="line">-&gt; boy right join girl on boy.hid=girl.hid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select goods_id,cat_name,goods_name,shop_price</span><br><span class="line">-&gt; from</span><br><span class="line">-&gt; goods left join category on goods.cat_id= category.cat_id</span><br><span class="line">-&gt; <span class="built_in">where</span> goods.cat_id=4;</span><br></pre></td></tr></table></figure><h3 id="5-13-union查询"><a href="#5-13-union查询" class="headerlink" title="5.13 union查询"></a>5.13 union查询</h3><blockquote><p>把<code>2</code>条或多条的额查询结果，合并成<code>1</code>个结果集</p></blockquote><ul><li><code>sql1 N行</code></li><li><code>sql2 M行</code></li><li><code>sql1 union sql2，N+M行</code></li></ul><blockquote><ul><li><code>union</code>语句必须满足一个条件：各语句取出的列数要相同</li><li><code>union</code>语句中不用写<code>order by</code> 因为<code>sql</code>合并后得到总的结果集可以<code>order by</code>字句<code>order by</code>失去意义</li><li>场景：<code>2</code>条语句，各自的<code>where</code>非常复杂，可以简化成简单的条件在<code>union</code></li><li>注意：使用<code>union</code>时，完全相等的行将会被合并。合并是比较耗时的操作，一般不让<code>union</code>合并，使用<code>union all</code>可以避免合并 对速度有提升</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from a</span><br><span class="line">-&gt; union all <span class="comment">#union all 可以避免重复语句合并</span></span><br><span class="line">-&gt; select * from b;</span><br><span class="line"></span><br><span class="line">mysql&gt; select goods_id,cat_id,goods_name,shop_price from goods <span class="built_in">where</span> cat_id=2</span><br><span class="line">-&gt; union</span><br><span class="line">-&gt; select goods_id,cat_id,goods_name,shop_price from goods <span class="built_in">where</span> cat_id=4;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 六、建表总结</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">create table 表名 （</span><br><span class="line">列1 列类型 [列属性 默认值]</span><br><span class="line">列2 列类型 [列属性 默认值]</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line">engine = 存储引擎</span><br><span class="line">chartset = 字符集</span><br></pre></td></tr></table></figure><blockquote><p>建表过程：声明表头的过程，也就是声明列的过程</p></blockquote><ul><li>选择合理的列类型 合理的列宽度（即放下内容 又不浪费磁盘空间）</li><li>列选什么类型的列 列给什么样的属性</li><li>数值型–整形，浮点型，定点型</li><li>字符串型–<code>char</code> <code>varchar</code> <code>text</code></li><li>日期时间类型–<code>2012-12-13 14.25.36</code></li></ul><h3 id="6-1-整型列"><a href="#6-1-整型列" class="headerlink" title="6.1 整型列"></a>6.1 整型列</h3><table><thead><tr><th>类型：</th><th>字节：</th><th>最小值：</th><th>最大值：</th></tr></thead><tbody><tr><td><code>bigint</code></td><td><code>8</code>字节</td><td><code>-9223372036854775808</code></td><td>18446744073709551615</td></tr><tr><td><code>int</code></td><td><code>4</code>字节</td><td><code>-2147483648</code></td><td><code>4294967295</code></td></tr><tr><td><code>mediunint</code></td><td><code>3</code>字节</td><td><code>-8388608</code></td><td><code>8388607</code></td></tr><tr><td><code>smallint</code></td><td>`2字节</td><td><code>-32768</code></td><td><code>3276</code>7</td></tr><tr><td><code>tinyint</code></td><td><code>1</code>字节</td><td><code>-128</code></td><td><code>127</code></td></tr></tbody></table><blockquote><p>整型列的可选参数</p></blockquote><ul><li><code>unsigned</code> 无符号，列的值从<code>0</code>开始不为负</li><li><code>zerofill M</code>（宽度）适合用于 学号 编码等固定宽度的数字，可以用0填充至固定宽度</li><li>学号：<code>1--0001</code></li><li>注意：<code>zerofill</code>属性默认决定是<code>unsigned</code></li></ul><h3 id="6-2-浮点列与定点列"><a href="#6-2-浮点列与定点列" class="headerlink" title="6.2 浮点列与定点列"></a>6.2 浮点列与定点列</h3><ul><li><code>float（M，D）</code> <code>M</code>是精度总位数 <code>D</code>代表小数点后面的位数</li><li><code>float/double</code> 范围区别和<code>decimal</code>相比：浮点数存储有精度的损失</li><li><code>decimal</code> 定点型更精确</li></ul><h3 id="6-3-字符型列"><a href="#6-3-字符型列" class="headerlink" title="6.3 字符型列"></a>6.3 字符型列</h3><ul><li><code>char(M)</code>–<code>char(10)</code>只能存<code>10</code>个字符</li><li><code>char</code>型:如果不够<code>M</code>个字符，内部会用空格补齐，取出时在把右侧空格删掉<ul><li>注意：这意味着右侧本身有空格将会丢失</li></ul></li><li><code>varchar(M)</code>–用多少占多少–自动扩展        </li><li><code>varchar</code>不会丢失空格</li><li>速度上：定长<code>char</code>快一些  在一定范围内用<code>char</code>定长寻址快 速度快</li><li><code>M</code>比较短<code>20</code>个以内用<code>char</code></li><li><code>text</code> 存大段文本</li><li><code>blob</code> 是二进制类型 用来存图像信息 音频等二进制信息<ul><li><code>blob</code>意义在于防止因为字符集的问题导致信息丢失</li></ul></li><li><code>enum</code>枚举类型：是定义好 值就在某几个枚举范围内<ul><li><code>gender emum(&#39;男&#39;,&#39;女&#39;) insert</code> 只能选其中之一</li></ul></li></ul><h3 id="6-4-日期时间类型"><a href="#6-4-日期时间类型" class="headerlink" title="6.4 日期时间类型"></a>6.4 日期时间类型</h3><ul><li><code>year</code>：存年份</li><li><code>date</code>:存年份日期2016-18</li><li><code>time</code>：存时分秒</li><li><code>datetime</code>:年月日时分秒</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t8(</span><br><span class="line">-&gt; ya year,</span><br><span class="line">-&gt; dt date,</span><br><span class="line">-&gt; tm time,</span><br><span class="line">-&gt; dttm datetime);</span><br><span class="line">-&gt; insert into t8 (ya,dt,tm) values(2015,<span class="string">'2015-12-18'</span>,<span class="string">'18:28:36'</span>);</span><br></pre></td></tr></table></figure><h3 id="6-5-列的默认值"><a href="#6-5-列的默认值" class="headerlink" title="6.5 列的默认值"></a>6.5 列的默认值</h3><ul><li><code>NULL</code>查询不方便</li><li><code>NULL</code>索引效率不高</li><li>实际中避免列的值为<code>NULL</code></li></ul><blockquote><p>如何避免：声明列<code>NOT NULL default</code>默认值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t10(</span><br><span class="line">-&gt; id int not null default 0,</span><br><span class="line">-&gt; name char(10) not null default <span class="string">''</span></span><br><span class="line">-&gt; );</span><br></pre></td></tr></table></figure><h3 id="6-6-主键与自增"><a href="#6-6-主键与自增" class="headerlink" title="6.6 主键与自增"></a>6.6 主键与自增</h3><ul><li>主键<code>primary key</code> 此列不重复，能区分每一行</li><li><code>primary key,auto_increment(一般那两个一起出现)</code></li><li>注意：一张表列只能有一列为<code>auto_increment</code> 且此列必须加索引（<code>index</code> <code>key</code>）</li><li>优化：<ul><li>定长（<code>char</code>）与变长（<code>varchar</code>）分离</li><li>常用与不常用列分离</li><li>能提高表的查询效率</li></ul></li></ul><h3 id="6-7-列的删除与增加：（列的增删改）"><a href="#6-7-列的删除与增加：（列的增删改）" class="headerlink" title="6.7 列的删除与增加：（列的增删改）"></a>6.7 列的删除与增加：（列的增删改）</h3><ul><li><code>alter  table 表名 add 列名 列类型 列属性</code> 默认在表的最后</li><li><code>alter  table  表名 drop column 指定列</code>–删除列</li><li><code>alter  table  表名 add 列名  列类型 列属性</code> [<code>after</code> 指定列的后面]</li><li><code>alter table  表名 change height(要修改的) shengao（被修改后的） smallint</code></li><li><code>alter table 表名 modify 列名</code> 要改成的新的属性</li></ul><h3 id="6-8-视图：（存储的都是语句）"><a href="#6-8-视图：（存储的都是语句）" class="headerlink" title="6.8 视图：（存储的都是语句）"></a>6.8 视图：（存储的都是语句）</h3><blockquote><p><code>view</code>被称为虚拟表，view是sql语句的查询结果（物理表的一个映射结果，物理表一改变，视图表也改变）</p></blockquote><p><strong>1. view好处</strong></p><ul><li>权限控制可用：<ul><li>比如某几个列允许用户查询，其他不允许</li><li>可通过视图开放其中一列或几列，起到权限控制作用</li></ul></li><li>简化复杂的查询</li><li>视图能更新？<ul><li>如果视图的每一行是与物理表一一对应的可以</li><li>view的行是由物理表多行经过计算得到的结果，view不可以更新</li></ul></li></ul><p><strong>2. 视图的algorithm</strong></p><ul><li>对于检查查询形成的view，在对view查询时，如order by where</li><li>可以把建视图语句+查视图的语句===合并成==&gt;查物理的语句</li><li>这种视图的算法叫merger（合并）</li></ul><h3 id="6-9-引擎的概念"><a href="#6-9-引擎的概念" class="headerlink" title="6.9 引擎的概念"></a>6.9 引擎的概念</h3><ul><li><code>mysql 5.0</code>以上默认的引擎是<code>innoDB</code>  一般建表时指定引擎</li><li><code>myisam</code>引擎存储的数据可以直接考出来拿去用</li><li><code>innDB</code>要把数据导出来</li></ul><blockquote><p><code>myisam</code>和<code>innDB</code>引擎区别</p></blockquote><table><thead><tr><th>mysiam</th><th>innDB</th></tr></thead><tbody><tr><td>批量插入的速度：</td><td>高</td><td>低</td></tr><tr><td>存储限制：</td><td>没有</td><td><code>64TB</code></td></tr></tbody></table><h3 id="6-10-字符集与乱码问题"><a href="#6-10-字符集与乱码问题" class="headerlink" title="6.10 字符集与乱码问题"></a>6.10 字符集与乱码问题</h3><ul><li>字符集、校对集(排序规则)、乱码</li><li>文字本来的字符集与展示的字符集不一致导致</li><li>客户端编码设置：<code>set names gbk/utf8;</code></li><li>表设置编码:<code>create table ()charset utf8;</code></li><li>服务器端<code>utf8/gbk</code> 都可</li><li>网页的话：<code>mate:charset=utf8;</code></li></ul><h3 id="6-11-索引"><a href="#6-11-索引" class="headerlink" title="6.11 索引"></a>6.11 索引</h3><ul><li>索引是数据的目录，能快速定位行数据的位置</li><li>索引提高了查询的速度，降低了增删改的速度，并非越多越好</li><li>一般在查询频率的列上加，而且在重复低列上加效果好</li><li><code>key</code> 普通索引</li><li><code>unique key</code> 唯一键</li><li><code>primary key</code> 主键索引</li><li>索引长度：建索引时，可以只索引列的前一部分的内容比如：前十个字符 <code>key email(email(10));</code></li><li>多列索引:就是把<code>2</code>列或者多列的值，看成一个整体，然后键索引</li><li>冗余索引：在某个列上可能存在多个索引</li></ul><h3 id="6-12-索引操作"><a href="#6-12-索引操作" class="headerlink" title="6.12 索引操作"></a>6.12 索引操作</h3><ul><li>查看索引：<code>show index from goods\G</code></li><li>删除索引：<code>alter table 表名 drop index 索引名</code><ul><li>或者：<code>drop index 索引名 on 表名</code></li></ul></li><li>添加：<code>alter table 表名 add [index \unqiue]索引名(列名)</code></li><li>添加主键索引：<code>alter table 表名 add primary key 列名</code></li><li>删除主键索引：<code>alter table 表名 drop primary key</code></li></ul><h2 id="七、常用函数"><a href="#七、常用函数" class="headerlink" title="七、常用函数"></a>七、常用函数</h2><h3 id="7-1-数学函数"><a href="#7-1-数学函数" class="headerlink" title="7.1 数学函数"></a>7.1 数学函数</h3><ul><li><code>abs(x)</code>   返回x的绝对值</li><li><code>bin(x)</code>   返回x的二进制（oct返回八进制，hex返回十六进制）</li><li><code>ceiling(x)</code>   返回大于x的最小整数值</li><li><code>exp(x)</code>   返回值<code>e</code>（自然对数的底）的<code>x</code>次方</li><li><code>floor(x)</code>   返回小于<code>x</code>的最大整数值</li><li><code>greatest(x1,x2,...,xn)</code>返回集合中最大的值</li><li><code>least(x1,x2,...,xn)</code>      返回集合中最小的值</li><li><code>ln(x)</code>                    返回x的自然对数</li><li><code>log(x,y)</code>返回<code>x</code>的以<code>y</code>为底的对数</li><li><code>mod(x,y)</code>                 返回x/y的模（余数）</li><li><code>pi()</code>返回<code>pi</code>的值（圆周率）</li><li><code>rand()</code>返回<code>０</code>到<code>1</code>内的随机值,可以通过提供一个参数(种子)使<code>rand()</code>随机数生成器生成一个指定的值。</li><li><code>round(x,y)</code>返回参数<code>x</code>的四舍五入的有<code>y</code>位小数的值</li><li><code>sign(x)</code>返回代表数字<code>x</code>的符号的值</li><li><code>sqrt(x)</code>返回一个数的平方根</li><li><code>truncate(x,y)</code>            返回数字<code>x</code>截短为<code>y</code>位小数的结果</li></ul><h3 id="7-2-聚合函数-常用于group-by从句的select查询中"><a href="#7-2-聚合函数-常用于group-by从句的select查询中" class="headerlink" title="7.2 聚合函数(常用于group by从句的select查询中)"></a>7.2 聚合函数(常用于group by从句的select查询中)</h3><ul><li><code>avg(col)</code>返回指定列的平均值</li><li><code>count(col)</code>返回指定列中非<code>null</code>值的个数</li><li><code>min(col)</code>返回指定列的最小值</li><li><code>max(col)</code>返回指定列的最大值</li><li><code>sum(col)</code>返回指定列的所有值之和</li><li><code>group_concat(col)</code>返回由属于一组的列值连接组合而成的结果</li></ul><h3 id="7-3-字符串函数"><a href="#7-3-字符串函数" class="headerlink" title="7.3 字符串函数"></a>7.3 字符串函数</h3><ul><li><code>ascii(char)</code>返回字符的<code>ascii</code>码值</li><li><code>bit_length(str)</code>返回字符串的比特长度</li><li><code>concat(s1,s2...,sn)</code>将s<code>1,s2...,sn</code>连接成字符串</li><li><code>concat_ws(sep,s1,s2...,sn)</code>将<code>s1,s2...,sn</code>连接成字符串，并用<code>sep</code>字符间隔</li><li><code>insert(str,x,y,instr)</code>将字符串<code>str</code>从第<code>x</code>位置开始，<code>y</code>个字符长的子串替换为字符串<code>instr</code>，返回结果</li><li><code>find_in_set(str,list)</code>分析逗号分隔的<code>list</code>列表，如果发现<code>str</code>，返回<code>str</code>在<code>list</code>中的位置</li><li><code>lcase(str)</code>或<code>lower(str)</code> 返回将字符串<code>str</code>中所有字符改变为小写后的结果</li><li><code>left(str,x)</code>返回字符串<code>str</code>中最左边的<code>x</code>个字符</li><li><code>length(s)</code>返回字符串<code>str</code>中的字符数</li><li><code>ltrim(str)</code> 从字符串<code>str</code>中切掉开头的空格</li><li><code>position(substr,str)</code> 返回子串<code>substr</code>在字符串<code>str</code>中第一次出现的位置</li><li><code>quote(str)</code> 用反斜杠转义<code>str</code>中的单引号</li><li><code>repeat(str,srchstr,rplcstr)</code>返回字符串<code>str</code>重复<code>x</code>次的结果</li><li><code>reverse(str) 返回颠倒字符串</code>str`的结果</li><li><code>right(str,x) 返回字符串</code>str<code>中最右边的</code>x`个字符</li><li><code>rtrim(str) 返回字符串</code>str`尾部的空格</li><li><code>strcmp(s1,s2)</code>比较字符串<code>s1</code>和<code>s2</code></li><li><code>trim(str)</code>去除字符串首部和尾部的所有空格</li><li><code>ucase(str)</code>或<code>upper(str)</code> 返回将字符串<code>str</code>中所有字符转变为大写后的结果</li></ul><h3 id="7-4-日期和时间函数"><a href="#7-4-日期和时间函数" class="headerlink" title="7.4 日期和时间函数"></a>7.4 日期和时间函数</h3><ul><li><code>curdate()</code>或<code>current_date()</code> 返回当前的日期</li><li><code>curtime()</code>或<code>current_time()</code> 返回当前的时间</li><li><code>date_add(date,interval int - keyword)</code>返回日期<code>date</code>加上间隔时间<code>int</code>的结果(<code>int</code>必须按照关键字进行格式化),如：<code>selectdate_add(current_date,interval 6 month);</code></li><li><code>date_format(date,fmt)</code>  依照指定的<code>fmt</code>格式格式化日期<code>date</code>值</li><li><code>date_sub(date,interval int - keyword)</code>返回日期<code>date</code>加上间隔时间<code>int</code>的结果(<code>int</code>必须按照关键字进行格式化),如：<code>selectdate_sub(current_date,interval 6 month);</code></li><li><code>dayofweek(date)</code>  返回date所代表的一星期中的第几天(<code>1~7</code>)</li><li><code>dayofmonth(date)</code>  返回date是一个月的第几天(<code>1~31</code>)</li><li><code>dayofyear(date)</code>  返回date是一年的第几天(<code>1~366</code>)</li><li><code>dayname(date)</code> 返回date的星期名，如：<code>select dayname(current_date);</code></li><li><code>from_unixtime(ts,fmt)</code> 根据指定的<code>fmt</code>格式，格式化<code>unix</code>时间戳<code>ts</code></li><li><code>hour(time)</code>  返回time的小时值<code>(0~23)</code></li><li><code>minute(time)</code>  返回time的分钟值<code>(0~59)</code></li><li><code>month(date)</code>  返回<code>date</code>的月份值<code>(1~12)</code></li><li><code>monthname(date)</code> 返回<code>date</code>的月份名，如：<code>select monthname(current_date);</code></li><li><code>now()</code>   返回当前的日期和时间</li><li><code>quarter(date)</code>  返回<code>date</code>在一年中的季度<code>(1~4)</code>，如<code>select quarter(current_date);`</code></li><li><code>week(date)</code>   返回日期<code>date</code>为一年中第几周(<code>0~53</code>)</li><li><code>year(date)</code>   返回日期<code>date</code>的年份(<code>1000~9999</code>)</li></ul><p><strong>一些示例</strong></p><ul><li>获取当前系统时间：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select from_unixtime(unix_timestamp());</span><br><span class="line"></span><br><span class="line">select extract(year_month from current_date);</span><br><span class="line"></span><br><span class="line">select extract(day_second from current_date);</span><br><span class="line"></span><br><span class="line">select extract(hour_minute from current_date);</span><br></pre></td></tr></table></figure><ul><li>返回两个日期值之间的差值(月数)：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select period_diff(200302,199802);</span><br></pre></td></tr></table></figure><ul><li>在<code>mysql</code>中计算年龄：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date_format(from_days(to_days(now())-to_days(birthday)),<span class="string">'%y'</span>)+0 as age from employee;</span><br></pre></td></tr></table></figure><blockquote><p>这样，如果<code>brithday</code>是未来的年月日的话，计算结果为<code>0</code>。</p></blockquote><p>下面的<code>sql</code>语句计算员工的绝对年龄，即当<code>birthday</code>是未来的日期时，将得到负值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date_format(now(), <span class="string">'%y'</span>) - date_format(birthday, <span class="string">'%y'</span>) -(date_format(now(), <span class="string">'00-%m-%d'</span>) &lt;date_format(birthday, <span class="string">'00-%m-%d'</span>)) as age from employee</span><br></pre></td></tr></table></figure><h3 id="7-5-加密函数"><a href="#7-5-加密函数" class="headerlink" title="7.5 加密函数"></a>7.5 加密函数</h3><ul><li><code>aes_encrypt(str,key)</code>  返回用密钥<code>key</code>对字符串<code>str</code>利用高级加密标准算法加密后的结果，调用<code>aes_encrypt</code>的结果是一个二进制字符串，以<code>blob</code>类型存储</li><li><code>aes_decrypt(str,key)</code> 返回用密钥<code>key</code>对字符串<code>str</code>利用高级加密标准算法解密后的结果</li><li><code>decode(str,key)</code>  使用<code>key</code>作为密钥解密加密字符串<code>str</code></li><li><code>encrypt(str,salt)</code>   使用<code>unixcrypt()</code>函数，用关键词<code>salt</code>(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串<code>str</code></li><li><code>encode(str,key)</code>  使用key作为密钥加密字符串str，调用<code>encode()</code>的结果是一个二进制字符串，它以<code>blob</code>类型存储</li><li><code>md5()</code>   计算字符串<code>str</code>的<code>md5</code>校验和</li><li><code>password(str)</code>  返回字符串<code>str</code>的加密版本，这个加密过程是不可逆转的，和<code>unix</code>密码加密过程使用不同的算法。</li><li><code>sha()</code>  计算字符串<code>str</code>的安全散列算法(<code>sha</code>)校验和</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">select encrypt(<span class="string">'root'</span>,<span class="string">'salt'</span>);</span><br><span class="line">select encode(<span class="string">'xufeng'</span>,<span class="string">'key'</span>);</span><br><span class="line">select decode(encode(<span class="string">'xufeng'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);<span class="comment">#加解密放在一起</span></span><br><span class="line">select aes_encrypt(<span class="string">'root'</span>,<span class="string">'key'</span>);</span><br><span class="line">select aes_decrypt(aes_encrypt(<span class="string">'root'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);</span><br><span class="line">select md5(<span class="string">'123456'</span>);</span><br><span class="line">select sha(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><h3 id="7-6-格式化函数"><a href="#7-6-格式化函数" class="headerlink" title="7.6 格式化函数"></a>7.6 格式化函数</h3><ul><li><code>date_format(date,fmt)</code>  依照字符串<code>fmt</code>格式化日期<code>date</code>值</li><li><code>format(x,y)</code>  把<code>x</code>格式化为以逗号隔开的数字序列，<code>y</code>是结果的小数位数</li><li><code>inet_aton(ip)</code>  返回<code>ip</code>地址的数字表示</li><li><code>inet_ntoa(num)</code>   返回数字所代表的<code>ip</code>地址</li><li><code>time_format(time,fmt)</code> 依照字符串<code>fmt</code>格式化时间<code>time</code>值</li><li>其中最简单的是<code>format()</code>函数，它可以把大的数值格式化为以逗号间隔的易读的序列。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 示例：</span><br><span class="line"></span><br><span class="line">select format(34234.34323432,3);</span><br><span class="line"></span><br><span class="line">select date_format(now(),&apos;%w,%d %m %y %r&apos;);</span><br><span class="line"></span><br><span class="line">select date_format(now(),&apos;%y-%m-%d&apos;);</span><br><span class="line"></span><br><span class="line">select date_format(19990330,&apos;%y-%m-%d&apos;);</span><br><span class="line"></span><br><span class="line">select date_format(now(),&apos;%h:%i %p&apos;);</span><br><span class="line"></span><br><span class="line">select inet_aton(&apos;10.122.89.47&apos;);</span><br><span class="line"></span><br><span class="line">select inet_ntoa(175790383);</span><br></pre></td></tr></table></figure><h3 id="7-7-类型转化函数"><a href="#7-7-类型转化函数" class="headerlink" title="7.7 类型转化函数"></a>7.7 类型转化函数</h3><blockquote><p>为了进行数据类型转化，<code>mysql</code>提供了<code>cast()</code>函数，它可以把一个值转化为指定的数据类型。类型有：<code>binary</code>,<code>char</code>,<code>date</code>,<code>time</code>,<code>datetime</code>,<code>igned</code>,<code>unsigned</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"></span><br><span class="line">select cast(now() as signed <span class="built_in">integer</span>),curdate()+0;</span><br><span class="line">select <span class="string">'f'</span>=binary <span class="string">'f'</span>,<span class="string">'f'</span>=cast(<span class="string">'f'</span> as binary);</span><br></pre></td></tr></table></figure><h3 id="7-8-系统信息函数"><a href="#7-8-系统信息函数" class="headerlink" title="7.8 系统信息函数"></a>7.8 系统信息函数</h3><ul><li><code>database()</code>  返回当前数据库名</li><li><code>benchmark(count,expr)</code> 将表达式<code>expr</code>重复运行<code>count</code>次</li><li><code>connection_id()</code>   返回当前客户的连接<code>id</code></li><li><code>found_rows()</code>   返回最后一个<code>select</code>查询进行检索的总行数</li><li><code>user()</code>或<code>system_user()</code>  返回当前登陆用户名</li><li><code>version()</code>   返回<code>mysql</code>服务器的版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"></span><br><span class="line">select database(),version(),user();</span><br><span class="line"></span><br><span class="line"><span class="comment">#该例中,mysql计算log(rand()*pi())表达式9999999次。</span></span><br><span class="line">selectbenchmark(9999999,<span class="built_in">log</span>(rand()*pi()));</span><br></pre></td></tr></table></figure><h2 id="八、Mysql十条常用语句"><a href="#八、Mysql十条常用语句" class="headerlink" title="八、Mysql十条常用语句"></a>八、Mysql十条常用语句</h2><p><strong>1. 链接到数据库服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -u root -p 密码</span><br></pre></td></tr></table></figure><p><strong>2. 查看所有库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><strong>3. 选库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br></pre></td></tr></table></figure><p><strong>4. 查看库下面的表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><strong>5. 建表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table msg&#123;</span><br><span class="line">    id int auto_increment primary key，</span><br><span class="line">content varcha(200)，</span><br><span class="line">pubtime int</span><br><span class="line">&#125;charset utf8;</span><br></pre></td></tr></table></figure><p><strong>6. 告诉服务器你的字符集：set names gbk/utg8;</strong></p><p><strong>7. 添加数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into msg(id,content,pubtime) values(1,&apos;哈哈哈哈&apos;,13445);</span><br></pre></td></tr></table></figure><p><strong>8. 查询所有数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from msg;</span><br></pre></td></tr></table></figure><p><strong>9. 按id查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from where id = 2...</span><br></pre></td></tr></table></figure><p><strong>10. 快速清空表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate 表名</span><br></pre></td></tr></table></figure><h2 id="九、可视化管理数据"><a href="#九、可视化管理数据" class="headerlink" title="九、可视化管理数据"></a>九、可视化管理数据</h2><blockquote><p>一般为了方便管理数据，我们都需要用到可视化工具</p></blockquote><ul><li><a href="https://www.navicat.com.cn/download/navicat-for-mysql" target="_blank" rel="noopener">navicat-for-mysql</a></li></ul><blockquote><p>这里提供一份数据表，供学习使用，<a href="https://blog.csdn.net/qq_33699659/article/details/79261661" target="_blank" rel="noopener">导入sql数据到navicat</a></p></blockquote><blockquote><p><a href="http://blog.poetries.top/sql/mysql-table.sql">http://blog.poetries.top/sql/mysql-table.sql</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好久没用&lt;code&gt;sql&lt;/code&gt;，都忘得干干净净，翻阅以前的学习笔记，觉得有些可记录的点，放在这里以便备用查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、环境搭建&quot;&gt;&lt;a href=&quot;#一、环境搭建&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="DataBase" scheme="http://blog.poetries.top/categories/DataBase/"/>
    
    
      <category term="Mysql" scheme="http://blog.poetries.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>混合App之Ionic4小结篇</title>
    <link href="http://blog.poetries.top/2019/01/10/ionic-summary/"/>
    <id>http://blog.poetries.top/2019/01/10/ionic-summary/</id>
    <published>2019-01-10T10:10:24.000Z</published>
    <updated>2019-01-25T09:06:54.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>折腾了一段时间<code>Typescript</code>、<code>angular</code>基础，终于可以学<code>Ionic4</code>了</p></blockquote><blockquote><p>没有<code>angular</code>基础，看一下这篇文章 <a href="http://blog.poetries.top/2019/01/09/angular7-intro-summary">http://blog.poetries.top/2019/01/09/angular7-intro-summary</a></p></blockquote><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><blockquote><p><code>Ionic</code> 是一款基于 <code>Angular</code>、<code>Cordova</code> 的强大的 <code>HTML5</code> 移动应用开发框架 , 可以快速创建一 个跨平台的移动应用。可以快速开发移动 <code>App</code>、移动端 <code>WEB</code> 页面、微信公众平台应用，混 合 <code>app web</code>页面。</p></blockquote><h2 id="1-1-ionic-特点"><a href="#1-1-ionic-特点" class="headerlink" title="1.1 ionic 特点"></a>1.1 ionic 特点</h2><ul><li><code>ionic</code> 基于<code>Angular</code>语法，简单易学。</li><li><code>ionic</code> 是一个轻量级框架。</li><li><code>ionic</code> 完美的融合下一代移动框架，支持 <code>Angularjs</code> 的特性， <code>MVC</code> ，代码易维护。</li><li><code>ionic</code> 提供了漂亮的设计，通过 <code>SASS</code> 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。</li><li><code>ionic</code> 专注原生，让你看不出混合应用和原生的区别</li><li><code>ionic</code> 提供了强大的命令行工具。</li><li><code>ionic</code> 性能优越，运行速度快。</li></ul><h2 id="1-2-Ionic-和-Cordova-phonegap-、Angular-关系"><a href="#1-2-Ionic-和-Cordova-phonegap-、Angular-关系" class="headerlink" title="1.2 Ionic 和 Cordova(phonegap)、Angular 关系"></a>1.2 Ionic 和 Cordova(phonegap)、Angular 关系</h2><blockquote><p><code>ionic</code> = <code>Cordova</code> + <code>Angular</code> + <code>ionic CSS</code></p></blockquote><blockquote><p><code>Ionic</code>是完全基于谷歌的 <code>Angular</code> 框架，在 <code>Angular</code> 基础上面做了一些封装，让我们可以更快 速和容易的开发移动的项目。<code>Ionic</code> 调用原生的功能是基于 <code>Cordova</code>,<code>Cordova</code> 提供了使用 <code>JavaScript</code> 调用 <code>Native</code> 功能，<code>ionic</code> 自己也封装了一套漂亮的 <code>CSS UI</code> 库。</p></blockquote><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h2 id="2-1-Ionic初始化构建"><a href="#2-1-Ionic初始化构建" class="headerlink" title="2.1 Ionic初始化构建"></a>2.1 Ionic初始化构建</h2><blockquote><p><a href="https://ionicframework.com/getting-started#cli" target="_blank" rel="noopener">https://ionicframework.com/getting-started#cli</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g ionic</span><br></pre></td></tr></table></figure><ul><li><code>ionic info</code> (查看当前<code>ionic</code>的全部版本信息)</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ddad8ba9108c0116.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp tabs <span class="comment"># 建议使用初始化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> myApp </span><br><span class="line"></span><br><span class="line">ionic serve</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-514b23b5ea8fd4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>ionic serve</code> 运行项目</li></ul><h2 id="2-2-Genymotion-安卓模拟器"><a href="#2-2-Genymotion-安卓模拟器" class="headerlink" title="2.2 Genymotion 安卓模拟器"></a>2.2 Genymotion 安卓模拟器</h2><blockquote><p>使用方法 <a href="https://www.jianshu.com/p/aabc4fd01311" target="_blank" rel="noopener">https://www.jianshu.com/p/aabc4fd01311</a></p></blockquote><h2 id="2-3-在IOS环境下体验"><a href="#2-3-在IOS环境下体验" class="headerlink" title="2.3 在IOS环境下体验"></a>2.3 在IOS环境下体验</h2><blockquote><p>需要配备<code>mac</code>，安装<code>xcode</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac下需要添加sudo</span></span><br><span class="line">sudo ionic cordova platform add ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意获取目录权限的问题</span></span><br><span class="line">chmod -R 777 项目文件夹名</span><br></pre></td></tr></table></figure><blockquote><p>真机调试与发布需要<code>Apple</code>开发者账号</p></blockquote><p><strong>打开xcode选择platform下中ios文件夹，点击运行项目</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a88aef237eed3ffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="2-4-在安卓下体验"><a href="#2-4-在安卓下体验" class="headerlink" title="2.4 在安卓下体验"></a>2.4 在安卓下体验</h2><p><strong>1. 添加android</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova platform add android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意获取目录权限的问题</span></span><br><span class="line">chmod -R 777 项目文件夹名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用Android studio 进行调试链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包成apk拖入Genymotion调试</span></span><br></pre></td></tr></table></figure><p><strong>2. 下载android studio 打开/platform/andriod文件</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8491b2c583d0cf3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>3. 然后连接android studio结合geny生成apk调试</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-40771d7cc51e45f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="2-5-在浏览器-微信下体验"><a href="#2-5-在浏览器-微信下体验" class="headerlink" title="2.5 在浏览器/微信下体验"></a>2.5 在浏览器/微信下体验</h2><p><strong>1. 添加browser文件夹</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova platform add browser</span><br></pre></td></tr></table></figure><p><strong>2. 打包</strong></p><blockquote><p><code>ionic cordova build browser</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bef93f8f07488d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-28d5f0193d87167e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>3. 运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器打开 http://localhost:8100</span></span><br></pre></td></tr></table></figure><p><strong>4. 部署</strong></p><blockquote><p>把<code>www</code>目录部署到服务器上即可</p></blockquote><blockquote><p>在微信下体验 注意微信<code>title</code>问题</p></blockquote><h2 id="2-6-ionic的常用命令"><a href="#2-6-ionic的常用命令" class="headerlink" title="2.6 ionic的常用命令"></a>2.6 ionic的常用命令</h2><p><strong>1. 基本命令</strong></p><ul><li><code>ionic g page myPage</code> 创建页面</li><li><code>ionic g provider MyData</code> 创建<code>provider</code></li><li><code>ionic serve</code> 在浏览器中看</li><li><code>ionic platform add/remove android/ios</code> 添加删除平台</li><li><code>ionic build android/ios</code>  快捷打包（<code>IOS</code>最好通过<code>xcode</code>打包发布）</li></ul><p><strong>2. 辅助命令</strong></p><ul><li><code>ionic info</code> 查看关于<code>ionic</code>的系统消息</li><li><code>ionic emulate android/ios</code> 模拟器中打开</li><li><code>ionic cordova plugin list</code> 查看插件安装列表</li></ul><p><strong>3. 正式发布需要的命令</strong></p><ul><li><code>ionic cordova platforms add android</code> 添加安卓平台</li><li><code>ionic cordova build android --release</code> 打包成<code>apk</code></li></ul><h1 id="三、Ionic3-x-目录结构分析及创建组件"><a href="#三、Ionic3-x-目录结构分析及创建组件" class="headerlink" title="三、Ionic3.x+ 目录结构分析及创建组件"></a>三、Ionic3.x+ 目录结构分析及创建组件</h1><h2 id="3-1-Ionic3-x-目录结构分析"><a href="#3-1-Ionic3-x-目录结构分析" class="headerlink" title="3.1 Ionic3.x 目录结构分析"></a>3.1 Ionic3.x 目录结构分析</h2><p><strong>1. 整体目录结构</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ec4f35d6e3bab428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>hooks</code>:编译 <code>cordova</code> 时自定义的脚本命令，方便整合到我们的编译系统和版本控制系统中 </li><li><code>node_modules</code> :<code>node</code> 各类依赖包</li><li><code>resources</code> :<code>android/ios</code> 资源(更换图标和启动动画) </li><li><code>src</code>:开发工作目录，页面、样式、脚本和图片都放在这个目录下</li><li><code>www</code>:静态文件</li><li><code>platforms</code>:生成 <code>android</code> 或者 <code>ios</code> 安装包路径(<code>platforms\android\build\outputs\apk:apk</code><br>所在位置)执行 <code>cordova platform add android</code> 后会生成</li><li><code>plugins</code>:插件文件夹，里面放置各种 <code>cordova</code> 安装的插件</li><li><code>config.xml</code>: 打包成 <code>app</code> 的配置文件</li><li><code>package.json</code>: 配置项目的元数据和管理项目所需要的依赖</li><li><code>tsconfig.json</code>: <code>TypeScript</code> 项目的根目录，指定用来编译这个项目的根文件和编译选项 </li><li><code>tslint.json</code>:格式化和校验 <code>typescript</code></li></ul><p><strong>2. src目录</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ef37273ff97e9c99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>app</code>:应用根目录</li><li><code>assets</code>:资源目录(静态文件(图片，js 框架) </li><li><code>pages</code>:页面文件，放置编写的页面文件，包括:<code>html</code>，<code>scss</code>，<code>ts</code></li><li><code>theme</code>:主题文件，里面有一个 <code>scss</code> 文件，设置主题信息。</li></ul><p><strong>3. Ionic3.x src 下面文件分析</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-509d5353e4bb462e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>4. app.module.ts 分析</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个根模块会告诉 ionic 如何组装该应用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule, ErrorHandler &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpClientModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicApp, IonicModule, IonicErrorHandler &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicStorageModule &#125; <span class="keyword">from</span> <span class="string">'@ionic/storage'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyApp &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../pages/home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DiscoveryPage &#125; <span class="keyword">from</span> <span class="string">'../pages/discovery/discovery'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ChatPage &#125; <span class="keyword">from</span> <span class="string">'../pages/chat/chat'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NotificationPage &#125; <span class="keyword">from</span> <span class="string">'../pages/notification/notification'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MorePage &#125; <span class="keyword">from</span> <span class="string">'../pages/more/more'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoginPage &#125; <span class="keyword">from</span> <span class="string">'../pages/login/login'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TabsPage &#125; <span class="keyword">from</span> <span class="string">'../pages/tabs/tabs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; StatusBar &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/status-bar'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SplashScreen &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/splash-screen'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiProvider &#125; <span class="keyword">from</span> <span class="string">'../providers/api/api'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    MyApp,</span><br><span class="line">    HomePage,</span><br><span class="line">    DiscoveryPage,</span><br><span class="line">    ChatPage,</span><br><span class="line">    NotificationPage,</span><br><span class="line">    MorePage,</span><br><span class="line">    LoginPage,</span><br><span class="line">    TabsPage</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpClientModule,</span><br><span class="line">    IonicModule.forRoot(MyApp),</span><br><span class="line">    IonicStorageModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [</span><br><span class="line">    MyApp,</span><br><span class="line">    HomePage,</span><br><span class="line">    DiscoveryPage,</span><br><span class="line">    ChatPage,</span><br><span class="line">    NotificationPage,</span><br><span class="line">    MorePage,</span><br><span class="line">    LoginPage,</span><br><span class="line">    TabsPage</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    StatusBar,</span><br><span class="line">    SplashScreen,</span><br><span class="line">    &#123;<span class="attr">provide</span>: ErrorHandler, <span class="attr">useClass</span>: IonicErrorHandler&#125;,</span><br><span class="line">    ApiProvider</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-创建组件"><a href="#3-2-创建组件" class="headerlink" title="3.2 创建组件"></a>3.2 创建组件</h2><ol><li><code>cd</code> 到我们的项目目录</li><li>通过 <code>ionic g component</code> 组件名称创建组件</li></ol><blockquote><p>输入<code>ionic g</code>后，可以创建的组件如下</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-05bfbefd2e045576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="3"><li>创建完成组件以后会在 <code>src</code> 目录下面多一个 <code>components</code> 的目录，这个目录里面有我们用命令创建的所有的组件</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c7d29e7ab4f12287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="4"><li>如果我们要使用这些组件必须在 <code>app.module.ts</code> 里面注册我们的模块，注册完成后就可以在 <code>pages</code> 里面的其页面里面使用这些组件</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-def738bc118984a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a17b3b0709f0fd48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="3-3-创建页面以及页面跳转"><a href="#3-3-创建页面以及页面跳转" class="headerlink" title="3.3 创建页面以及页面跳转"></a>3.3 创建页面以及页面跳转</h2><p><strong>1. 创建页面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic g page news</span><br></pre></td></tr></table></figure><p><strong>2. 跳转</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> (<span class="attr">click</span>)=<span class="string">"pushButton"</span>&gt;</span>执行button跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e8a74fa40ff90073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="四、Ionic页面生命周期"><a href="#四、Ionic页面生命周期" class="headerlink" title="四、Ionic页面生命周期"></a>四、Ionic页面生命周期</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面被加载完成后调用的函数，切换页面时并不会进行重新加载，因为有cache的存在</span></span><br><span class="line">onPageLoaded() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'page 1: page loaded.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 页面即将进入的时候</span></span><br><span class="line">onPageWillEnter() &#123;</span><br><span class="line">  <span class="comment">// 在这里可以做页面初始化的一些事情</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'page 1: page will enter.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 页面已经进入的时候</span></span><br><span class="line">onPageDidEnter() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'page 1: page did enter.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 页面即将离开的时候</span></span><br><span class="line">onPageWillLeave() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'page 1: page will leave.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 页面已经离开的时候</span></span><br><span class="line">onPageDidLeave() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'page 1: page did leave.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从 DOM 中移除的时候执行的生命周期</span></span><br><span class="line">onPageWillUnload() &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从 DOM 中移除执行完成的时候</span></span><br><span class="line">onPageDidUnload() &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、API的使用"><a href="#五、API的使用" class="headerlink" title="五、API的使用"></a>五、API的使用</h1><h2 id="5-1-图片上传"><a href="#5-1-图片上传" class="headerlink" title="5.1 图片上传"></a>5.1 图片上传</h2><blockquote><p>文档 <a href="https://ionicframework.com/docs/native" target="_blank" rel="noopener">https://ionicframework.com/docs/native</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @ionic-native/camera @ionic-native/file @ionic-native/file-path @ionic-native/transfer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件 mac下需要sudo</span></span><br><span class="line">sudo ionic cordova plugin add cordova-plugin-camera </span><br><span class="line">sudo ionic cordova plugin add cordova-plugin-file </span><br><span class="line">sudo ionic cordova plugin add cordova-plugin-file-transfer</span><br><span class="line">sudo ionic cordova plugin add cordova-plugin-filepath</span><br></pre></td></tr></table></figure><h2 id="5-2-Icon-本地存储的使用"><a href="#5-2-Icon-本地存储的使用" class="headerlink" title="5.2 Icon 本地存储的使用"></a>5.2 Icon 本地存储的使用</h2><blockquote><p><a href="https://ionicframework.com/docs/storage" target="_blank" rel="noopener">https://ionicframework.com/docs/storage</a></p></blockquote><p><strong>1. 安装插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova plugin add cordova-sqlite-storage</span><br><span class="line"></span><br><span class="line">npm install --save @ionic/storage</span><br></pre></td></tr></table></figure><p><strong>2. src/app/app.module.ts导入配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IonicStorageModule &#125; <span class="keyword">from</span> <span class="string">'@ionic/storage'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    IonicModule.forRoot(MyApp),</span><br><span class="line">    IonicStorageModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 在你的页面中使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Storage &#125; <span class="keyword">from</span> <span class="string">'@ionic/storage'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(private storage: Storage) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set a key/value</span></span><br><span class="line">  storage.set(<span class="string">'name'</span>, <span class="string">'Max'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Or to get a key/value pair</span></span><br><span class="line">  storage.get(<span class="string">'age'</span>).then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Your age is'</span>, val);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-二维码扫描"><a href="#5-3-二维码扫描" class="headerlink" title="5.3 二维码扫描"></a>5.3 二维码扫描</h2><blockquote><p><a href="https://ionicframework.com/docs/native/qr-scanner" target="_blank" rel="noopener">https://ionicframework.com/docs/native/qr-scanner</a></p></blockquote><p><strong>1. 安装插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">$ ionic cordova plugin add cordova-plugin-qrscanner</span><br><span class="line">$ npm install --save @ionic-native/qr-scanner</span><br></pre></td></tr></table></figure><p><strong>2. 在<code>src/app/app.module.ts</code>中导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; QRScanner, QRScannerStatus &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/qr-scanner'</span>;</span><br><span class="line"></span><br><span class="line">  providers: [</span><br><span class="line">    StatusBar,</span><br><span class="line">    SplashScreen,</span><br><span class="line">    &#123;<span class="attr">provide</span>: ErrorHandler, <span class="attr">useClass</span>: IonicErrorHandler&#125;,</span><br><span class="line">    QRScanner <span class="comment">// 导入插件</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p><strong>3. 在页面中使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建扫描页面</span></span><br><span class="line">ionic g page scan</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** scan.scss **/</span></span><br><span class="line">page-scan &#123;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line">ion-app,</span><br><span class="line">ion-<span class="attribute">content</span>,</span><br><span class="line">ion-page,</span><br><span class="line"><span class="selector-class">.nav-decor</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999999</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#009900</span>; <span class="comment">//动画</span></span><br><span class="line">  <span class="attribute">animation</span>: scan <span class="number">1s</span> infinite alternate;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: scan <span class="number">1s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes scan &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">80%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--scan.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scan.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicPage, NavController, NavParams, AlertController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; QRScanner, QRScannerStatus &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/qr-scanner'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'page-scan'</span>,</span><br><span class="line">  templateUrl: <span class="string">'scan.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScanPage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public navCtrl: NavController,</span><br><span class="line">    public navParams: NavParams,</span><br><span class="line">    public alertCtrl: AlertController,</span><br><span class="line">    public qrScanner: QRScanner) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ionViewDidLoad() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ionViewDidLoad ScanPage'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ionViewDidEnter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.scanQRCode();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scanQRCode() &#123;</span><br><span class="line">    <span class="keyword">this</span>.qrScanner.prepare()</span><br><span class="line">      .then(<span class="function">(<span class="params">status: QRScannerStatus</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.authorized) &#123;</span><br><span class="line">          <span class="built_in">window</span>.document.querySelector(<span class="string">'body'</span>).classList.add(<span class="string">'transparent-body'</span>);</span><br><span class="line">          <span class="keyword">let</span> scanSub = <span class="keyword">this</span>.qrScanner.scan().subscribe(<span class="function">(<span class="params">text: string</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> alert = <span class="keyword">this</span>.alertCtrl.create(&#123;</span><br><span class="line">              title: <span class="string">'二维码内容'</span>,</span><br><span class="line">              subTitle: text,</span><br><span class="line">              buttons: [<span class="string">'OK'</span>]</span><br><span class="line">            &#125;);</span><br><span class="line">            alert.present();</span><br><span class="line">            scanSub.unsubscribe();</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">this</span>.qrScanner.show();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status.denied) &#123;</span><br><span class="line">          <span class="comment">//提醒用户权限没有开</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">e: any</span>) =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error :'</span>, e));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 调用scan页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-item</span> (<span class="attr">click</span>)=<span class="string">"gotoScanQRCode()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"qr-scanner"</span> <span class="attr">item-start</span> <span class="attr">color</span>=<span class="string">"dark"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>扫描二维码<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ScanPage &#125; <span class="keyword">from</span> <span class="string">'../scan/scan'</span>; <span class="comment">// 引入新建的扫描页面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public navCtrl: NavController, </span><br><span class="line">  public navParams: NavParams) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到二维码扫描界面，加上'animate': false参数是为了相机能够在整个屏幕显示，否则相机出不来</span></span><br><span class="line">gotoScanQRCode() &#123;</span><br><span class="line">  <span class="keyword">this</span>.navCtrl.push(ScanPage, <span class="literal">null</span>, &#123;<span class="string">'animate'</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-读取版本信息"><a href="#5-4-读取版本信息" class="headerlink" title="5.4 读取版本信息"></a>5.4 读取版本信息</h2><blockquote><p><a href="https://ionicframework.com/docs/native/app-version" target="_blank" rel="noopener">https://ionicframework.com/docs/native/app-version</a></p></blockquote><p><strong>1. 安装插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ionic cordova plugin add cordova-plugin-app-version</span><br><span class="line">$ npm install --save @ionic-native/app-version</span><br></pre></td></tr></table></figure><p><strong>导入app.module.ts</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppVersion &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/app-version'</span>;</span><br><span class="line">providers: [</span><br><span class="line">    AppVersion</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>2. 新建一个页面展示version</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic g page versions</span><br></pre></td></tr></table></figure><p><strong>3. 在app.modules.ts中导入</strong></p><p><strong>4. version页面配置</strong></p><blockquote><p>在浏览器中不可以调试，需要真机调试</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>版本信息<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      AppName: &#123;&#123;appName&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      PackageName: &#123;&#123;packageName&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      VersionCode: &#123;&#123;versionCode&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      VersionNumber: &#123;&#123;versionNumber&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicPage, NavController, NavParams &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppVersion &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/app-version'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'page-versions'</span>,</span><br><span class="line">  templateUrl: <span class="string">'versions.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">VersionsPage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  appName: string;</span><br><span class="line">  packageName: string;</span><br><span class="line">  versionCode: string;</span><br><span class="line">  versionNumber: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public navCtrl: NavController,</span><br><span class="line">    private appVersion: AppVersion,</span><br><span class="line">    public navParams: NavParams) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ionViewDidLoad() &#123;</span><br><span class="line">    <span class="keyword">this</span>.appVersion.getAppName().then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.appName = v;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.appVersion.getPackageName().then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.packageName = v;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.appVersion.getVersionCode().then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.versionCode = v;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.appVersion.getVersionNumber().then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.versionNumber = v;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 其他组件中使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-item</span> (<span class="attr">click</span>)=<span class="string">"gotoVersions()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"help-circle"</span> <span class="attr">item-start</span> <span class="attr">color</span>=<span class="string">"dark"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gotoVersions()&#123;</span><br><span class="line">  <span class="keyword">this</span>.navCtrl.push(newPage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、页面之间的传参"><a href="#六、页面之间的传参" class="headerlink" title="六、页面之间的传参"></a>六、页面之间的传参</h1><h2 id="6-1-js跳转方式"><a href="#6-1-js跳转方式" class="headerlink" title="6.1 js跳转方式"></a>6.1 js跳转方式</h2><blockquote><p>路由跳转通过<code>NavController</code></p></blockquote><p><strong>1. 导入NavController</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NavController&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 注入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(public navCtrl: NavController) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数可以说任意 这里对象形式</span></span><br><span class="line"><span class="keyword">this</span>.navCtrl.push(DetailsPage, &#123;<span class="attr">id</span>: questionId&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>navCtrl</code>传参和<code>ModalCtr</code>传参一样 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.ModalCtrl.create(AnswerPage, &#123;</span><br><span class="line">  id: <span class="keyword">this</span>.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4. 接收参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public id:string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public navCtrl: NavController, public navParams: NavParams) &#123;</span><br><span class="line">  <span class="keyword">this</span>.id = navParams.get(<span class="string">'id'</span>) <span class="comment">// 接收传递过来的参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者这样写</span></span><br><span class="line">ionViewDidLoad()&#123;</span><br><span class="line">   <span class="keyword">this</span>.id = <span class="keyword">this</span>.navParams.get(<span class="string">'id'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-HTML传参"><a href="#6-2-HTML传参" class="headerlink" title="6.2 HTML传参"></a>6.2 HTML传参</h2><p><strong>1. 传参</strong></p><blockquote><p>通过<code>[navPush]</code>打开新页面，<code>[navParams]</code>传递参数。<a href="https://ionicframework.com/docs/api/components/nav/NavPush" target="_blank" rel="noopener">navPush文档</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ChatdetailsPage &#125; <span class="keyword">from</span> <span class="string">'../chatdetails/chatdetails'</span> <span class="comment">// 1.导入页面</span></span><br><span class="line"></span><br><span class="line">public ChatdetailsPage: any; <span class="comment">// 2. 声明类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line">    userinfo = &#123;</span><br><span class="line">        userId: <span class="string">'1234'</span>,</span><br><span class="line">        username: <span class="string">'poetries'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.ChatdetailsPage = ChatdetailsPage; <span class="comment">// 3. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--4. 使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-item</span> [<span class="attr">navPush</span>]=<span class="string">"ChatdetailsPage"</span> [<span class="attr">navParams</span>]=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-avatar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://blog.poetries.top/images/avatar.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-avatar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>poetries<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>聊天组件开发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 获取传递的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(public navCtrl: NavController, public navParams: NavParams) &#123;</span><br><span class="line">  <span class="keyword">this</span>.username = navParams.get(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">this</span>.userid = navParams.get(<span class="string">'userid'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、管道的使用"><a href="#七、管道的使用" class="headerlink" title="七、管道的使用"></a>七、管道的使用</h1><p><strong>1. 新建管道</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic g pipe realativetime # 管道名称</span><br></pre></td></tr></table></figure><p><strong>2. 配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generated class for the RelativetimePipe pipe.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See https://angular.io/api/core/Pipe for more info on Angular Pipes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Pipe(&#123;</span><br><span class="line">  name: <span class="string">'relativetime'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativetimePipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Takes a value and makes it lowercase.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  transform(value: string, ...args) &#123;</span><br><span class="line">    <span class="keyword">return</span> moment(value).toNow() <span class="comment">// 将过去时间变成距离现在多久</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. src/App/modules.ts中全局导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RelativetimePipe &#125; <span class="keyword">from</span> <span class="string">'../pipes/relativetime/relativetime'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    RelativetimePipe</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>4. 使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--relativetime管道名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg.username&#125;&#125;&amp;nbsp;&#123;&#123;msg.time | relativetime&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"># 八、Theme主题全局样式</span><br><span class="line"></span><br><span class="line">## 8.1 全局图标颜色配置</span><br><span class="line"></span><br><span class="line">**1. `theme/variables.scss`中定义**</span><br><span class="line"></span><br><span class="line">```scss</span><br><span class="line">$colors: (</span><br><span class="line">  primary:    #488aff, /**蓝色。优先匹配**/</span><br><span class="line">  secondary:  #32db64, /**第二匹配**/</span><br><span class="line">  danger:     #f53d3d, /**第三匹配**/</span><br><span class="line">  light:      #f4f4f4,</span><br><span class="line">  dark:       #222</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2. 使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在color上使用primary--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"paper"</span> <span class="attr">item-start</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-eb3fdf55a868ee63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="8-2-自定义样式"><a href="#8-2-自定义样式" class="headerlink" title="8.2 自定义样式"></a>8.2 自定义样式</h2><blockquote><p>定义两套样式</p></blockquote><blockquote><p>在<code>theme</code>中新建<code>light.scss</code>。在<code>variables.scss</code>中导入</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义样式</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"light"</span>;</span><br></pre></td></tr></table></figure><h2 id="8-3-全局设置夜间模式切换"><a href="#8-3-全局设置夜间模式切换" class="headerlink" title="8.3 全局设置夜间模式切换"></a>8.3 全局设置夜间模式切换</h2><p><strong>1. 在<code>theme</code>中新建<code>theme.dark.scss</code>。在<code>variables.scss</code>中导入 </strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 根据dark-theme 作用域切换主题 **/</span></span><br><span class="line"><span class="selector-class">.dark-theme</span> &#123;</span><br><span class="line">    ion-<span class="attribute">content</span>,<span class="selector-class">.card</span>,<span class="selector-class">.floatMenu</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#1e2446</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="selector-class">.toolbar-title</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="selector-class">.header</span> <span class="selector-class">.toolbar-background</span> &#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#140414</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#3a3c4b</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="selector-class">.list</span>,<span class="selector-class">.label</span>,<span class="selector-class">.item</span>&#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#3a3c4b</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#FFFFFF</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span>&#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">0.55px</span> solid <span class="number">#2e2749</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item-inner</span>,&#123;</span><br><span class="line">      <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item-block</span>&#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">0.55px</span> solid <span class="number">#2e2749</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>2. 在<code>theme</code>中新建<code>theme.light.scss</code>。在<code>variables.scss</code>中导入</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.light-theme</span> &#123;</span><br><span class="line">    ion-<span class="attribute">content</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#e3e4e7</span></span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      .toolbar-background &#123;</span><br><span class="line">        background-color: <span class="number">#fff</span>;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>3. 在<code>variables.scss</code>中导入</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 这里导入的是两套主题样式 **/</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"theme.light"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"theme.dark"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-list</span> <span class="attr">class</span>=<span class="string">"marginTop"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-list-header</span>&gt;</span></span><br><span class="line">   设置</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-list-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"cloudy-night"</span> <span class="attr">item-start</span> <span class="attr">color</span>=<span class="string">"purple"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>夜间模式<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-toggle</span> <span class="attr">color</span>=<span class="string">"purple"</span> (<span class="attr">ionChange</span>)=<span class="string">"toggleChangeTheme()"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-toggle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4. 新建一个provider来控制app主题的切换</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic provider settings</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// settings.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">'rxjs/Rx'</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingsProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  private theme: BehaviorSubject&lt;string&gt;</span><br><span class="line">  <span class="keyword">constructor</span>(public http: HttpClient) &#123;</span><br><span class="line">    <span class="keyword">this</span>.theme = <span class="keyword">new</span> BehaviorSubject(<span class="string">'light-theme'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  setActiveTheme(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>.theme.next(val)</span><br><span class="line">  &#125;</span><br><span class="line">  getActiveTheme() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.theme.asObservable()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 在<code>app.component.ts</code>中设置</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a5b9fd061ef7462e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>然后在<code>src/app/app.html</code>中设置<code>selectedTheme</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-nav</span> [<span class="attr">root</span>]=<span class="string">"rootPage"</span> [<span class="attr">class</span>]=<span class="string">"selectedTheme"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>6. 在对应组件页面中设置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入settings providers</span></span><br><span class="line"><span class="keyword">import</span> &#123; SettingsProvider &#125; <span class="keyword">from</span> <span class="string">'../../providers/settings/settings'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterPage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 定义变量</span></span><br><span class="line">  public selectedTheme: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public navCtrl: NavController, </span><br><span class="line">                      public navParams: NavParams,</span><br><span class="line">                      // 3. 注入</span><br><span class="line">                      public settings: SettingsProvider</span><br><span class="line">                      public ModalCtrl: ModalController ) &#123;</span><br><span class="line">                        <span class="keyword">super</span>()</span><br><span class="line">                        </span><br><span class="line">                         <span class="comment">// 4. 获取主题</span></span><br><span class="line">                        <span class="keyword">this</span>.settings.getActiveTheme().subscribe(<span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">this</span>.selectedTheme = val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.切换主题</span></span><br><span class="line">  toggleChangeTheme() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.selectedTheme == <span class="string">'dark-theme'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.settings.setActiveTheme(<span class="string">'light-theme'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.settings.setActiveTheme(<span class="string">'dark-theme'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. 在整个app启动的时候设置夜间或者白天模式</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-25929bf847491d29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="九、组件化开发-自定义组件"><a href="#九、组件化开发-自定义组件" class="headerlink" title="九、组件化开发-自定义组件"></a>九、组件化开发-自定义组件</h1><h2 id="9-1-自定义组件"><a href="#9-1-自定义组件" class="headerlink" title="9.1 自定义组件"></a>9.1 自定义组件</h2><p><strong>1. 新建组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建组件</span></span><br><span class="line"></span><br><span class="line">ionic g component emojipicker<span class="comment"># 组件名称</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d70b2c6719198cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>2. 在src/app/app.module.ts中导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentsModule &#125; <span class="keyword">from</span> <span class="string">'../components/components.module'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">  </span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">    HttpClientModule,</span><br><span class="line">    ComponentsModule, <span class="comment">// 导入自定义组件</span></span><br><span class="line">    IonicStorageModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    StatusBar,</span><br><span class="line">    SplashScreen,</span><br><span class="line">    &#123;<span class="attr">provide</span>: ErrorHandler, <span class="attr">useClass</span>: IonicErrorHandler&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 使用</strong></p><blockquote><p>在页面中使用即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8dd8a29d028096d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>4. 组件通过@input()接收外部参数</strong></p><p><strong>4.1 定义组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// datatype 外部传递进来，dataSourceType 本地接收之后的参数命名</span></span><br><span class="line">@Input(<span class="string">'dataType'</span>) dataSourceType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里没有 ionViewDidLoad 生命周期的函数</span></span><br><span class="line">ngAfterContentInit()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.dataSourceType) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.2 使用组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dataType传递给question-list中的Input 接收--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">question-list</span> <span class="attr">dataType</span>=<span class="string">"&#123;&#123;dataType&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">question-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-hidden-style-class-动态控制组件"><a href="#9-2-hidden-style-class-动态控制组件" class="headerlink" title="9.2 [hidden] [style] [class] 动态控制组件"></a>9.2 [hidden] [style] [class] 动态控制组件</h2><p><strong>1. 动态显示隐藏hidden</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;pathForImage(lastImage)&#125;&#125;"</span>  <span class="attr">class</span>=<span class="string">"img"</span> [<span class="attr">hidden</span>]=<span class="string">"lastImage === null"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> [<span class="attr">hidden</span>]=<span class="string">"lastImage !== null"</span>&gt;</span>请从图片库选择一个图片<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 动态绑定style</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-footer</span> <span class="attr">no-border</span> [<span class="attr">style.height</span>]=<span class="string">"isOpenEmojiPicker ? '255px': '55px' "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 动态绑定class属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message right"</span> </span></span><br><span class="line"><span class="tag">    *<span class="attr">ngFor</span>=<span class="string">"let msg of messageList"</span></span></span><br><span class="line"><span class="tag">    [<span class="attr">class.right</span>] = <span class="string">"msg.userId === userId"</span></span></span><br><span class="line"><span class="tag">    [<span class="attr">class.left</span>] = <span class="string">"msg.userId === chatUserId"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十、指令"><a href="#十、指令" class="headerlink" title="十、指令"></a>十、指令</h1><blockquote><p>采用了<code>angular</code>语法 <a href="http://blog.poetries.top/2019/01/09/angular7-intro-summary/#3-5-%E6%95%B0%E6%8D%AE%E5%BE%AA%E7%8E%AF-ngFor">建议参考这篇文章</a></p></blockquote><h1 id="十一、常用组件使用"><a href="#十一、常用组件使用" class="headerlink" title="十一、常用组件使用"></a>十一、常用组件使用</h1><blockquote><p>组件文档 <a href="https://ionicframework.com/docs/components" target="_blank" rel="noopener">https://ionicframework.com/docs/components</a></p></blockquote><h2 id="11-1-ModalController-LoadingController-ToastController"><a href="#11-1-ModalController-LoadingController-ToastController" class="headerlink" title="11.1 ModalController/LoadingController/ToastController"></a>11.1 ModalController/LoadingController/ToastController</h2><p><strong>1. 导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ModalController, LoadingController,  ToastController, ViewController&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 注入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">   public loadingCtr: LoadingController,</span><br><span class="line">   public viewCtr: ViewController,</span><br><span class="line">   public toastCtrl: ToastController,</span><br><span class="line">   public ModalCtrl: ModalController </span><br><span class="line"> ) &#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loading使用</span></span><br><span class="line"><span class="keyword">let</span> loader = loadingCtr.create(&#123;</span><br><span class="line">    content: message, <span class="comment">// 加载的内容</span></span><br><span class="line">    dismissOnPageChange: <span class="literal">true</span> </span><br><span class="line">&#125;)</span><br><span class="line">loader.present() <span class="comment">// // 触发生效</span></span><br><span class="line">loading.dismiss() <span class="comment">// 关闭loading</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// toastCtrl使用</span></span><br><span class="line"><span class="keyword">let</span> toast = toastCtrl.create(&#123;</span><br><span class="line">    message, <span class="comment">// 提示的信息</span></span><br><span class="line">    duration: <span class="number">3000</span>, <span class="comment">// 间隔时间</span></span><br><span class="line">    position: <span class="string">'bottom'</span> <span class="comment">// top buttom left right</span></span><br><span class="line">&#125;)</span><br><span class="line">toast.present() <span class="comment">// 触发生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ModalController </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> modal = <span class="keyword">this</span>.ModalCtrl.create(QuestionPage) <span class="comment">// 弹出的页面</span></span><br><span class="line">modal.present() <span class="comment">// 生效</span></span><br><span class="line"><span class="comment">// 关闭后进行父页面刷新</span></span><br><span class="line">modal.onDidDismiss(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 刷新页面</span></span><br><span class="line">    <span class="keyword">this</span>.loadPage()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// viewCtr</span></span><br><span class="line"><span class="comment">// 关闭当前页面</span></span><br><span class="line"><span class="keyword">this</span>.viewCtr.dismiss()</span><br></pre></td></tr></table></figure><p><strong>4. 封装loading, toast</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common/baseui</span></span><br><span class="line"><span class="keyword">import</span> &#123; Loading, LoadingController, ToastController, Toast&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">BaseUI</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected showLoading(loadingCtr: LoadingController, <span class="attr">message</span>: string): Loading &#123;</span><br><span class="line">    <span class="keyword">let</span> loader = loadingCtr.create(&#123;</span><br><span class="line">        content: message,</span><br><span class="line">        dismissOnPageChange: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    loader.present()</span><br><span class="line">    <span class="keyword">return</span> loader</span><br><span class="line">&#125;</span><br><span class="line">protected showToast(toastCtrl: ToastController, <span class="attr">message</span>: string):Toast &#123;</span><br><span class="line">    <span class="keyword">let</span> toast = toastCtrl.create(&#123;</span><br><span class="line">        message,</span><br><span class="line">        duration: <span class="number">3000</span>,</span><br><span class="line">        position: <span class="string">'bottom'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    toast.present()</span><br><span class="line">    <span class="keyword">return</span> toast</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ModalController, LoadingController,  ToastController&#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiProvider &#125; <span class="keyword">from</span> <span class="string">'../../providers/api/api'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BaseUI &#125; <span class="keyword">from</span> <span class="string">'../../common/baseui'</span> <span class="comment">// 1.导入封装的组件</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'page-home'</span>,</span><br><span class="line">  templateUrl: <span class="string">'home.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">BaseUI</span> </span>&#123; <span class="comment">// 2. 继承BaseUI</span></span><br><span class="line"></span><br><span class="line">  feeds: string[];</span><br><span class="line">  errorMessage: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    public loadingCtr: LoadingController, // 3. 构造</span><br><span class="line">    public api: ApiProvider,</span><br><span class="line">    public toastCtrl: ToastController,  // 3. 构造</span><br><span class="line">    public ModalCtrl: ModalController </span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">super</span>() <span class="comment">// 调用子类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getFeeds() &#123;</span><br><span class="line">    <span class="keyword">let</span> loading = <span class="keyword">super</span>.showLoading(<span class="keyword">this</span>.loadingCtr, <span class="string">'加载中...'</span>) <span class="comment">// 4. 使用loading</span></span><br><span class="line">    <span class="keyword">this</span>.api.getFeeds().subscribe(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(data[<span class="string">'UserId'</span>]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.feeds = data</span><br><span class="line">        loading.dismiss() <span class="comment">// 关闭loading</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 5. 使用toast</span></span><br><span class="line">        <span class="keyword">super</span>.showToast(<span class="keyword">this</span>.toastCtrl, data[<span class="string">'StatusContent'</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,err=&gt;<span class="keyword">this</span>.errorMessage = <span class="xml"><span class="tag">&lt;<span class="name">any</span>&gt;</span>err)</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="11-2-Refresh组件"><a href="#11-2-Refresh组件" class="headerlink" title="11.2 Refresh组件"></a>11.2 Refresh组件</h2><blockquote><p><a href="https://ionicframework.com/docs/api/components/refresher/Refresher/" target="_blank" rel="noopener">刷新组件</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--刷新组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-refresher</span> (<span class="attr">ionRefresh</span>)=<span class="string">"doRefresh($event)"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-refresher-content</span></span></span><br><span class="line"><span class="tag">         <span class="attr">pullingIcon</span>=<span class="string">"arrow-down"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">pullingText</span>=<span class="string">"下拉刷新"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">refreshingSpinner</span>=<span class="string">"circles"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">refreshingText</span>=<span class="string">"数据加载中..."</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-refresher-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-refresher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-card</span> *<span class="attr">ngFor</span>=<span class="string">"let q of questions"</span> (<span class="attr">click</span>)=<span class="string">"gotoDetails(q.IdentityId)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ion-avatar</span> <span class="attr">item-start</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;q.HeadFace&#125;&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ion-avatar</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">              &#123;&#123;q.UserNickName&#125;&#125;发布了该问题</span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">class</span>=<span class="string">"more-button"</span> <span class="attr">name</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;q.ContentTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-card-content</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;q.ContentSummary&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-card-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ion-col</span> <span class="attr">col-8</span> <span class="attr">center</span> <span class="attr">text-left</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-note</span>&gt;</span></span><br><span class="line">                &#123;&#123;q.LikeCount&#125;&#125;&amp;nbsp;赞同&amp;nbsp;&amp;nbsp;.&amp;nbsp;&amp;nbsp;&#123;&#123;q.CommentCount&#125;&#125;&amp;nbsp;评论&amp;nbsp;&amp;nbsp;.&amp;nbsp;&amp;nbsp;关注</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ion-note</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ion-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ion-col</span> <span class="attr">col-4</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doRefresh(refresher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getQuestions() <span class="comment">// 再次请求数据</span></span><br><span class="line">    refresher.complete() <span class="comment">// 停止刷新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-List组件"><a href="#11-3-List组件" class="headerlink" title="11.3 List组件"></a>11.3 List组件</h2><blockquote><p><a href="https://ionicframework.com/docs/components/#lists" target="_blank" rel="noopener">https://ionicframework.com/docs/components/#lists</a></p></blockquote><h2 id="11-4-button组件"><a href="#11-4-button组件" class="headerlink" title="11.4 button组件"></a>11.4 button组件</h2><blockquote><p><a href="https://ionicframework.com/docs/components/#buttons" target="_blank" rel="noopener">https://ionicframework.com/docs/components/#buttons</a></p></blockquote><h2 id="11-5-card组件"><a href="#11-5-card组件" class="headerlink" title="11.5 card组件"></a>11.5 card组件</h2><blockquote><p><a href="https://ionicframework.com/docs/components/#cards" target="_blank" rel="noopener">https://ionicframework.com/docs/components/#cards</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-card</span> *<span class="attr">ngFor</span>=<span class="string">"let f of feeds"</span> (<span class="attr">click</span>)=<span class="string">"gotoDetails(f.IdentityId)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-avatar</span> <span class="attr">item-start</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;f.HeadFace&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-avatar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          &#123;&#123;f.UserNickName&#125;&#125;回答了该问题</span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">class</span>=<span class="string">"more-button"</span> <span class="attr">name</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;f.ContentTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-card-content</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;f.ContentSummary&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-card-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-col</span> <span class="attr">col-8</span> <span class="attr">center</span> <span class="attr">text-left</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-note</span>&gt;</span></span><br><span class="line">            &#123;&#123;f.LikeCount&#125;&#125;&amp;nbsp;赞同&amp;nbsp;&amp;nbsp;.&amp;nbsp;&amp;nbsp;&#123;&#123;f.CommentCount&#125;&#125;&amp;nbsp;评论&amp;nbsp;&amp;nbsp;.&amp;nbsp;&amp;nbsp;关注</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-note</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-col</span> <span class="attr">col-4</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-card</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-6-表单组件"><a href="#11-6-表单组件" class="headerlink" title="11.6 表单组件"></a>11.6 表单组件</h2><blockquote><p><a href="https://ionicframework.com/docs/components/#inputs" target="_blank" rel="noopener">https://ionicframework.com/docs/components/#inputs</a></p></blockquote><h1 id="十二、Ionic打包上线流程"><a href="#十二、Ionic打包上线流程" class="headerlink" title="十二、Ionic打包上线流程"></a>十二、Ionic打包上线流程</h1><h2 id="12-1-图标生成"><a href="#12-1-图标生成" class="headerlink" title="12.1 图标生成"></a>12.1 图标生成</h2><blockquote><p>替换<code>resource/icon.png</code>图标为<code>1024*1024</code></p></blockquote><p><strong>生成图标</strong></p><blockquote><p>第一次生成，需要注册账号才可生成 <a href="https://dashboard.ionicframework.com/signup" target="_blank" rel="noopener">https://dashboard.ionicframework.com/signup</a></p></blockquote><blockquote><p>生成图标的过程可能需要翻墙</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-371b10a6b2edc4d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录执行 不需要进到resources文件夹</span></span><br><span class="line">ionic cordova resources</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-74641ad1216bba91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="12-2-启动图生成"><a href="#12-2-启动图生成" class="headerlink" title="12.2 启动图生成"></a>12.2 启动图生成</h2><blockquote><p>替换resource/splash.png图标为1024*1024</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在项目根目录执行 不需要进到resources文件夹</span><br><span class="line">ionic cordova resources</span><br></pre></td></tr></table></figure><h2 id="12-3-打包前细节处理"><a href="#12-3-打包前细节处理" class="headerlink" title="12.3 打包前细节处理"></a>12.3 打包前细节处理</h2><ol><li><strong>修改index.html中的title</strong></li><li><strong>修改config.xml</strong> 中的信息</li></ol><ul><li><code>widget id=&quot;io.ionic.starter&quot; version=&quot;0.0.1&quot;</code> 修改id（包名）以及<code>version</code></li><li><code>&lt;name&gt;MyApp&lt;/name&gt;</code> 修改<code>app</code>名字</li><li><code>&lt;description&gt;An awesome Ionic/Cordova app.&lt;/description&gt;</code> 修改<code>app</code>描述</li><li><code>&lt;author email=&quot;hi@ionicframework&quot; href=&quot;http://ionicframework.com/&quot;&gt;Ionic Framework Team&lt;/author&gt;</code> 修改<code>email</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-597bf0858198958c.png" alt="image.png"></p><h2 id="12-4-打包部署"><a href="#12-4-打包部署" class="headerlink" title="12.4 打包部署"></a>12.4 打包部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有的平台打包</span></span><br><span class="line">sudo ionic build</span><br></pre></td></tr></table></figure><p><strong>项目文件夹需要执行权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样才可以在xcode中打开调试</span></span><br><span class="line">sudo chomd 777 your_project_name</span><br></pre></td></tr></table></figure><blockquote><p>打开<code>xcode</code>进行<code>ios</code>下的调试</p></blockquote><h2 id="12-5-上架流程"><a href="#12-5-上架流程" class="headerlink" title="12.5 上架流程"></a>12.5 上架流程</h2><h3 id="12-5-1-IOS的打包"><a href="#12-5-1-IOS的打包" class="headerlink" title="12.5.1 IOS的打包"></a>12.5.1 IOS的打包</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ee8903b852215701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>app store</code>上架,需要注册开发者账号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-67aa89a539c4f215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="12-5-2-安卓版本打包"><a href="#12-5-2-安卓版本打包" class="headerlink" title="12.5.2 安卓版本打包"></a>12.5.2 安卓版本打包</h3><blockquote><p>最后生成<code>apk</code>文件。</p></blockquote><p><strong>打包方式</strong></p><blockquote><ul><li>通过<code>Android studio</code>生成</li><li>通过命令生成</li></ul></blockquote><p><strong>1. 需要安装<code>jdk</code>环境，并设置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac上安装</span></span><br><span class="line">brew install jdk java</span><br></pre></td></tr></table></figure><p><strong>2. 配置<code>Gradle</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 GradleBuilder.js</span></span><br><span class="line"></span><br><span class="line">platforms/android/cordova/lib/builders/GradleBuilder.js</span><br></pre></td></tr></table></figure><blockquote><p>找到<code>distributionUrl</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> distributionUrl = process.env[<span class="string">'CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL'</span>] || <span class="string">'https\\://services.gradle.org/distributions/gradle-4.1-all.zip'</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>把这个资源下载下来(具体下载哪个版本，根据<code>distributionUrl</code>来下载)，放到<code>platforms/android/gradle</code></li><li>下载地址：<a href="https://services.gradle.org/distributions/gradle-4.1-all.zip" target="_blank" rel="noopener">https://services.gradle.org/distributions/gradle-4.1-all.zip</a></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-34e0956118d63551.png" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释</span></span><br><span class="line"><span class="comment">// var distributionUrl = process.env['CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL'] || 'https\\://services.gradle.org/distributions/gradle-4.1-all.zip';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line"><span class="keyword">var</span> distributionUrl = process.env[<span class="string">'CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL'</span>] || <span class="string">'../gradle-4.1-all.zip'</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 配置Gradle的环境变量</strong></p><p><strong>第一步</strong></p><blockquote><p>把上一步下载的<code>Gradle</code>把放到任意目录，这里我放的路径<code>/Users/poetry/cordova/gradle-4.1</code></p></blockquote><p><strong>第二步: 新增环境变量</strong></p><blockquote><p>在<code>mac</code>下编辑<code>.bash_profile</code>配置文件， <code>sudo vi  ~/.bash_profile</code>。新增一个环境变量，这里的<code>$HOME</code>就是<code>/Users/poetry</code>路径</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-dd5f9e774031dd00.png" alt="image.png"></p><p><strong>第三步: 使环境变量生效</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>如果你的终端使用<code>iTerm</code>，需要加载一条命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-db8dd1a25b232020.png" alt="image.png"></p><p><strong>第四步：新开一个终端</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行下面命令看环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cebfc20e00cfff1c.png" alt="image.png"></p><p><strong>第五步：测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-951f91866ba4d191.png" alt="image.png"></p><p><strong>4. debug测试版打包</strong></p><blockquote><p>查看当前打包环境<code>ionic info</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ionic:</span><br><span class="line"></span><br><span class="line">   ionic (Ionic CLI)  : 4.7.1</span><br><span class="line">   Ionic Framework    : ionic-angular 3.9.2</span><br><span class="line">   @ionic/app-scripts : 3.2.1</span><br><span class="line"></span><br><span class="line">Cordova:</span><br><span class="line"></span><br><span class="line">   cordova (Cordova CLI) : 8.1.2 (cordova-lib@8.1.1)</span><br><span class="line">   Cordova Platforms     : android 7.1.4, browser 5.0.4, ios 4.5.5</span><br><span class="line">   Cordova Plugins       : cordova-plugin-ionic-webview 1.2.1, (and 11 other plugins)</span><br><span class="line"></span><br><span class="line">System:</span><br><span class="line"></span><br><span class="line">   Android SDK Tools : 26.1.1</span><br><span class="line">   NodeJS            : v9.10.0</span><br><span class="line">   npm               : 5.6.0</span><br><span class="line">   OS                : macOS Mojave</span><br><span class="line">   Xcode             : Xcode 10.1 Build version 10B61</span><br></pre></td></tr></table></figure><blockquote><p>注意：需要前面几步环境配置好了，才可以正常执行打包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行这条命令默认打包的是debug版本</span></span><br><span class="line">cordova build android</span><br></pre></td></tr></table></figure><blockquote><p>打包后输出<code>apk</code>路径 <code>platforms/android/app/build/outputs/apk/debug/</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-14269923256eada2.png" alt="image.png"></p><blockquote><p>生成的<code>apk</code>。此时可以把<code>apk</code>，拖入<code>Genymotion</code>模拟器调试</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8522876e4b378650.png" alt="image.png"></p><p><strong>5. 正式版本打包</strong></p><p><strong>5.1 未签名版本</strong></p><blockquote><p>此时打包的<code>apk</code>是没有签名的版本，不可以在手机上安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成未签名版</span></span><br><span class="line">ionic cordova build android  --release</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a1c678cfc6a87dc0.png" alt="image.png"></p><blockquote><p>打包后输出<code>apk</code>路径 <code>platforms/android/app/build/outputs/apk/release</code></p></blockquote><blockquote><p>在手机安装示意图，签名版不能安装</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e8c3274ef110d775.png" alt="image.png"></p><p><strong>5.2 签名版本apk打包</strong></p><p><strong>签名步骤</strong></p><p><strong>1. 创建私钥，项目根目录下执行命令(记住设置的别名)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore [自定义秘钥文件名，如 my-app].jks -keyalg RSA -keysize 2048 -validity 36500 -alias [自定义app别名，如 my-alias]</span><br></pre></td></tr></table></figure><ul><li><code>-genkey</code>        意味着执行的是生成数字证书操作</li><li><code>v</code>            表示将生成证书的详细信息打印出来，显示在<code>dos</code>窗口中</li><li><code>-keyalg RSA</code>        表示生成密钥文件所采用的算法为<code>RSA</code></li><li><code>-validity 36500</code>        表示该数字证书的有效期为<code>36500</code>天</li></ul><p><strong>2. 接下来会让设置秘钥库口令(记住秘钥)：</strong></p><blockquote><p>秘钥库就是你的密码</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9a035fc6f5af1c36.png" alt="image.png"></p><p><strong>3. 设置秘钥库口令后会让输入一些APP信息</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3cdb04cec3db747e.png" alt="image.png"></p><p><strong>4. 按照提示依次输入后会在你的项目根目录生成秘钥文件 my-app.jks</strong></p><blockquote><p>把之前生成好的<code>platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk</code>复制到项目根目录，这样和<code>my-app.jks</code>同一目录签名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore [上步生成的xxx.jks] app-release-unsigned.apk [步骤1命令中设置的app别名，如 my-alias]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里是上面的示例：执行签名命令</span></span><br><span class="line">keytool -genkey -v -keystore my-app.jks -keyalg RSA -keysize 2048 -validity 36500 -<span class="built_in">alias</span> my-app</span><br></pre></td></tr></table></figure><p><strong>5. 验证应用是否签名成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verify -verbose -certs 你的apk名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">jarsigner -verify -verbose -certs app-release-unsigned.apk</span><br></pre></td></tr></table></figure><p><strong>5. 优化 apk 文件</strong></p><p><strong>5.1 首先需要配置环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里以mac下的iTerm2来配置</span></span><br><span class="line">vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/build-tools/27.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里其实是安卓的路径,我们需要给zipalign配置环境变量</span></span><br><span class="line">/Users/poetry/Library/Android/sdk/build-tools/27.0.3/zipalign</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使得bash_profile生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为使用到iTerm2需要在.zshrc加入.bash_profile</span></span><br><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入bash_profile</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后新建窗口echo $PATH就看到环境变量配置了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否生效</span></span><br><span class="line">zipalign -v</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2fbdaea1e10a67d3.png" alt="echo $PATH"></p><p><strong>5.2 在项目根目录执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义最终生成的apk的名字，如 ionicQa.apk</span></span><br><span class="line">zipalign -v 4 app-release-unsigned.apk ionicQa.apk</span><br></pre></td></tr></table></figure><p><strong>6. 遇到的问题</strong></p><p><strong>6.1 无法打开 jar 文件</strong></p><blockquote><p>将 秘钥文件 <code>xxx.jks</code> 与 <code>android-release-unsigned.apk</code> 放在同一目录下，放到项目根目录就好了</p></blockquote><blockquote><p>此时就构建好了应用，这里是<a href="https://github.com/poetries/ionic-qa-app/blob/master/ionicQa.apk" target="_blank" rel="noopener">构建的应用</a></p></blockquote><h3 id="12-5-3-网站微信端发布"><a href="#12-5-3-网站微信端发布" class="headerlink" title="12.5.3 网站微信端发布"></a>12.5.3 网站微信端发布</h3><blockquote><p>打包成一个静态站点方便部署</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ionic build</span><br></pre></td></tr></table></figure><blockquote><p>静态网站部署的站点资源路径 <code>platform/browser/www</code></p></blockquote><h1 id="十三、一些问题记录"><a href="#十三、一些问题记录" class="headerlink" title="十三、一些问题记录"></a>十三、一些问题记录</h1><h2 id="13-1-问题"><a href="#13-1-问题" class="headerlink" title="13.1 问题"></a>13.1 问题</h2><p><strong>1. 【ionic3】刷新页面，ws中断</strong></p><blockquote><p>解决办法升级<code>@ionic/app-scripts</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ionic/app-scripts@latest --save-dev</span><br></pre></td></tr></table></figure><h2 id="13-2-技巧"><a href="#13-2-技巧" class="headerlink" title="13.2 技巧"></a>13.2 技巧</h2><p><strong>读取可空对象</strong></p><blockquote><p><code>question?.ContentTitle</code> <code>question</code>可能返回空</p></blockquote><h1 id="十四、更多参考"><a href="#十四、更多参考" class="headerlink" title="十四、更多参考"></a>十四、更多参考</h1><h2 id="14-1-项目学习"><a href="#14-1-项目学习" class="headerlink" title="14.1 项目学习"></a>14.1 项目学习</h2><blockquote><p><a href="https://github.com/poetries/ionic-qa-app" target="_blank" rel="noopener">https://github.com/poetries/ionic-qa-app</a></p></blockquote><h2 id="14-2-文档参考"><a href="#14-2-文档参考" class="headerlink" title="14.2 文档参考"></a>14.2 文档参考</h2><ul><li><a href="https://ionicframework.com/docs/" target="_blank" rel="noopener">Ionic官方文档</a></li><li><a href="https://github.com/ionic-team" target="_blank" rel="noopener">ionic官方GitHub</a></li><li><a href="http://www.runoob.com/ionic/ionic-tutorial.html" target="_blank" rel="noopener">Ionic菜鸟教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;折腾了一段时间&lt;code&gt;Typescript&lt;/code&gt;、&lt;code&gt;angular&lt;/code&gt;基础，终于可以学&lt;code&gt;Ionic4&lt;/code&gt;了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;没有&lt;code&gt;an
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Ionic" scheme="http://blog.poetries.top/tags/Ionic/"/>
    
      <category term="Angular" scheme="http://blog.poetries.top/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular7入门总结篇</title>
    <link href="http://blog.poetries.top/2019/01/09/angular7-intro-summary/"/>
    <id>http://blog.poetries.top/2019/01/09/angular7-intro-summary/</id>
    <published>2019-01-09T08:55:24.000Z</published>
    <updated>2019-01-25T09:06:54.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学<code>Ionic4</code>，不得不学习<code>angular</code>、<code>Typescript</code>基础知识，这里简单总结记录一下。</p></blockquote><h1 id="一、Angular-介绍"><a href="#一、Angular-介绍" class="headerlink" title="一、Angular 介绍"></a>一、Angular 介绍</h1><blockquote><p><code>Angualr</code> 是一款来自谷歌的开源的 <code>web</code> 前端框架，诞生于 <code>2009</code> 年，由 <code>Misko Hevery</code> 等 人创建，后为 <code>Google</code> 所收购。是一款优秀的前端 <code>JS</code> 框架，已经被用于 <code>Google</code> 的多款产品当中。</p></blockquote><ul><li>根据项目数统计 <code>angular(1.x 、2.x 、4.x、5.x、6.x、7.x)</code>是现在网上使用量最大的框架</li><li><code>Angualr</code> 基于 <code>TypeScript</code> 和 <code>react</code>、<code>vue</code> 相比, <code>Angular</code> 更适合中大型企业级项目。</li></ul><blockquote><p>目前 2018 年 11 月 25 日 <code>angular</code> 最新版本 <code>angular7.x</code>。根据官方介绍，<code>Angular</code> 每过几个月 就会更新一个版本。此教程同样适用于后期更新的 <code>Angular8.x</code>、<code>Angular9.x</code> </p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-981a84fee307935b.png" alt="image.png"></p><p><strong>学习 Angular 必备基础</strong></p><blockquote><p>必备基础:<code>html</code> 、<code>css</code> 、<code>js</code>、<code>es6</code>、<code>Typescript</code></p></blockquote><h1 id="二、Angular-环境搭建及创建项目"><a href="#二、Angular-环境搭建及创建项目" class="headerlink" title="二、Angular 环境搭建及创建项目"></a>二、Angular 环境搭建及创建项目</h1><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h2><p><strong>1. 安装 nodejs</strong></p><blockquote><p>安装 <code>angular</code> 的计算机上面必须安装最新的 <code>nodejs</code>–注意安装 <code>nodejs</code> 稳定版本</p></blockquote><p><strong>2. 安装 cnpm</strong></p><blockquote><p>npm 可能安装失败建议先用 <code>npm</code> 安装一下 <code>cnpm</code> 用淘宝镜像安装<code>https://npm.taobao.org</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>3. 使用 npm/cnpm 命令安装 angular/cli</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli </span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">cnpm install -g @angular/cli</span><br></pre></td></tr></table></figure><blockquote><p><code>ng v</code> 查看版本信息 </p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-03bfdfb5fbe33072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="angular cli"></p><p><strong>4. 安装插件</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2bdda6e300581705.png" alt="image.png"></p><p><strong>5. 安装chrome扩展</strong></p><blockquote><p><a href="https://augury.angular.io/" target="_blank" rel="noopener">https://augury.angular.io/</a></p></blockquote><blockquote><p> 用<code>augury</code>查看<code>component</code>结构，更方便调试</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0deeca08d9802b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2 创建项目"></a>2.2 创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">ng new my-app</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><h2 id="2-3-目录结构分析"><a href="#2-3-目录结构分析" class="headerlink" title="2.3 目录结构分析"></a>2.3 目录结构分析</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2cb7c7aa06aa3e2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>详情参考 <a href="https://www.angular.cn/guide/file-structure" target="_blank" rel="noopener">https://www.angular.cn/guide/file-structure</a></p></blockquote><p><strong>app目录（重点）</strong></p><blockquote><p><code>app</code>目录是我们要编写的代码目录。我们写的代码都是放在这个目录。<br>一个<code>Angular</code>程序至少需要一个模块和一个组件。在我们新建项目的时候命令行已经默认生成出来了</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7a8a287d49ec4026.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>app.component.ts</code>：这个文件表示组件， </li><li>组件是<code>Angular</code>应用的基本构建模块，可以理解为一段带有业务逻辑和数据的<code>Html</code><br>我们来看看<code>app.component.ts</code>中的代码，并解释下代码的意义</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-222e69dfde39a005.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app.component.ts"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这里是从Angular核心模块里面引入了component装饰器*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用装饰器定义了一个组件以及组件的元数据  所有的组件都必须使用这个装饰器来注解*/</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">  <span class="comment">/*组件元数据  Angular会通过这里面的属性来渲染组件并执行逻辑</span></span><br><span class="line"><span class="comment">  * selector就是css选择器，表示这个组件可以通过app-root来调用，index.html中有个&lt;app-root&gt;Loading...&lt;/app-root&gt;标签，这个标签用来展示该组件的内容</span></span><br><span class="line"><span class="comment">  *templateUrl  组件的模板，定义了组件的布局和内容</span></span><br><span class="line"><span class="comment">  *styleUrls   该模板引用那个css样式</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*AppComponent本来就是一个普通的typescript类，但是上面的组件元数据装饰器告诉Angular，AppComponent是一个组件，需要把一些元数据附加到这个类上，Angular就会把AppComponent当组件来处理*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*这个类实际上就是该组件的控制器，我们的业务逻辑就是在这个类中编写*/</span></span><br><span class="line">  title = <span class="string">'学习Angular'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件相关的概念</strong></p><ol><li>组件元数据装饰器（<code>@Component</code>）<br>简称组件装饰器，用来告知<code>Angular</code>框架如何处理一个<code>TypeScript</code>类.<br><code>Component</code>装饰器包含多个属性，这些属性的值叫做元数据，<code>Angular</code>会根据这些元数据的值来渲染组件并执行组件的逻辑</li><li>模板（<code>Template</code>）<br>我们可以通过组件自带的模板来定义组件的外观，模板以<code>html</code>的形式存在，告诉<code>Angular</code>如何来渲染组件，一般来说，模板看起来很像<code>html</code>，但是我们可以在模板中使用<code>Angular</code>的数据绑定语法，来呈现控制器中的数据。</li><li>控制器（<code>controller</code>）<br>控制器就是一个普通的<code>typescript</code>类，他会被<code>@Component</code>来装饰，控制器会包含组件所有的属性和方法，绝大多数的业务逻辑都是写在控制器里的。控制器通过数据绑定与模板来通讯，模板展现控制器的数据，控制器处理模板上发生的事件。</li></ol><p><strong>装饰器</strong>，模板和控制器是组件的必备要素。还有一些可选的元素，比如：</p><ul><li>输入属性（<code>@inputs</code>）:是用来接收外部传入的数据的,<code>Angular</code>的程序结构就是一个组件树，输入属性允许在组件树种传递数据<br>提供器（<code>providers</code>）：这个是用来做依赖注入的 </li><li>生命周期钩子（<code>LifeCycle Hooks</code>）：一个组件从创建到销毁的过程中会有多个钩子会被触发，类似于Android中的<code>Activity</code>的生命周期 </li><li>样式表：组件可以关联一些样式表 </li><li>动画（<code>Animations</code>）： <code>Angular</code>提供了一个动画包来帮助我们方便的创建一些跟组件相关的动画效果，比如淡入淡出等 </li><li>输出属性（<code>@Outputs</code>）：用来定义一些其他组件可能需要的事件或者用来在组件之间共享数据</li></ul><blockquote><p>组件的中关系就如下图所示</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7223faf5cf1f3922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>下面我们来看看模块文件 </p><ul><li><code>app.module.ts</code>：这个文件表示模块</li><li>与<code>AppComponent</code>类似，模块也需要装饰器来装饰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HeroesComponent &#125; <span class="keyword">from</span> <span class="string">'./heroes/heroes.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">   <span class="comment">// 声明模块里有什么东西 只能声明：组件/指令/管道</span></span><br><span class="line">    AppComponent,</span><br><span class="line">    HeroesComponent</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 声明该模块所依赖的模块</span></span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 默认情况下是空的</span></span><br><span class="line">  providers: [],</span><br><span class="line">  <span class="comment">// 声明模块的主组件是什么</span></span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Angular-cli"><a href="#2-4-Angular-cli" class="headerlink" title="2.4 Angular cli"></a>2.4 Angular cli</h2><blockquote><p><a href="https://cli.angular.io" target="_blank" rel="noopener">https://cli.angular.io</a></p></blockquote><blockquote><p>通过<code>ng g</code>列出当前命令</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-77b3c17abd045ecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ng g"></p><p><strong>1. 创建新组件 <code>ng generate component component-name</code></strong></p><blockquote><p><code>ng g component components/header</code> 指定生成到哪个目录</p></blockquote><p>该命令会把生成的组件，添加到 <code>src/app/app.module.ts</code> 文件中 <code>@NgModule</code> 的 <code>declarations</code> 列表中声明</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5b49e4ebc275a90e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>2. 使用 Angular CLI 创建一个名叫 hero 的服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate service hero</span><br></pre></td></tr></table></figure><blockquote><p>该命令会在 <code>src/app/hero.service.ts</code> 中生成 <code>HeroService</code> 类的骨架。 <code>HeroService</code> 类的代码如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 添加 AppRoutingModule</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate <span class="built_in">module</span> app-routing --flat --<span class="built_in">module</span>=app</span><br></pre></td></tr></table></figure><ul><li><code>--flat</code> 把这个文件放进了 <code>src/app</code> 中，而不是单独的目录中。</li><li><code>--module=app</code> 告诉 <code>CLI</code> 把它注册到 <code>AppModule</code>的 <code>imports</code> 数组中。</li></ul><p>生成的文件是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">src/app/app-routing.module.ts (generated)</span><br><span class="line">content_copy</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="三、angular组件及组件里的模板"><a href="#三、angular组件及组件里的模板" class="headerlink" title="三、angular组件及组件里的模板"></a>三、angular组件及组件里的模板</h1><h2 id="3-1-创建angualr组件"><a href="#3-1-创建angualr组件" class="headerlink" title="3.1 创建angualr组件"></a>3.1 创建angualr组件</h2><p><strong>1. 创建组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g component components/header</span><br></pre></td></tr></table></figure><p><strong>2. 使用组件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-Angular-绑定数据"><a href="#3-2-Angular-绑定数据" class="headerlink" title="3.2 Angular 绑定数据"></a>3.2 Angular 绑定数据</h2><p><strong>1. 数据文本绑定</strong></p><blockquote><p>定义数据几种方式</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-78d5b2e181f0c2ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定义数据几种方式"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 绑定<code>HTML</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.h=<span class="string">"&lt;h2&gt;这是一个 h2 用[innerHTML]来解析&lt;/h2&gt;"</span></span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">innerHTML</span>]=<span class="string">"h"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-声明属性的几种方式"><a href="#3-3-声明属性的几种方式" class="headerlink" title="3.3 声明属性的几种方式"></a>3.3 声明属性的几种方式</h2><ul><li><code>public</code> 共有（默认） 可以在类里外使用</li><li><code>protected</code> 保护类型 只能在当前类和子类中使用</li><li><code>private</code> 私有类型 只能在当期类使用</li></ul><h2 id="3-4-绑定属性"><a href="#3-4-绑定属性" class="headerlink" title="3.4 绑定属性"></a>3.4 绑定属性</h2><blockquote><p>用<code>[]</code>包裹</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">id</span>]=<span class="string">"id"</span> [<span class="attr">title</span>]=<span class="string">"msg"</span>&gt;</span>调试工具看看我的属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="https://upload-images.jianshu.io/upload_images/1480597-305cca1bb2c88059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="3-5-数据循环-ngFor"><a href="#3-5-数据循环-ngFor" class="headerlink" title="3.5 数据循环 *ngFor"></a>3.5 数据循环 *ngFor</h2><p><strong>1. *ngFor 普通循环</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  arr = [&#123; <span class="attr">name</span>: <span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'jing'</span> , <span class="attr">age</span>: <span class="number">31</span>&#125;];</span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngIf</span>=<span class="string">"arr.length&gt;0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of arr"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;- &#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 循环的时候设置 key</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list;let i = index;"</span>&gt;</span> <span class="comment">&lt;!-- 把索引index赋给i --&gt;</span></span><br><span class="line">     &#123;&#123;item&#125;&#125; --&#123;&#123;i&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. template 循环数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">template</span>=<span class="string">"ngFor let item of list"</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-6-条件判断-ngIf"><a href="#3-6-条件判断-ngIf" class="headerlink" title="3.6 条件判断 *ngIf"></a>3.6 条件判断 *ngIf</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">"list.length &gt; 3"</span>&gt;</span>这是 ngIF 判断是否显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">template</span>=<span class="string">"ngIf list.length &gt; 3"</span>&gt;</span>这是 ngIF 判断是否显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7-ngSwitch"><a href="#3-7-ngSwitch" class="headerlink" title="3.7 *ngSwitch"></a>3.7 *ngSwitch</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> [<span class="attr">ngSwitch</span>]=<span class="string">"score"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"1"</span>&gt;</span>已支付<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"2"</span>&gt;</span>订单已经确认<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"3"</span>&gt;</span>已发货<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>无效<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-8-执行事件-click-”getData-”"><a href="#3-8-执行事件-click-”getData-”" class="headerlink" title="3.8 执行事件 (click)=”getData()”"></a>3.8 执行事件 (click)=”getData()”</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"getData()"</span>&gt;</span> 点击按钮触发事件</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"setData()"</span>&gt;</span> 点击按钮设置数据</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getData()&#123; <span class="comment">/*自定义方法获取数据*/</span> <span class="comment">//获取</span></span><br><span class="line">  alert(<span class="keyword">this</span>.msg);</span><br><span class="line">&#125; </span><br><span class="line">setData()&#123;</span><br><span class="line">    <span class="comment">//设置值</span></span><br><span class="line">    <span class="keyword">this</span>.msg=<span class="string">'这是设置的值'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-表单事件"><a href="#3-9-表单事件" class="headerlink" title="3.9 表单事件"></a>3.9 表单事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">(<span class="attr">keyup</span>)=<span class="string">"keyUpFn($event)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> (<span class="attr">keyup</span>)=<span class="string">"keyUpFn($event)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyUpFn(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-10-双向数据绑定"><a href="#3-10-双向数据绑定" class="headerlink" title="3.10 双向数据绑定"></a>3.10 双向数据绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"inputVal"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意引入:<code>FormsModule</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span></span><br><span class="line"></span><br><span class="line">NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    HeaderComponent,</span><br><span class="line">    FooterComponent,</span><br><span class="line">    NewsComponent</span><br><span class="line">  ], </span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"inputValue"</span>/&gt;</span> &#123;&#123;inputValue&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-11-ngClass-、-ngStyle"><a href="#3-11-ngClass-、-ngStyle" class="headerlink" title="3. 11 [ngClass]、[ngStyle]"></a>3. 11 [ngClass]、[ngStyle]</h2><p><strong>1. [ngClass]:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'red': true, 'blue': false&#125;"</span>&gt;</span> </span><br><span class="line">    这是一个 div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public flag=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'red': flag, 'blue': !flag&#125;"</span>&gt;</span></span><br><span class="line">这是一个 div <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of arr, let i = index"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'red': i==0&#125;"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. [ngStyle]:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"&#123;'background-color':'green'&#125;"</span>&gt;</span>你好 ngStyle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public attr=<span class="string">'red'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"&#123;'background-color':attr&#125;"</span>&gt;</span>你好 ngStyle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-12-管道"><a href="#3-12-管道" class="headerlink" title="3.12 管道"></a>3.12 管道</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;today | date:'yyyy-MM-dd HH:mm:ss' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其他管道</strong></p><blockquote><p><code>angular</code>中的管道(<code>pipe</code>)是用来对输入的数据进行处理，如大小写转换、数值和日期格式化等</p></blockquote><blockquote><p><code>angular</code>中的管道(<code>pipe</code>) 以及自定义管道适用于<code>angular4 angualr5 angualr6 angular7</code></p></blockquote><p>常用的管道（<code>pipe</code>）有</p><p><strong>1. 大小写转换</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--转换成大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;str | uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--转换成小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;str | lowercase&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 日期格式转换</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;today | date:'yyyy-MM-dd HH:mm:ss' &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 小数位数</strong></p><blockquote><p>接收的参数格式为<code>{最少整数位数}.{最少小数位数}-{最多小数位数}</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--保留2~4位小数--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;p | number:'1.2-4'&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4. JavaScript 对象序列化</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; &#123; name: 'semlinker' &#125; | json &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- Output: &#123; "name": "semlinker" &#125; --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5. slice</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 'semlinker' | slice:0:3 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- Output: sem --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>6. 管道链</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123; 'semlinker' | slice:0:3 | uppercase &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Output: SEM --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>7. 自定义管道</strong></p><p>自定义管道的步骤：</p><ul><li>使用 <code>@Pipe</code> 装饰器定义 <code>Pipe</code> 的 <code>metadata</code> 信息，如 <code>Pipe</code> 的名称 - 即 <code>name</code> 属性</li><li>实现 <code>PipeTransform</code> 接口中定义的 <code>transform</code> 方法</li></ul><p><strong>7.1 WelcomePipe 定义</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">[@Pipe](<span class="regexp">/user/</span>Pipe)(&#123; <span class="attr">name</span>: <span class="string">'welcome'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomePipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  transform(value: string): string &#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid pipe argument for WelcomePipe'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Welcome to "</span> + value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.2 WelcomePipe 使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">ngNonBindable</span>&gt;</span>&#123;&#123; 'semlinker' | welcome &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 'semlinker' | welcome &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- Output: Welcome to semlinker --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>7.3 RepeatPipe 定义</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">[@Pipe](<span class="regexp">/user/</span>Pipe)(&#123;<span class="attr">name</span>: <span class="string">'repeat'</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">    transform(value: any, <span class="attr">times</span>: number) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.repeat(times);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.4 RepeatPipe 使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">ngNonBindable</span>&gt;</span></span><br><span class="line">   &#123;&#123; 'lo' | repeat:3 &#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; 'lo' | repeat:3 &#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- Output: lololo --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-13-实现一个人员登记表单-案例"><a href="#3-13-实现一个人员登记表单-案例" class="headerlink" title="3.13 实现一个人员登记表单-案例"></a>3.13 实现一个人员登记表单-案例</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a90dfacfafe60f6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建组件</span></span><br><span class="line">ng g component components/form</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-form'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./form.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./form.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FormComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  public peopleInfo:any = &#123;</span><br><span class="line">    username: <span class="string">''</span>,</span><br><span class="line">    sex: <span class="string">'2'</span>,</span><br><span class="line">    cityList: [<span class="string">'北京'</span>, <span class="string">'上海'</span>, <span class="string">'深圳'</span>],</span><br><span class="line">    city: <span class="string">'上海'</span>,</span><br><span class="line"></span><br><span class="line">    hobby:[&#123;</span><br><span class="line">          title: <span class="string">'吃饭'</span>,</span><br><span class="line">          checked:<span class="literal">false</span></span><br><span class="line">      &#125;,&#123;</span><br><span class="line">            title:<span class="string">'睡觉'</span>,</span><br><span class="line">            checked:<span class="literal">false</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"></span><br><span class="line">          title:<span class="string">'敲代码'</span>,</span><br><span class="line">          checked:<span class="literal">true</span></span><br><span class="line">      &#125;],</span><br><span class="line"></span><br><span class="line">      mark:<span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  doSubmit()&#123;</span><br><span class="line">    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">    jquery  dom操作</span></span><br><span class="line"><span class="comment">      &lt;input type="text" id="username" /&gt;</span></span><br><span class="line"><span class="comment">      let usernameDom:any=document.getElementById('username');</span></span><br><span class="line"><span class="comment">      console.log(usernameDom.value);    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.peopleInfo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员登记系统<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"people_list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓 名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"peopleInfo.username"</span> <span class="attr">value</span>=<span class="string">"fonm_input"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性 别：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex1"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"peopleInfo.sex"</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex1"</span>&gt;</span>男 <span class="tag">&lt;/<span class="name">label</span>&gt;</span>　　　</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">id</span>=<span class="string">"sex2"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"peopleInfo.sex"</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex2"</span>&gt;</span>女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    城 市：</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"peopleInfo.city"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> [<span class="attr">value</span>]=<span class="string">"item"</span> *<span class="attr">ngFor</span>=<span class="string">"let item of peopleInfo.cityList"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        爱 好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngFor</span>=<span class="string">"let item of peopleInfo.hobby;let key=index;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  [<span class="attr">id</span>]=<span class="string">"'check'+key"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.checked"</span>/&gt;</span> <span class="tag">&lt;<span class="name">label</span> [<span class="attr">for</span>]=<span class="string">"'check'+key"</span>&gt;</span> &#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &amp;nbsp;&amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       备 注：</span><br><span class="line">       <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"mark"</span> <span class="attr">id</span>=<span class="string">"mark"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"peopleInfo.mark"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"doSubmit()"</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>获取表单的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    &#123;&#123;peopleInfo | json&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.people_list</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="selector-class">.fonm_input</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.submit</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>:<span class="number">120px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-14-实现一个完整的ToDo-案例"><a href="#3-14-实现一个完整的ToDo-案例" class="headerlink" title="3.14 实现一个完整的ToDo-案例"></a>3.14 实现一个完整的ToDo-案例</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-591bc5ea4d48865d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>基础版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建组件</span></span><br><span class="line">ng g component components/todo</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>todoList<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todolist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form_input"</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"keyword"</span> (<span class="attr">keyup</span>)=<span class="string">"doAdd($event)"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of todolist;let key=index;"</span> [<span class="attr">hidden</span>]=<span class="string">"item.status==1"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.status"</span> /&gt;</span>  &#123;&#123;item.title&#125;&#125;   ------ <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"deleteData(key)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>已完成事项<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of todolist;let key=index;"</span> [<span class="attr">hidden</span>]=<span class="string">"item.status==0"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.status"</span> /&gt;</span>  &#123;&#123;item.title&#125;&#125;   ------ <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"deleteData(key)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./todo.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  public keyword: string;</span><br><span class="line"></span><br><span class="line">  public todolist: any[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  doAdd(e)&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.todolistHasKeyword(<span class="keyword">this</span>.todolist, <span class="keyword">this</span>.keyword))&#123;</span><br><span class="line">          <span class="keyword">this</span>.todolist.push(&#123;</span><br><span class="line">            title: <span class="keyword">this</span>.keyword,</span><br><span class="line">            status: <span class="number">0</span>                   <span class="comment">//0表示代办事项  1表示已完成事项</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.keyword=<span class="string">''</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          alert(<span class="string">'数据已经存在'</span>);</span><br><span class="line">          <span class="keyword">this</span>.keyword=<span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteData(key)&#123;</span><br><span class="line">    <span class="keyword">this</span>.todolist.splice(key,<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果数组里面有keyword返回true  否则返回false</span></span><br><span class="line">  todolistHasKeyword(todolist:any, <span class="attr">keyword</span>:any)&#123;</span><br><span class="line">    <span class="comment">//异步  会存在问题</span></span><br><span class="line">    <span class="comment">// todolist.forEach(value =&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   if(value.title==keyword)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//       return true;</span></span><br><span class="line">    <span class="comment">//   &#125; </span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="keyword">if</span>(!keyword)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;todolist.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(todolist[i].title==keyword)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todolist</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="selector-class">.form_input</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-15-搜索缓存数据-案例"><a href="#3-15-搜索缓存数据-案例" class="headerlink" title="3.15 搜索缓存数据-案例"></a>3.15 搜索缓存数据-案例</h2><p><strong>基础版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建组件</span></span><br><span class="line">ng g component components/search</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"keyword"</span> /&gt;</span>  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"doSearch()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of historyList;let key=index;"</span>&gt;</span>&#123;&#123;item&#125;&#125;   ------ <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"deleteHistroy(key)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-search'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./search.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./search.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  public keyword: string;</span><br><span class="line">  public historyList: any[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  doSearch()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.historyList.indexOf(<span class="keyword">this</span>.keyword)==<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.historyList.push(<span class="keyword">this</span>.keyword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.keyword = <span class="string">''</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">  deleteHistroy(key)&#123;</span><br><span class="line">      alert(key);</span><br><span class="line">      <span class="keyword">this</span>.historyList.splice(key,<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="selector-tag">input</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">button</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Angular-中的服务"><a href="#四、Angular-中的服务" class="headerlink" title="四、Angular 中的服务"></a>四、Angular 中的服务</h1><h2 id="4-1-服务"><a href="#4-1-服务" class="headerlink" title="4.1 服务"></a>4.1 服务</h2><blockquote><p>定义公共的方法，使得方法在组件之间共享调用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ccc34dcac462199c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>1. 创建服务命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ng g service my-new-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建到指定目录下面</span></span><br><span class="line">ng g service services/storage</span><br></pre></td></tr></table></figure><p><strong>2. app.module.ts 里面引入创建的服务</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts 里面引入创建的服务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; StorageService &#125; <span class="keyword">from</span> <span class="string">'./services/storage.service'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NgModule 里面的 providers 里面依赖注入服务</span></span><br><span class="line"></span><br><span class="line">NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    HeaderComponent,</span><br><span class="line">    FooterComponent,</span><br><span class="line">    NewsComponent,</span><br><span class="line">    TodolistComponent</span><br><span class="line">], <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [StorageService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>3. 使用的页面引入服务，注册服务</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StorageService &#125; <span class="keyword">from</span> <span class="string">'../../services/storage.service'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(private storage: StorageService) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line">addData()&#123;</span><br><span class="line">     <span class="comment">// alert(this.username);</span></span><br><span class="line">    <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.username); </span><br><span class="line">    <span class="keyword">this</span>.storage.set(<span class="string">'todolist'</span>,<span class="keyword">this</span>.list);</span><br><span class="line">&#125;</span><br><span class="line">removerData(key)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); </span><br><span class="line">    <span class="keyword">this</span>.list.splice(key,<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">this</span>.storage.set(<span class="string">'todolist'</span>,<span class="keyword">this</span>.list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-改造上面的Todo、searchList"><a href="#4-2-改造上面的Todo、searchList" class="headerlink" title="4.2 改造上面的Todo、searchList"></a>4.2 改造上面的Todo、searchList</h2><p><strong>searchList</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入服务</span></span><br><span class="line"><span class="keyword">import</span> &#123; StorageService &#125; <span class="keyword">from</span> <span class="string">'../../services/storage.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-search'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./search.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./search.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  public keyword: string;</span><br><span class="line">  public historyList: any[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public storage: StorageService) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.storage.get());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">   <span class="comment">// 修改的地方</span></span><br><span class="line">    <span class="keyword">var</span> searchlist:any=<span class="keyword">this</span>.storage.get(<span class="string">'searchlist'</span>);</span><br><span class="line">    <span class="keyword">if</span>(searchlist)&#123;</span><br><span class="line">      <span class="keyword">this</span>.historyList=searchlist;        </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  doSearch()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.historyList.indexOf(<span class="keyword">this</span>.keyword)==<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.historyList.push(<span class="keyword">this</span>.keyword);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 修改的地方</span></span><br><span class="line">      <span class="keyword">this</span>.storage.set(<span class="string">'searchlist'</span>,<span class="keyword">this</span>.historyList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.keyword = <span class="string">''</span>;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteHistroy(key)&#123;</span><br><span class="line">      alert(key);</span><br><span class="line">      <span class="keyword">this</span>.historyList.splice(key,<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TODOLIST</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  ngOnInit() &#123;</span><br><span class="line">  <span class="comment">// 修改的地方</span></span><br><span class="line">    <span class="keyword">var</span> todolist:any=<span class="keyword">this</span>.storage.get(<span class="string">'todolist'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(todolist)&#123;</span><br><span class="line">      <span class="keyword">this</span>.todolist=todolist;        </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">doAdd(e)&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.keyCode==<span class="number">13</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.todolistHasKeyword(<span class="keyword">this</span>.todolist,<span class="keyword">this</span>.keyword))&#123;</span><br><span class="line">          <span class="keyword">this</span>.todolist.push(&#123;</span><br><span class="line">            title:<span class="keyword">this</span>.keyword,</span><br><span class="line">            status:<span class="number">0</span>                   <span class="comment">//0表示代办事项  1表示已完成事项</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.keyword=<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 修改的地方</span></span><br><span class="line">          <span class="keyword">this</span>.storage.set(<span class="string">'todolist'</span>,<span class="keyword">this</span>.todolist);          <span class="comment">//用到this一定要注意this指向</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          alert(<span class="string">'数据已经存在'</span>);</span><br><span class="line">          <span class="keyword">this</span>.keyword=<span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 修改的地方</span></span><br><span class="line">checkboxChange()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'事件触发了'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.storage.set(<span class="string">'todolist'</span>,<span class="keyword">this</span>.todolist); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>todoList<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todolist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form_input"</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"keyword"</span> (<span class="attr">keyup</span>)=<span class="string">"doAdd($event)"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of todolist;let key=index;"</span> [<span class="attr">hidden</span>]=<span class="string">"item.status==1"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- add checkboxChange--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.status"</span>  (<span class="attr">change</span>)=<span class="string">"checkboxChange()"</span>/&gt;</span>  &#123;&#123;item.title&#125;&#125;   ------ <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"deleteData(key)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>已完成事项<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of todolist;let key=index;"</span> [<span class="attr">hidden</span>]=<span class="string">"item.status==0"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- add checkboxChange--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.status"</span> (<span class="attr">change</span>)=<span class="string">"checkboxChange()"</span> /&gt;</span>  &#123;&#123;item.title&#125;&#125;   ------ <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"deleteData(key)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、Dom-操作以及-ViewChild、-执行-css3-动画"><a href="#五、Dom-操作以及-ViewChild、-执行-css3-动画" class="headerlink" title="五、Dom 操作以及@ViewChild、 执行 css3 动画"></a>五、Dom 操作以及@ViewChild、 执行 css3 动画</h1><p><strong>1. Angular 中的 dom 操作(原生 js)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngAfterViewInit()&#123;</span><br><span class="line"><span class="keyword">var</span> boxDom:any=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>); boxDom.style.color=<span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. Angular 中的 dom 操作(ViewChild)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component ,ViewChild,ElementRef&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(<span class="string">'myattr'</span>) myattr: ElementRef;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> #<span class="attr">myattr</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngAfterViewInit()&#123;</span><br><span class="line"><span class="keyword">let</span> attrEl = <span class="keyword">this</span>.myattr.nativeElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1adb55ae5489a80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="@viewChild"></p><p><strong>3. 父子组件中通过 ViewChild 调用子组件 的方法</strong></p><blockquote><p>调用子组件给子组件定义一个名称</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-footer</span> #<span class="attr">footerChild</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>引入 <code>ViewChild</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit ,ViewChild&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ViewChild</code> 和刚才的子组件关联起来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(<span class="string">'footerChild'</span>) footer</span><br></pre></td></tr></table></figure><blockquote><p>在父组件中调用子组件方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> run()&#123; </span><br><span class="line">    <span class="keyword">this</span>.footer.footerRun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Angular-父子组件以及组件之间通讯"><a href="#六、Angular-父子组件以及组件之间通讯" class="headerlink" title="六、Angular 父子组件以及组件之间通讯"></a>六、Angular 父子组件以及组件之间通讯</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8d19e6351e1c58a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="父子组件通讯"></p><h2 id="6-1-父组件给子组件传值-input"><a href="#6-1-父组件给子组件传值-input" class="headerlink" title="6.1 父组件给子组件传值-@input"></a>6.1 父组件给子组件传值-@input</h2><blockquote><p>父组件不仅可以给子组件传递简单的数据，还可把自己的方法以及整个父组件传给子组件</p></blockquote><p><strong>1. 父组件调用子组件的时候传入数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-header</span> [<span class="attr">msg</span>]=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 子组件引入 Input 模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit ,Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 子组件中 @Input 接收父组件传过来的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  @Input() msg:string</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 子组件中使用父组件的数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  child works!</span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5. 把整个父组件传给子组件</strong></p><blockquote><p>通过<code>this</code>传递整个组件实例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-header</span> [<span class="attr">home</span>]=<span class="string">"this"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  @Input() home:any</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行父组件方法 <code>this.home.xxx()</code></p></blockquote><h2 id="6-2-子组件通过-Output-触发父组件的方法（了解）"><a href="#6-2-子组件通过-Output-触发父组件的方法（了解）" class="headerlink" title="6.2 子组件通过@Output 触发父组件的方法（了解）"></a>6.2 子组件通过@Output 触发父组件的方法（了解）</h2><p><strong>1. 子组件引入 Output 和 EventEmitter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit ,Input,Output,EventEmitter&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 子组件中实例化 EventEmitter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Output() private outer=<span class="keyword">new</span> EventEmitter&lt;string&gt;(); <span class="comment">/*用EventEmitter和output装饰器配合使用 &lt;string&gt;指定类型变量*/</span></span><br></pre></td></tr></table></figure><p><strong>3. 子组件通过 EventEmitter 对象 outer 实例广播数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sendParent()&#123;</span><br><span class="line">  <span class="comment">// alert('zhixing');</span></span><br><span class="line">  <span class="keyword">this</span>.outer.emit(<span class="string">'msg from child'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 父组件调用子组件的时候，定义接收事件 , outer 就是子组件的 EventEmitter 对象 outer</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--$event就是子组件emit传递的数据--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">app-header</span> (<span class="attr">outer</span>)=<span class="string">"runParent($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5. 父组件接收到数据会调用自己的 runParent 方法，这个时候就能拿到子组件的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收子组件传递过来的数据 </span></span><br><span class="line">runParent(msg:string)&#123;</span><br><span class="line">   alert(msg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-父组件通过-ViewChild-主动获取子组-件的数据和方法"><a href="#6-3-父组件通过-ViewChild-主动获取子组-件的数据和方法" class="headerlink" title="6.3 父组件通过@ViewChild 主动获取子组 件的数据和方法"></a>6.3 父组件通过@ViewChild 主动获取子组 件的数据和方法</h2><p><strong>1. 调用子组件给子组件定义一个名称</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-footer</span> #<span class="attr">footerChild</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入 ViewChild</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit ,ViewChild&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><p><strong>3. ViewChild 和刚才的子组件关联起来</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(<span class="string">'footerChild'</span>) footer;</span><br></pre></td></tr></table></figure><p><strong>4. 调用子组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run()&#123; <span class="keyword">this</span>.footer.footerRun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-非父子组件通讯"><a href="#6-4-非父子组件通讯" class="headerlink" title="6.4 非父子组件通讯"></a>6.4 非父子组件通讯</h2><ul><li>公共的服务 </li><li><code>Localstorage</code> (推荐) </li><li><code>Cookie</code></li></ul><h1 id="七、Angular-中的生命周期函数"><a href="#七、Angular-中的生命周期函数" class="headerlink" title="七、Angular 中的生命周期函数"></a>七、Angular 中的生命周期函数</h1><h2 id="7-1-Angular中的生命周期函数"><a href="#7-1-Angular中的生命周期函数" class="headerlink" title="7.1 Angular中的生命周期函数"></a>7.1 Angular中的生命周期函数</h2><blockquote><p>官方文档:<a href="https://www.angular.cn/guide/lifecycle-hooks" target="_blank" rel="noopener">https://www.angular.cn/guide/lifecycle-hooks</a></p></blockquote><ul><li>生命周期函数通俗的讲就是组件创建、组件更新、组件销毁的时候会触发的一系列的方法。</li><li>当 <code>Angular</code> 使用构造函数新建一个组件或指令后，就会按下面的顺序在特定时刻调用这些 生命周期钩子方法。</li><li>每个接口都有唯一的一个钩子方法，它们的名字是由接口名再加上<code>ng</code>前缀构成的，比如<code>OnInit</code>接口的钩子方法叫做<code>ngOnInit</code>.</li></ul><p><strong>1. 生命周期钩子分类</strong></p><blockquote><p>基于指令与组件的区别来分类</p></blockquote><p><strong>指令与组件共有的钩子</strong></p><ul><li><code>ngOnChanges</code></li><li><code>ngOnInit</code></li><li><code>ngDoCheck</code></li><li><code>ngOnDestroy</code></li></ul><p><strong>组件特有的钩子</strong></p><ul><li><code>ngAfterContentInit</code></li><li><code>ngAfterContentChecked</code></li><li><code>ngAfterViewInit</code></li><li><code>ngAfterViewChecked</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-417f04c277eef749.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生命周期钩子"></p><p><strong>2. 生命周期钩子的作用及调用顺序</strong></p><p>1、<code>ngOnChanges</code> - 当数据绑定输入属性的值发生变化时调用<br>2、<code>ngOnInit</code> - 在第一次 <code>ngOnChanges</code> 后调用<br>3、<code>ngDoCheck</code> - 自定义的方法，用于检测和处理值的改变<br>4、<code>ngAfterContentInit</code> - 在组件内容初始化之后调用<br>5、<code>ngAfterContentChecked</code> - 组件每次检查内容时调用<br>6、<code>ngAfterViewInit</code> - 组件相应的视图初始化之后调用<br>7、<code>ngAfterViewChecked</code> - 组件每次检查视图时调用<br>8、<code>ngOnDestroy</code> - 指令销毁前调用</p><p><strong>3. 首次加载生命周期顺序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecircleComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'00构造函数执行了---除了使用简单的值对局部变量进行初始化之外，什么都不应该做'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnChanges() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'01ngOnChages执行了---当被绑定的输入属性的值发生变化时调用(父子组件传值的时候会触发)'</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'02ngOnInit执行了--- 请求数据一般放在这个里面'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ngDoCheck() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ngAfterContentInit() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'04ngAfterContentInit执行了---当把内容投影进组件之后调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ngAfterContentChecked() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'05ngAfterContentChecked执行了---每次完成被投影组件内容的变更检测之后调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ngAfterViewInit() : <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'06 ngAfterViewInit执行了----初始化完组件视图及其子视图之后调用（dom操作放在这个里面）'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ngAfterViewChecked() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'07ngAfterViewChecked执行了----每次做完组件视图和子视图的变更检测之后调用'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnDestroy() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'08ngOnDestroy执行了····'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义方法</span></span><br><span class="line">    changeMsg() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"数据改变了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7e0081f4616fe461.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生命周期调用顺序"></p><blockquote><p>带<code>check</code>的可以对数据做响应操作</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"changeMsg()"</span>&gt;</span>数据改变了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> [(<span class="attr">ngModel</span>)]=<span class="string">"userInfo"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>点击按钮/双向数据绑定此时触发了以下生命周期。只要数据改变</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-158cdd9fe4f9f028.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cheked"></p><blockquote><p>可以在<code>check</code>做一些操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ngDoCheck() &#123;</span><br><span class="line">        <span class="comment">//写一些自定义的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'03ngDoCheck执行了---检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.userinfo!==<span class="keyword">this</span>.oldUserinfo)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`你从<span class="subst">$&#123;<span class="keyword">this</span>.oldUserinfo&#125;</span>改成<span class="subst">$&#123;<span class="keyword">this</span>.userinfo&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">this</span>.oldUserinfo = <span class="keyword">this</span>.userinfo;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"数据没有变化"</span>);          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-生命周期钩子详解"><a href="#7-2-生命周期钩子详解" class="headerlink" title="7.2 生命周期钩子详解"></a>7.2 生命周期钩子详解</h2><h3 id="7-2-1-constructor-掌握"><a href="#7-2-1-constructor-掌握" class="headerlink" title="7.2.1 constructor-掌握"></a>7.2.1 constructor-掌握</h3><blockquote><p><code>constructor</code>，来初始化类。<code>Angular</code>中的组件就是基于<code>class</code>类实现的，在<code>Angular</code>中，<code>constructor</code>用于注入依赖。组件的构造函数会在所有的生命周期钩子之前被调用，它主要用于依赖注入或执行简单的数据初始化操作。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ElementRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'my-app'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Welcome to Angular World&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Hello &#123;&#123;name&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  name: string = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(public elementRef: ElementRef) &#123;<span class="comment">//使用构造注入的方式注入依赖对象</span></span><br><span class="line">    <span class="comment">// 执行初始化操作</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Semlinker'</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-ngOnChanges"><a href="#7-2-2-ngOnChanges" class="headerlink" title="7.2.2  ngOnChanges()"></a>7.2.2  ngOnChanges()</h3><blockquote><p>当 <code>Angular</code>(重新)设置数据绑定输入属性时响应。该 方法接受当前和上一属性值的 <code>SimpleChanges</code> 对象 当被绑定的输入属性的值发生变化时调用，首次调用一 定会发生在 <code>ngOnInit()</code>之前。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 传递title属性给header子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-header</span> [<span class="attr">title</span>]=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时改变<code>title</code>会触发<code>ngOnChanges</code>生命周期，并且也会触发</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-158cdd9fe4f9f028.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cheked"></p><h3 id="7-2-3-ngOnInit-–掌握"><a href="#7-2-3-ngOnInit-–掌握" class="headerlink" title="7.2.3 ngOnInit()–掌握"></a>7.2.3 ngOnInit()–掌握</h3><blockquote><p>在 <code>Angular</code> 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。在第一轮 <code>ngOnChanges()</code> 完成之后调用，只调用一次。可以请求数据</p></blockquote><ul><li><strong>使用 ngOnInit() 有两个原因</strong>: <ul><li>在构造函数之后马上执行复杂的初始化逻辑</li><li>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。有经验的开发者会认同组件的构建应该很便宜和安全</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'exe-child'</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">     &lt;p&gt;父组件的名称：&#123;&#123;pname&#125;&#125; &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    @Input()</span><br><span class="line">    pname: string; <span class="comment">// 父组件的名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ChildComponent constructor'</span>, <span class="keyword">this</span>.pname); </span><br><span class="line">        <span class="comment">// Output：undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ChildComponent ngOnInit'</span>, <span class="keyword">this</span>.pname); </span><br><span class="line">        <span class="comment">// output: 输入的pname值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-ngDoCheck"><a href="#7-2-4-ngDoCheck" class="headerlink" title="7.2.4 ngDoCheck()"></a>7.2.4 ngDoCheck()</h3><blockquote><p>检测，并在发生 <code>Angular</code> 无法或不愿意自己检测的变 化时作出反应。在每个 <code>Angular</code> 变更检测周期中调用， <code>ngOnChanges()</code> 和 <code>ngOnInit()</code>之后。</p></blockquote><h3 id="7-2-5-ngAfterContentInit"><a href="#7-2-5-ngAfterContentInit" class="headerlink" title="7.2.5 ngAfterContentInit()"></a>7.2.5 ngAfterContentInit()</h3><blockquote><p>当把内容投影进组件之后调用。第一次 <code>ngDoCheck()</code> 之后调用，只调用一次</p></blockquote><h3 id="7-2-6-ngAfterContentChecked"><a href="#7-2-6-ngAfterContentChecked" class="headerlink" title="7.2.6 ngAfterContentChecked()"></a>7.2.6 ngAfterContentChecked()</h3><blockquote><p>每次完成被投影组件内容的变更检测之后调用。 <code>ngAfterContentInit()</code> 和每次 <code>ngDoCheck()</code> 之后调</p></blockquote><h3 id="7-2-7-ngAfterViewInit-–掌握"><a href="#7-2-7-ngAfterViewInit-–掌握" class="headerlink" title="7.2.7 ngAfterViewInit()–掌握"></a>7.2.7 ngAfterViewInit()–掌握</h3><blockquote><p>初始化完组件视图及其子视图之后调用。第一 次 <code>ngAfterContentChecked()</code> 之后调用，只调用一次。在这里可以操作<code>DOM</code></p></blockquote><h3 id="7-2-8-ngAfterViewChecked"><a href="#7-2-8-ngAfterViewChecked" class="headerlink" title="7.2.8 ngAfterViewChecked()"></a>7.2.8 ngAfterViewChecked()</h3><blockquote><p>每次做完组件视图和子视图的变更检测之后调用。 <code>ngAfterViewInit()</code>和每次 <code>ngAfterContentChecked()</code> 之后 调用。</p></blockquote><h3 id="7-2-9-ngOnDestroy-–掌握"><a href="#7-2-9-ngOnDestroy-–掌握" class="headerlink" title="7.2.9 ngOnDestroy()–掌握"></a>7.2.9 ngOnDestroy()–掌握</h3><blockquote><p>当 <code>Angular</code> 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄 漏。在 <code>Angular</code> 销毁指令/组件之前调用。比如：移除事件监听、清除定时器、退订 <code>Observable</code> 等。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">'[destroyDirective]'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">OnDestroyDirective</span> <span class="title">implements</span> <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line">  sayHello: number;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.sayHiya = <span class="built_in">window</span>.setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'hello'</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ngOnDestroy() &#123;</span><br><span class="line">     <span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.sayHiya);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、Rxjs-异步数据流编程"><a href="#八、Rxjs-异步数据流编程" class="headerlink" title="八、Rxjs 异步数据流编程"></a>八、Rxjs 异步数据流编程</h1><h2 id="8-1-Rxjs介绍"><a href="#8-1-Rxjs介绍" class="headerlink" title="8.1 Rxjs介绍"></a>8.1 Rxjs介绍</h2><blockquote><ul><li>参考手册:<a href="https://www.npmjs.com/package/rxjs" target="_blank" rel="noopener">https://www.npmjs.com/package/rxjs</a></li><li>中文手册:<a href="https://cn.rx.js.org/" target="_blank" rel="noopener">https://cn.rx.js.org/</a></li></ul></blockquote><blockquote><p><code>RxJS</code> 是 <code>ReactiveX</code> 编程理念的 <code>JavaScript</code> 版本。<code>ReactiveX</code> 来自微软，它是一种针对异步数据 流的编程。简单来说，它将一切数据，包括 <code>HTTP</code> 请求，<code>DOM</code> 事件或者普通数据等包装成流的形式，然后用强大丰富的操作符对流进行处理，使你能以同步编程的方式处理异步数据，并组合不同的操作符来轻松优雅的实现你所需要的功能。</p></blockquote><ul><li><code>RxJS</code> 是一种针对异步数据流编程工具，或者叫响应式扩展编程;可不管如何解释 RxJS 其目 标就是异步编程，<code>Angular</code> 引入 <code>RxJS</code> 为了就是让异步可控、更简单。</li><li><code>RxJS</code> 里面提供了很多模块。这里我们主要给大家讲 <code>RxJS</code> 里面最常用的<code>Observable</code> 和 f<code>romEvent</code></li></ul><p><strong>目前常见的异步编程的几种方法:</strong></p><ul><li>回调函数 </li><li>事件监听/发布订阅 </li><li><code>Promise</code></li><li><code>Rxjs</code></li></ul><h2 id="8-2-Promise和RxJS处理异步对比"><a href="#8-2-Promise和RxJS处理异步对比" class="headerlink" title="8.2 Promise和RxJS处理异步对比"></a>8.2 Promise和RxJS处理异步对比</h2><blockquote><p>新建一个<code>services</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g service services/rxjs</span><br></pre></td></tr></table></figure><blockquote><p>在<code>services/rxjs.service.ts</code>中写以下方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RxjsService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// Promise 处理异步</span></span><br><span class="line">  getPromiseData() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve = &gt;&#123;</span><br><span class="line">    setTimeout(() = &gt;&#123;</span><br><span class="line">        resolve(<span class="string">'---promise timeout---'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJS 处理异步:</span></span><br><span class="line">getRxjsData() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Observable(observer = &gt;&#123;</span><br><span class="line">      setTimeout(() = &gt;&#123;</span><br><span class="line">        observer.next(<span class="string">'observable timeout'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">2000</span>);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在其他组件使用服务</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RxjsService &#125; <span class="keyword">from</span> <span class="string">'../../services/rxjs.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-rxjs'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./rxjs.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./rxjs.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RxjsComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注入服务</span></span><br><span class="line">  <span class="keyword">constructor</span>(public request: RxjsService) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">     <span class="keyword">this</span>.request.getRxjsData().subscribe(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从上面列子可以看到 <code>RxJS</code> 和 <code>Promise</code>的基本用法非常类似，除了一些关键词不同。<code>Promise</code> 里面用的是 <code>then()</code> 和 <code>resolve()</code>，而 <code>RxJS</code>里面用的是 <code>next()</code> 和 <code>subscribe()</code></li><li><code>Rxjs</code>相比<code>Promise</code>要强大很多。 比如 <code>Rxjs</code> 中可以中途撤回、<code>Rxjs</code> 可以发射多个值、<code>Rxjs</code> 提供了多种工具函数等等</li></ul><h2 id="8-3-Rxjs-unsubscribe-取消订阅"><a href="#8-3-Rxjs-unsubscribe-取消订阅" class="headerlink" title="8.3 Rxjs unsubscribe 取消订阅"></a>8.3 Rxjs unsubscribe 取消订阅</h2><blockquote><p><code>Promise</code> 的创建之后，动作是无法撤回的。<code>Observable</code> 不一样，动作可以通过 <code>unsbscribe()</code> 方法中途撤回，而且 <code>Observable</code> 在内部做了智能的处理.</p></blockquote><p><strong>Promise 创建之后动作无法撤回</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve = &gt;&#123;</span><br><span class="line">    setTimeout(() = &gt;&#123;</span><br><span class="line">        resolve(<span class="string">'---promise timeout---'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(value = &gt;<span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure><p><strong>Rxjs 可以通过 unsubscribe() 可以撤回 subscribe 的动作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream = <span class="keyword">new</span> Observable(observer = &gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = setTimeout(() = &gt;&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        observer.next(<span class="string">'observable timeout'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> disposable = stream.subscribe(value = &gt;<span class="built_in">console</span>.log(value));</span><br><span class="line">setTimeout(() = &gt;&#123;</span><br><span class="line">    <span class="comment">//取消执行 disposable.unsubscribe();</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="8-4-Rxjs-订阅后多次执行"><a href="#8-4-Rxjs-订阅后多次执行" class="headerlink" title="8.4 Rxjs 订阅后多次执行"></a>8.4 Rxjs 订阅后多次执行</h2><ul><li>如果我们想让异步里面的方法多次执行，比如下面代码。</li></ul><blockquote><p>这一点 <code>Promise</code>是做不到的，对于 <code>Promise</code>来说，最终结果要么 <code>resole</code>(兑现)、要么 <code>reject</code> (拒绝)，而且都只能触发一次。如果在同一个 <code>Promise</code> 对象上多次调用 <code>resolve</code> 方法， 则会抛异常。而 <code>Observable</code>不一样，它可以不断地触发下一个值，就像 <code>next()</code>这个方法的 名字所暗示的那样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve = &gt;&#123;</span><br><span class="line">    setInterval(() = &gt;&#123;</span><br><span class="line">        resolve(<span class="string">'---promise setInterval---'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(value = &gt;<span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure><p><strong>Rxjs</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream = <span class="keyword">new</span> Observable &lt; number &gt; (observer = &gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(() = &gt;&#123;</span><br><span class="line">        observer.next(count++);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">stream.subscribe(value = &gt;<span class="built_in">console</span>.log(<span class="string">"Observable&gt;"</span> + value));</span><br></pre></td></tr></table></figure><h2 id="8-5-Angualr6-x之前使用Rxjs的工具函数-map-filter"><a href="#8-5-Angualr6-x之前使用Rxjs的工具函数-map-filter" class="headerlink" title="8.5 Angualr6.x之前使用Rxjs的工具函数 map filter"></a>8.5 Angualr6.x之前使用Rxjs的工具函数 map filter</h2><blockquote><p>注意:<code>Angular6</code> 以后使用以前的<code>rxjs</code> 方法，必须安装 <code>rxjs-compat</code> 模块才可以使用 <code>map</code>、<code>filter</code> 方法。</p></blockquote><blockquote><p><code>angular6</code> 后官方使用的是 <code>RXJS6</code>的新特性，所以官方给出了一个可以暂时延缓我们不需要修 改 <code>rsjx</code> 代码的办法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rxjs-compat</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Observable&#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>; <span class="keyword">import</span> <span class="string">'rxjs/Rx'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream = <span class="keyword">new</span> Observable &lt; any &gt; (observer = &gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(() = &gt;&#123;</span><br><span class="line">        observer.next(count++);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">stream.filter(val = &gt;val % <span class="number">2</span> == <span class="number">0</span>).subscribe(value = &gt;<span class="built_in">console</span>.log(<span class="string">"filter&gt;"</span> + value));</span><br><span class="line">stream.map(value = &gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> value * value</span><br><span class="line">&#125;).subscribe(value = &gt;<span class="built_in">console</span>.log(<span class="string">"map&gt;"</span> + value));</span><br></pre></td></tr></table></figure><h2 id="8-6-Angualr6-x-以后-Rxjs6-x-的变化以及-使用"><a href="#8-6-Angualr6-x-以后-Rxjs6-x-的变化以及-使用" class="headerlink" title="8.6 Angualr6.x 以后 Rxjs6.x 的变化以及 使用"></a>8.6 Angualr6.x 以后 Rxjs6.x 的变化以及 使用</h2><h3 id="8-6-1-Rxjs-的变化参考"><a href="#8-6-1-Rxjs-的变化参考" class="headerlink" title="8.6.1 Rxjs 的变化参考"></a>8.6.1 Rxjs 的变化参考</h3><blockquote><p>从<code>Angular5</code>升级到<code>Angular6</code>， <code>angular6</code>相比较于<code>angular5</code>总体变化不大，但是在<code>RXJS</code>上面却有一些变动，下面给大家讲讲关于<code>Angular6</code>版本升级和<code>RXJS6</code>新特性的讲解</p></blockquote><p><strong>1. angular6 Angular7中使用以前的rxjs</strong></p><blockquote><p>对于写了半年多的项目，模块已经很多了，所以不可能在升级到<code>angular6</code>后马上更新所有代码关于<code>RXJS6</code>的新特性，所以官方给出了一个可以暂时延缓我们不需要修改<code>rsjx</code>代码的办法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save rxjs-compat</span><br></pre></td></tr></table></figure><ul><li><strong>优点</strong>： 暂时不用改代码，可以一点点地改，直到改完后吧这个包卸掉</li><li><strong>缺点</strong>： 对于<code>rxjs6</code>的<code>rename</code>的<code>operator</code>无效，所以，如果有用到<code>rename</code>的<code>API</code>，必须手动修改</li></ul><p><strong>2. Angular6 以后 RXJS6的变化</strong></p><blockquote><p><code>RXJS6</code>改变了包的结构，主要变化在 <code>import</code>方式和<code>operator</code>上面以及使用<code>pipe()</code></p></blockquote><p><strong>2.1 Imports 方式改变</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1cde10680c8b574d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>从<code>rxjs</code>中类似像导入<code>observable</code> <code>subject</code> 等的不再进一步导入，而是止于<code>rxjs</code>, <code>rxjs6</code>在包的结构上进行了改变</p></blockquote><p><strong>2.2 operator的改变</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4a44b397ec43e2c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>总而言之： 类似于创建之类的用的<code>API</code>都是从<code>rxjs</code>引入的，类似于<code>map</code> 之类的操作都是从<code>rxjs/operators</code>引入的</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-123266ac988768f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>2.3 pipeable observable</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bacc3d7dfc4d6ca4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>2.4 被重新命名的API</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0063669c8de12ebc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>RXJS6</code> 改变了包的结构，主要变化在 <code>import</code> 方式和 <code>operator</code> 上面以及使用 <code>pipe()</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Observable&#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;map,filter&#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream= <span class="keyword">new</span> Observable&lt;any&gt;(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(() = &gt;&#123;</span><br><span class="line">        observer.next(count++);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stream.pipe(filter(val = &gt;val % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line">.subscribe(value = &gt;<span class="built_in">console</span>.log(<span class="string">"filter&gt;"</span> + value));</span><br><span class="line"></span><br><span class="line">stream</span><br><span class="line">.pipe(</span><br><span class="line">    filter(val = &gt;val % <span class="number">2</span> == <span class="number">0</span>), </span><br><span class="line">    map(value = &gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> value * value</span><br><span class="line">&#125;))</span><br><span class="line">.subscribe(value = &gt;<span class="built_in">console</span>.log(<span class="string">"map&gt;"</span> + value));</span><br></pre></td></tr></table></figure><h2 id="8-7-Rxjs-延迟执行"><a href="#8-7-Rxjs-延迟执行" class="headerlink" title="8.7 Rxjs 延迟执行"></a>8.7 Rxjs 延迟执行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Observable,</span><br><span class="line">    fromEvent</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    map,</span><br><span class="line">    filter,</span><br><span class="line">    throttleTime</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">fromEvent(button, <span class="string">'click'</span>)</span><br><span class="line">.pipe(throttleTime(<span class="number">1000</span>))</span><br><span class="line">.subscribe(() = &gt;<span class="built_in">console</span>.log(<span class="string">`Clicked`</span>));</span><br></pre></td></tr></table></figure><h1 id="九、Angular-中的数据交互-get-jsonp-post"><a href="#九、Angular-中的数据交互-get-jsonp-post" class="headerlink" title="九、Angular 中的数据交互(get jsonp post)"></a>九、Angular 中的数据交互(get jsonp post)</h1><h2 id="9-1-Angular-get-请求数据"><a href="#9-1-Angular-get-请求数据" class="headerlink" title="9.1 Angular get 请求数据"></a>9.1 Angular get 请求数据</h2><blockquote><p><code>Angular5.x</code> 以后 <code>get</code>、<code>post</code> 和和服务器交互使用的是 <code>HttpClientModule</code> 模块。</p></blockquote><p><strong>1. 在 app.module.ts 中引入 HttpClientModule 并注入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpClientModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>2. 在用到的地方引入 HttpClient 并在构造函数声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>3. get 请求数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.http.get(api).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response); &#125;);</span><br></pre></td></tr></table></figure><h2 id="9-2-Angular-post-提交数据"><a href="#9-2-Angular-post-提交数据" class="headerlink" title="9.2 Angular post 提交数据"></a>9.2 Angular post 提交数据</h2><blockquote><p><code>Angular5.x</code> 以后 <code>get</code>、<code>post</code> 和和服务器交互使用的是<code>HttpClientModule</code> 模块。</p></blockquote><p><strong>1. 在 app.module.ts 中引入 HttpClientModule 并注入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpClientModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>2. 在用到的地方引入 HttpClient、HttpHeaders 并在构造函数声明 HttpClient</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient,HttpHeaders&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>3. post 提交数据</strong></p><blockquote><p>用<code>express</code>搭建一个<code>server</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"ejs"</span>: <span class="string">"^2.5.6"</span>,</span><br><span class="line">    <span class="string">"express"</span>: <span class="string">"^4.15.3"</span>,</span><br><span class="line">    <span class="string">"socket.io"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">    <span class="string">"body-parser"</span>: <span class="string">"~1.17.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js 代码</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*express允许跨域*/</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) res.send(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">else</span>  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.use(express.static(path.join(__dirname, 'public')));</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'首页'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">'/dologin'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(req.body);</span><br><span class="line"> res.json(&#123;<span class="string">"msg"</span>:<span class="string">'post成功'</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/news'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(req.body);</span></span><br><span class="line">res.jsonp(&#123;<span class="string">"msg"</span>:<span class="string">'这是新闻数据'</span>&#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'项目启动在3000端口'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// angular代码</span></span><br><span class="line"></span><br><span class="line">doLogin() &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 手动设置请求类型</span></span><br><span class="line">  <span class="keyword">const</span> httpOptions = &#123;</span><br><span class="line">    headers: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> api = <span class="string">"http://127.0.0.1:3000/doLogin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.http.post(api, &#123;</span><br><span class="line">    username: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="string">'20'</span></span><br><span class="line">&#125;,</span><br><span class="line">httpOptions).subscribe(response = &gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3-Angular-Jsonp-请求数据"><a href="#9-3-Angular-Jsonp-请求数据" class="headerlink" title="9.3 Angular Jsonp 请求数据"></a>9.3 Angular Jsonp 请求数据</h2><p><strong>1. 在 app.module.ts 中引入 HttpClientModule、HttpClientJsonpModule 并注入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule,HttpClientJsonpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpClientModule,</span><br><span class="line">  HttpClientJsonpModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3. 在用到的地方引入 HttpClient 并在构造函数声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>3. jsonp 请求数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口支持jsonp请求</span></span><br><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.http.jsonp(api,<span class="string">'callback'</span>).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(response); &#125;);</span><br></pre></td></tr></table></figure><h2 id="9-4-Angular-中使用第三方模块-axios-请求数据"><a href="#9-4-Angular-中使用第三方模块-axios-请求数据" class="headerlink" title="9.4 Angular 中使用第三方模块 axios 请求数据"></a>9.4 Angular 中使用第三方模块 axios 请求数据</h2><p><strong>1. 安装 axios</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios --save</span><br></pre></td></tr></table></figure><p><strong>2. 用到的地方引入 axios</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br></pre></td></tr></table></figure><p><strong>3. 看文档使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle success</span></span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;).</span><br><span class="line"><span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// handle error console.log(error);</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// always executed </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="十、Angular-中的路由"><a href="#十、Angular-中的路由" class="headerlink" title="十、Angular 中的路由"></a>十、Angular 中的路由</h1><h2 id="10-1-Angular-创建一个默认带路由的项目"><a href="#10-1-Angular-创建一个默认带路由的项目" class="headerlink" title="10.1 Angular 创建一个默认带路由的项目"></a>10.1 Angular 创建一个默认带路由的项目</h2><p><strong>1. 命令创建项目</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="keyword">new</span> angualrdemo08 --skip-install</span><br></pre></td></tr></table></figure><p><strong>2. 创建需要的组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng g component home</span><br><span class="line">ng g component news</span><br><span class="line">ng g component newscontent</span><br></pre></td></tr></table></figure><p><strong>3. 找到 app-routing.module.ts 配置路由</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; HomeComponent &#125; <span class="keyword">from</span> <span class="string">'./home/home.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NewsComponent &#125; <span class="keyword">from</span> <span class="string">'./news/news.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NewscontentComponent &#125; <span class="keyword">from</span> <span class="string">'./newscontent/newscontent.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'home'</span>, <span class="attr">component</span>: HomeComponent&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'news'</span>, <span class="attr">component</span>: NewsComponent&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'newscontent/:id'</span>, <span class="attr">component</span>: NewscontentComponent&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirectTo: <span class="string">'/home'</span>,</span><br><span class="line">    pathMatch: <span class="string">'full'</span></span><br><span class="line">&#125; ];</span><br></pre></td></tr></table></figure><p><strong>4. 找到 app.component.html 根组件模板，配置 router-outlet 显示动态加载的路由</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-2-routerLink-跳转页面-默认路由"><a href="#10-2-routerLink-跳转页面-默认路由" class="headerlink" title="10.2 routerLink 跳转页面 默认路由"></a>10.2 routerLink 跳转页面 默认路由</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配不到路由的时候加载的组件 或者跳转的路由</span></span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'**'</span>, <span class="comment">/*任意的路由*/</span> </span><br><span class="line">    <span class="comment">// component:HomeComponent </span></span><br><span class="line">    redirectTo:<span class="string">'home'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-routerLinkActive-设置routerLink-默认选中路由"><a href="#10-3-routerLinkActive-设置routerLink-默认选中路由" class="headerlink" title="10.3 routerLinkActive 设置routerLink 默认选中路由"></a>10.3 routerLinkActive 设置routerLink 默认选中路由</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/home"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/news"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"[ '/home' ]"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"[ '/news' ]"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4-routerLink-Get传递参数"><a href="#10-4-routerLink-Get传递参数" class="headerlink" title="10.4 routerLink Get传递参数"></a>10.4 routerLink Get传递参数</h2><p><strong>1. 跳转</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list;let key=index;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;a href="/news-detail?aid=123"&gt;&#123;&#123;key&#125;&#125;--&#123;&#123;item&#125;&#125;&lt;/a&gt; --&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/news-detail']"</span> [<span class="attr">queryParams</span>]=<span class="string">"&#123;aid:key&#125;"</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 接收参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(public route:ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.route.queryParams.subscribe(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-5-动态路由"><a href="#10-5-动态路由" class="headerlink" title="10.5 动态路由"></a>10.5 动态路由</h2><p><strong>1.配置动态路由</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'home'</span>, <span class="attr">component</span>: HomeComponent&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'news'</span>, <span class="attr">component</span>: NewsComponent&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">'newscontent/:id'</span>, <span class="attr">component</span>: NewscontentComponent&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirectTo: <span class="string">'/home'</span>,</span><br><span class="line">    pathMatch: <span class="string">'full'</span></span><br><span class="line">&#125; ];</span><br></pre></td></tr></table></figure><p><strong>2. 跳转传值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"[ '/newscontent/',aid]"</span>&gt;</span>跳转到详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/newscontent/&#123;&#123;aid&#125;&#125;"</span>&gt;</span>跳转到详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 获取动态路由的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActivatedRoute&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>( private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"> </span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.route.params);</span><br><span class="line">  <span class="keyword">this</span>.route.params.subscribe(<span class="function"><span class="params">data</span>=&gt;</span><span class="keyword">this</span>.id=data.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-6-动态路由的-js-跳转"><a href="#10-6-动态路由的-js-跳转" class="headerlink" title="10.6 动态路由的 js 跳转"></a>10.6 动态路由的 js 跳转</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(private router: Router) &#123;&#125;</span><br><span class="line">    ngOnInit() &#123;&#125;</span><br><span class="line">    goNews()&#123;</span><br><span class="line">    <span class="comment">// this.router.navigate(['/news', hero.id]);</span></span><br><span class="line">         <span class="keyword">this</span>.router.navigate([<span class="string">'/news'</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由跳转</span></span><br><span class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'/news'</span>, hero.id]);</span><br></pre></td></tr></table></figure><h2 id="10-7-路由-get-传值-js-跳转"><a href="#10-7-路由-get-传值-js-跳转" class="headerlink" title="10.7 路由 get 传值 js 跳转"></a>10.7 路由 get 传值 js 跳转</h2><p><strong>1. 引入 NavigationExtras</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router ,NavigationExtras&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 定义一个 goNewsContent 方法执行跳转，用 NavigationExtras 配置传参。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">goNewsContent() &#123;</span><br><span class="line">    <span class="keyword">let</span> navigationExtras: NavigationExtras = &#123;</span><br><span class="line">        queryParams: &#123;</span><br><span class="line">            <span class="string">'session_id'</span>: <span class="string">'123'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        fragment: <span class="string">'anchor'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.router.navigate([<span class="string">'/news'</span>], navigationExtras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 获取 get 传值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">constructor</span>(private route: ActivatedRoute) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.route.queryParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-8-父子路由"><a href="#10-8-父子路由" class="headerlink" title="10.8 父子路由"></a>10.8 父子路由</h2><p><strong>1. 创建组件引入组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NewsaddComponent &#125; <span class="keyword">from</span> <span class="string">'./components/newsadd/newsadd.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NewslistComponent &#125; <span class="keyword">from</span> <span class="string">'./components/newslist/newslist.component'</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 配置路由</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'news'</span>,</span><br><span class="line">    component: NewsComponent,</span><br><span class="line">    children: [&#123;</span><br><span class="line">        path: <span class="string">'newslist'</span>,</span><br><span class="line">        component: NewslistComponent</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'newsadd'</span>,</span><br><span class="line">        component: NewsaddComponent</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 父组件中定义 router-outlet</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十一、更多参考"><a href="#十一、更多参考" class="headerlink" title="十一、更多参考"></a>十一、更多参考</h1><ul><li><a href="https://www.angular.cn/guide/quickstart" target="_blank" rel="noopener">Angular中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在学&lt;code&gt;Ionic4&lt;/code&gt;，不得不学习&lt;code&gt;angular&lt;/code&gt;、&lt;code&gt;Typescript&lt;/code&gt;基础知识，这里简单总结记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Angula
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Angular" scheme="http://blog.poetries.top/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Electron构建跨平台应用mac/windows/linux</title>
    <link href="http://blog.poetries.top/2019/01/06/electron-summary/"/>
    <id>http://blog.poetries.top/2019/01/06/electron-summary/</id>
    <published>2019-01-06T09:40:43.000Z</published>
    <updated>2019-01-25T09:06:54.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ul><li><code>NW.js</code> 和 <code>Electron</code> 都可以用前端的知识来开发桌面应用。<code>NW.js</code> 和 <code>Electron</code>起初是同一 个作者开发。后来种种原因分为两个产品。一个命名为 <code>NW.js</code>(英特尔公司提供技术支持)、 另一命名为 <code>Electron</code>(Github 公司提供技术支持)。</li><li><code>NW.js</code> 和 <code>Electron</code> 可以用 <code>Nodejs</code> 中几乎所有的模块。<code>NW.js</code> 和 <code>Electron</code>不仅可以把 <code>html</code> 写的 <code>web</code> 页面打包成跨平台可以安装到电脑上面的软件，也可以通过 <code>javascript</code> 访问操作 系统原生的 <code>UI</code> 和 <code>Api</code>(控制窗口、添加菜单项目、托盘应用菜单、读写文件、访问剪贴板)。</li></ul><blockquote><p> <code>github</code> 的 <code>atom</code> 编辑器、微软的 <code>vscode</code> 编辑器，包括阿里内部的一些 软件也是用 <code>electron</code> 开发的</p></blockquote><p><strong>1. Electron 是由谁开发的?</strong></p><blockquote><p><code>Electron</code> 是由 <code>Github</code> 开发</p></blockquote><p><strong>2.  Electron 是什么?</strong></p><blockquote><p><code>Electron</code> 是一个用 <code>HTML</code>，<code>CSS</code> 和 <code>JavaScript</code> 来构建跨平台桌面应用程序的一个开源库</p></blockquote><p><strong>3. Electron 把 HTML，CSS 和 JavaScript 组合的程序构建为跨平台桌面应用程序的原理 是什么?</strong></p><blockquote><p>原理为 <code>Electron</code> 通过将 <code>Chromium</code> 和 <code>Node.js</code> 合并到同一个运行时环境中，并将其打包为 <code>Mac</code>，<code>Windows</code> 和 <code>Linux</code> 系统下的应用来实现这一目的。</p></blockquote><p><strong>4. Electron 何时出现的，为什么会出现?</strong></p><blockquote><p><code>Electron</code> 于 <code>2013</code> 年作为构建 <code>Atom</code> 的框架而被开发出来。这两个项目在 <code>2014</code> 春季开源。 (Atom:为 Github 上可编程的文本编辑器)</p></blockquote><p><strong>一些历史:</strong></p><ul><li><code>2013</code> 年 <code>4</code> 月 <code>Atom Shell</code> 项目启动 。</li><li><code>2014</code> 年 <code>5</code> 月 <code>Atom Shell</code> 被开源 。</li><li><code>2015</code> 年 <code>4</code> 月 <code>Atom Shell</code> 被重命名为 <code>Electron</code> </li><li><code>2016</code> 年 <code>5</code> 月 <code>Electron</code> 发布了 <code>v1.0.0</code> 版本 </li></ul><p><strong>5. Electron 当前流行程度?</strong></p><blockquote><p>目前 <code>Electron</code> 已成为开源开发者、初创企业和老牌公司常用的开发工具。</p></blockquote><p><strong>6. Electron 当前由那些人在维护支持?</strong></p><blockquote><p><code>Electron</code> 当前由 <code>Github</code> 上的一支团队和一群活跃的贡献者维护。有些贡献者是独立开发者，有些则在用 <code>Electron</code> 构建应用的大型公司里工作。</p></blockquote><p><strong>7. Electron 新版本多久发布一次?</strong></p><blockquote><p><code>Electron</code> 的版本发布相当频繁。每当 <code>Chromium</code>、<code>Node.js</code> 有重要的 <code>bug</code> 修复，新 <code>API</code> 或是版本更新时 <code>Electron</code> 会发布新版本。</p></blockquote><ul><li>一般 <code>Chromium</code> 发行新的稳定版后的一到两周之内，<code>Electron</code> 中 <code>Chromium</code> 的版本会对其进行更新，具体时间根据升级所需的工作量而定。<br>一般 <code>Node.js</code> 发行新的稳定版一个月后，<code>Electron</code> 中 <code>Node.js</code> 的版本会对其进行更新，具 体时间根据升级所需的工作量而定。</li></ul><p><strong>8. Electron 的核心理念是什么?</strong></p><blockquote><p><code>Electron</code> 的核心理念是:保持 <code>Electron</code> 的体积小和可持续性开发。<br>如:为了保持 <code>Electron</code> 的小巧 (文件体积) 和可持续性开发 (以防依赖库和 <code>API</code> 的泛滥) ， <code>Electron</code> 限制了所使用的核心项目的数量。<br>比如 <code>Electron</code> 只用了 <code>Chromium</code> 的渲染库而不是其全部组件。这使得升级 <code>Chromium</code> 更加容易，但也意味着 <code>Electron</code> 缺少了 <code>Google Chrome</code> 里的一些浏览器相关的特性。 添加到 <code>Electron</code> 的新功能应该主要是原生 <code>API</code>。 如果可以的话，一个功能应该尽可能的成 为一个 <code>Node.js</code> 模块。</p></blockquote><p><strong>9. Electron 当前的最新版本为多少?</strong></p><blockquote><p><code>Electron</code> 当前的最新版本为 <code>4.0.1</code> (当前时间为 <code>2019</code> 年 <code>1</code> 月 <code>6</code> 号)</p></blockquote><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><p><strong>1. 安装 electron</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g electron</span><br></pre></td></tr></table></figure><p><strong>2. 克隆一个仓库、快速启动一个项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆示例项目的仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入这个仓库</span></span><br><span class="line"><span class="built_in">cd</span> electron-quick-start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖并运行</span></span><br><span class="line">npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure><p><strong>3. 手动搭建一个 electron 项目</strong></p><ol><li>新建一个项目目录 例如: <code>electrondemo01</code></li><li>在 <code>electrondemo01</code> 目录下面新建三个文件: <code>index.html</code>、<code>main.js</code> 、<code>package.json</code></li><li><code>index.html</code> 里面用 <code>css</code> 进行布局(以前怎么写现在还是怎么写)</li><li>在 <code>main.js</code> 中写如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> electron =<span class="built_in">require</span>(<span class="string">'electron'</span>); <span class="comment">//electron 对象的引用</span></span><br><span class="line"><span class="keyword">const</span> app=electron.app; <span class="comment">//BrowserWindow 类的引用</span></span><br><span class="line"><span class="keyword">const</span> BrowserWindow=electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow=<span class="literal">null</span>; <span class="comment">//监听应用准备完成的事件 app.on('ready',function()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听应用准备完成的事件</span></span><br><span class="line">app.on(<span class="string">'ready'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建窗口</span></span><br><span class="line">    mainWindow=<span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;); mainWindow.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line">    </span><br><span class="line">    mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span>; &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听所有窗口关闭的事件 </span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// On OS X it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q </span></span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron . <span class="comment">#注意:命令后面有个点</span></span><br></pre></td></tr></table></figure><p><strong>4. electron-forge 搭建一个 electron 项目</strong></p><blockquote><p><code>electron-forge</code> 相当于 <code>electron</code> 的一个脚手架，可以让我们更方便的创建、运行、打包 <code>electron</code> 项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g electron-forge </span><br><span class="line"></span><br><span class="line">electron-forge init my-new-app </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-new-app</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h1 id="三、Electron-运行流程"><a href="#三、Electron-运行流程" class="headerlink" title="三、Electron 运行流程"></a>三、Electron 运行流程</h1><h2 id="3-1-Electron-运行的流程"><a href="#3-1-Electron-运行的流程" class="headerlink" title="3.1 Electron 运行的流程"></a>3.1 Electron 运行的流程</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7d07da8dccab3159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="3-2-Electron-主进程和渲染进程"><a href="#3-2-Electron-主进程和渲染进程" class="headerlink" title="3.2 Electron 主进程和渲染进程"></a>3.2 Electron 主进程和渲染进程</h2><ul><li><code>Electron</code> 运行 <code>package.json</code> 的 <code>main</code> 脚本的进程被称为主进程。 </li><li>在主进程中运行的脚本通过创建 <code>web</code> 页面来展示用户界面。 一个 <code>Electron</code> 应用总是有且只有一个主进程。</li><li>由于 <code>Electron</code> 使用了 <code>Chromium</code>(谷歌浏览器)来展示 <code>web</code> 页面，所以 <code>Chromium</code> 的 多进程架构也被使用到。 每个 <code>Electron</code> 中的 <code>web</code> 页面运行在它自己的渲染进程中。</li><li>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲 染进程里运行页面。 当一个 <code>BrowserWindow</code>实例被销毁后，相应的渲染进程也会被终止</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ed01221126a5fe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d84ba41d44a3e672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>进程:进程是计算机中的程序关于某数据集合上的一次运行活动，是 系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li><li>线程:在一个程序里的一个执行路线就叫做线程(<code>thread</code>)。更准确的定义是: 线程是“一个进程内部的控制序列”。</li><li>线程和进程:一个程序至少有一个进程,一个进程至少有一个线程</li></ul><h2 id="3-3-Electron-渲染进程中通过-Nodejs-读取本地文件"><a href="#3-3-Electron-渲染进程中通过-Nodejs-读取本地文件" class="headerlink" title="3.3 Electron 渲染进程中通过 Nodejs 读取本地文件"></a>3.3 Electron 渲染进程中通过 Nodejs 读取本地文件</h2><blockquote><p>在普通的浏览器中，<code>web</code>页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 <code>Electron</code> 的用户在 <code>Node.js</code> 的 <code>API</code>支持下可以在页面中和操作系统进行一些底层交 互。<br><code>Nodejs</code> 在主进程和渲染进程中都可以使用。渲染进程因为安全限制，不能直接操作生 <code>GUI</code>。虽然如此，因为集成了 Nodejs，渲染进程也有了操作系统底层 <code>API</code>的能力，<code>Nodejs</code> 中常用的 <code>Path</code>、<code>fs</code>、<code>Crypto</code> 等模块在 <code>Electron</code> 可以直接使用，方便我们处理链接、路径、 文件 <code>MD5</code> 等，同时 <code>npm</code> 还有成千上万的模块供我们选择。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>); </span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'package.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123; </span><br><span class="line">        content.textContent = data;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-4-Electron-开启调试模式"><a href="#3-4-Electron-开启调试模式" class="headerlink" title="3.4 Electron 开启调试模式"></a>3.4 Electron 开启调试模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainWindow.webContents.openDevTools();</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-62c31b57f8b94838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="四、Electron-模块介绍"><a href="#四、Electron-模块介绍" class="headerlink" title="四、Electron 模块介绍"></a>四、Electron 模块介绍</h1><blockquote><p><code>Electron</code> 模块介绍、<code>remote</code> 模块、通 过 <code>BrowserWindow</code> 打开新窗口</p></blockquote><h2 id="4-1-Electron-主进程和渲染进程中的模块"><a href="#4-1-Electron-主进程和渲染进程中的模块" class="headerlink" title="4.1 Electron 主进程和渲染进程中的模块"></a>4.1 Electron 主进程和渲染进程中的模块</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3c15bb39e7080862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="4-2-Electron-remote-模块"><a href="#4-2-Electron-remote-模块" class="headerlink" title="4.2 Electron remote 模块"></a>4.2 Electron remote 模块</h2><blockquote><p><code>remote</code> 模块提供了一种在渲染进程(网页)和主进程之间进行进程间通讯(<code>IPC</code>)的简便途径</p></blockquote><blockquote><p><code>Electron</code> 中, 与 <code>GUI</code> 相关的模块(如 <code>dialog</code>, <code>menu</code> 等)只存在于主进程，而不在渲染进程中 。为了能从渲染进程中使用它们，需要用<code>ipc</code>模块来给主进程发送进程间消息。使用 <code>remote</code> 模块，可以调用主进程对象的方法，而无需显式地发送进程间消息，这类似于 <code>Java</code> 的 <code>RMI</code></p></blockquote><h2 id="4-3-通过BrowserWindow-打开新窗口"><a href="#4-3-通过BrowserWindow-打开新窗口" class="headerlink" title="4.3 通过BrowserWindow 打开新窗口"></a>4.3 通过BrowserWindow 打开新窗口</h2><blockquote><p><code>Electron</code> 渲染进程中通过 <strong><code>remote</code> 模块调用主进程中的 <code>BrowserWindow</code></strong> 打开新窗口</p></blockquote><blockquote><p><a href="https://electronjs.org/docs/api/browser-window" target="_blank" rel="noopener">https://electronjs.org/docs/api/browser-window</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主进程代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制应用生命周期的模块 </span></span><br><span class="line"><span class="keyword">const</span> &#123;app&#125; = electron;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建本地浏览器窗口的模块 </span></span><br><span class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = electron;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向窗口对象的一个全局引用，如果没有这个引用，那么当该 javascript 对象被垃圾回收 的</span></span><br><span class="line"><span class="comment">// 时候该窗口将会自动关闭</span></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新的浏览器窗口</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">1104</span>, <span class="attr">height</span>: <span class="number">620</span>&#125;);<span class="comment">//570+50</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并且装载应用的 index.html 页面</span></span><br><span class="line">    win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/html/index.html`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打开开发工具页面</span></span><br><span class="line">    win.webContents.openDevTools();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当窗口关闭时调用的方法</span></span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 解除窗口对象的引用，通常而言如果应用支持多个窗口的话，你会在一个数组里 // 存放窗口对象，在窗口关闭的时候应当删除相应的元素。</span></span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 Electron 完成初始化并且已经创建了浏览器窗口，则该方法将会被调用。</span></span><br><span class="line"><span class="comment">// 有些 API 只能在该事件发生后才能被使用</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当所有的窗口被关闭后退出应用 </span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 对于 OS X 系统，应用和相应的菜单栏会一直激活直到用户通过 Cmd + Q 显式退出 </span></span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 对于 OS X 系统，当 dock 图标被点击后会重新创建一个 app 窗口，并且不会有其他</span></span><br><span class="line">    <span class="comment">// 窗口打开</span></span><br><span class="line">    <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">        createWindow(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个文件后面你可以直接包含你应用特定的由主进程运行的代码。 </span></span><br><span class="line"><span class="comment">// 也可以把这些代码放在另一个文件中然后在这里导入</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染进程代码 /src/render/index.js</span></span><br><span class="line"><span class="comment">// 打开新窗口属性用法有点类似vscode打开新的窗口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> BrowerWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.BrowserWindow;</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    win = <span class="keyword">new</span> BrowerWindow(&#123; </span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">200</span>, </span><br><span class="line">        frame: <span class="literal">false</span>, <span class="comment">// false隐藏关闭按钮、菜单选项 true显示</span></span><br><span class="line">        fullscreen:<span class="literal">true</span>, <span class="comment">// 全屏展示</span></span><br><span class="line">        transparent: <span class="literal">true</span> </span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">    win.loadURL(path.join(<span class="string">'file:'</span>,__dirname,<span class="string">'news.html'</span>));</span><br><span class="line"></span><br><span class="line">    win.on(<span class="string">'close'</span>,()=&gt;&#123;win = <span class="literal">null</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fc3bd825336aac08.png" alt="image.png"></p><h1 id="五、自定义顶部菜单-右键菜单"><a href="#五、自定义顶部菜单-右键菜单" class="headerlink" title="五、自定义顶部菜单/右键菜单"></a>五、自定义顶部菜单/右键菜单</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-94da6a6688b084d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="5-1-主进程中调用Menu模块-自定义软件顶部菜单"><a href="#5-1-主进程中调用Menu模块-自定义软件顶部菜单" class="headerlink" title="5.1 主进程中调用Menu模块-自定义软件顶部菜单"></a>5.1 主进程中调用Menu模块-自定义软件顶部菜单</h2><blockquote><p><a href="https://electronjs.org/docs/api/menu-item" target="_blank" rel="noopener">https://electronjs.org/docs/api/menu-item</a></p></blockquote><blockquote><p><code>Electron</code> 中 <code>Menu</code> 模块可以用来创建原生菜单，它可用作应用菜单和 <code>context</code> 菜单</p></blockquote><blockquote><p>这个模块是一个主进程的模块，并且可以通过 <code>remote</code> 模块给渲染进程调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main/menu.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文档 https://electronjs.org/docs/api/menu-item</span></span><br><span class="line"><span class="comment">// 菜单项目</span></span><br><span class="line"><span class="keyword">let</span> menus = [</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'文件'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'新建文件'</span>,</span><br><span class="line">                accelerator: <span class="string">'ctrl+n'</span>, <span class="comment">// 绑定快捷键</span></span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 绑定事件</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'新建文件'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'新建窗口'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'新建窗口'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'编辑'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'复制'</span>,</span><br><span class="line">                role: <span class="string">'copy'</span> <span class="comment">// 调用内置角色实现对应功能</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'剪切'</span>,</span><br><span class="line">                role: <span class="string">'cut'</span>  <span class="comment">// 调用内置角色实现对应功能</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'视图'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'浏览'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'搜索'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = Menu.buildFromTemplate(menus)</span><br><span class="line">Menu.setApplicationMenu(m)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/menu.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7f8faae7e2a933e4.png" alt="image.png"></p><blockquote><p>我们给菜单绑定事件，在命令行控制台可以看到</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d3bf0c07d42771eb.png" alt="image.png"></p><h2 id="5-2-渲染进程中调用Menu模块"><a href="#5-2-渲染进程中调用Menu模块" class="headerlink" title="5.2 渲染进程中调用Menu模块"></a>5.2 渲染进程中调用Menu模块</h2><blockquote><p>不推荐使用这种方式，建议在主进程中使用</p></blockquote><p><strong>1. remote</strong></p><blockquote><p>通过<code>remote</code>调用主进程的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 菜单引入的方式发生变化</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码和上面菜单一样</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><strong>2. 加入index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/menu.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-渲染进程中自定义右键菜单"><a href="#5-3-渲染进程中自定义右键菜单" class="headerlink" title="5.3 渲染进程中自定义右键菜单"></a>5.3 渲染进程中自定义右键菜单</h2><p><strong>1. 定义菜单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render/menu.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在渲染进程中通过remote模块调用主进程中的模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote</span><br><span class="line"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文档 https://electronjs.org/docs/api/menu-item</span></span><br><span class="line"><span class="comment">// 菜单项目</span></span><br><span class="line"><span class="keyword">let</span> menus = [</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'文件'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'新建文件'</span>,</span><br><span class="line">                accelerator: <span class="string">'ctrl+n'</span>, <span class="comment">// 绑定快捷键</span></span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 绑定事件</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'新建文件'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'新建窗口'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'新建窗口'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'编辑'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'复制'</span>,</span><br><span class="line">                role: <span class="string">'copy'</span> <span class="comment">// 调用内置角色实现对应功能</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'剪切'</span>,</span><br><span class="line">                role: <span class="string">'cut'</span>  <span class="comment">// 调用内置角色实现对应功能</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'视图'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'浏览'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'搜索'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = Menu.buildFromTemplate(menus)</span><br><span class="line"><span class="comment">// Menu.setApplicationMenu(m)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定右键菜单</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, (e)=&gt;&#123;</span><br><span class="line">   e.preventDefault()</span><br><span class="line">   m.popup(&#123;</span><br><span class="line">    <span class="built_in">window</span>: remote.getCurrentWindow()</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e241c2350cf1aeba.png" alt="image.png"></p><p><strong>2. 引入</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/menu.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="六、进程通信"><a href="#六、进程通信" class="headerlink" title="六、进程通信"></a>六、进程通信</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2a9dddc335959ec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>渲染进程 <a href="https://electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener">https://electronjs.org/docs/api/ipc-renderer</a></li><li>主进程 <a href="https://electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">https://electronjs.org/docs/api/ipc-main</a></li></ul><h2 id="6-1-主进程与渲染进程之间的通信"><a href="#6-1-主进程与渲染进程之间的通信" class="headerlink" title="6.1 主进程与渲染进程之间的通信"></a>6.1 主进程与渲染进程之间的通信</h2><blockquote><p>有时候我们想在渲染进程中通过一个事件去执行主进程里面的方法。或者在渲染进程中通知 主进程处理事件，主进程处理完成后广播一个事件让渲染进程去处理一些事情。这个时候就 用到了主进程和渲染进程之间的相互通信</p></blockquote><blockquote><p><code>Electron</code> 主进程，和渲染进程的通信主要用到两个模块:<code>ipcMain</code> 和 <code>ipcRenderer</code></p></blockquote><ul><li><code>ipcMain</code>:当在主进程中使用时，它处理从渲染器进程(网页)发送出来的异步和同步信息,当然也有可能从主进程向渲染进程发送消息。</li><li><code>ipcRenderer</code>: 使用它提供的一些方法从渲染进程 (<code>web</code> 页面) 发送同步或异步的消息到主进程。 也可以接收主进程回复的消息</li></ul><h3 id="6-1-1-渲染进程给主进程发送异步消息"><a href="#6-1-1-渲染进程给主进程发送异步消息" class="headerlink" title="6.1.1 渲染进程给主进程发送异步消息"></a>6.1.1 渲染进程给主进程发送异步消息</h3><blockquote><p>间接实现渲染进程执行主进程里面的方法</p></blockquote><p><strong>1. 引入ipcRender</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>在 渲染进程中执行主进程里的方法（异步）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/ipcRender.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程发送消息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/ipcRender.js</span></span><br><span class="line"><span class="comment">//渲染进程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> send = <span class="built_in">document</span>.querySelector(<span class="string">'#send'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">send.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传递消息给主进程</span></span><br><span class="line">    <span class="comment">// 异步</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'sendMsg'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 主进程接收消息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程处理渲染进程广播数据</span></span><br><span class="line">ipcMain.on(<span class="string">'sendMsg'</span>, (event, data)=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data\n '</span>, data)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'event\n '</span>, event)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-b7e836d9e6539014.png" alt="image.png"></p><h3 id="6-1-2-渲染进程发送消息，主进程接收消息并反馈"><a href="#6-1-2-渲染进程发送消息，主进程接收消息并反馈" class="headerlink" title="6.1.2 渲染进程发送消息，主进程接收消息并反馈"></a>6.1.2 渲染进程发送消息，主进程接收消息并反馈</h3><blockquote><p>渲染进程给主进程发送异步消息，主进程接收到异步消息以后通知渲染进程</p></blockquote><p><strong>1. 引入ipcRender</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendFeedback"</span>&gt;</span>在 渲染进程中执行主进程里的方法，并反馈给主进程（异步）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/ipcRender.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程发送消息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/ipcRender.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染进程</span></span><br><span class="line"><span class="keyword">let</span> sendFeedback = <span class="built_in">document</span>.querySelector(<span class="string">'#sendFeedback'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向主进程发送消息</span></span><br><span class="line">sendFeedback.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发主进程里面的方法</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'sendFeedback'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 主进程收到消息处理并广播反馈通知渲染进程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主进程处理渲染进程广播数据，并反馈给渲染进程</span></span><br><span class="line">ipcMain.on(<span class="string">'sendFeedback'</span>, (event, data)=&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log('data\n ', data)</span></span><br><span class="line">    <span class="comment">// console.log('event\n ', event)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主进程给渲染进程广播数据</span></span><br><span class="line">    event.sender.send(<span class="string">'sendFeedbackToRender'</span>, <span class="string">'来自主进程的反馈'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>5. 渲染进程处理主进程广播的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/ipcRender.js</span></span><br><span class="line"><span class="comment">// 向主进程发送消息后，接收主进程广播的事件</span></span><br><span class="line">ipcRenderer.on(<span class="string">'sendFeedbackToRender'</span>, (e, data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'event\n '</span>, e)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data\n '</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7b22ed78b9a19d5a.png" alt="image.png"></p><h3 id="6-1-3-渲染进程给主进程发送同步消息"><a href="#6-1-3-渲染进程给主进程发送同步消息" class="headerlink" title="6.1.3 渲染进程给主进程发送同步消息"></a>6.1.3 渲染进程给主进程发送同步消息</h3><p><strong>1. 引入ipcRender</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendSync"</span>&gt;</span>渲染进程和主进程同步通信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/ipcRender.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程给主进程同步通信</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/ipcMain.js</span></span><br><span class="line"><span class="keyword">let</span> sendSync = <span class="built_in">document</span>.querySelector(<span class="string">'#sendSync'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和主进程同步通信</span></span><br><span class="line">sendSync.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 同步广播数据</span></span><br><span class="line">   <span class="keyword">let</span> msg =  ipcRenderer.sendSync(<span class="string">'sendsync'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 同步返回主进程反馈的数据</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'msg\n '</span>, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 主进程接收数据处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和主进程同步通信 接收同步广播</span></span><br><span class="line">ipcMain.on(<span class="string">'sendsync'</span>, (event, data)=&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log('data\n ', data)</span></span><br><span class="line">    <span class="comment">// console.log('event\n ', event)</span></span><br><span class="line">    <span class="comment">// 主进程给渲染进程广播数据</span></span><br><span class="line">    event.returnValue =<span class="string">'渲染进程和主进程同步通信 接收同步广播，来自主进程的反馈.'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-abdff579c3fb74fa.png" alt="image.png"></p><h3 id="6-1-4-渲染进程广播通知主进程打开窗口"><a href="#6-1-4-渲染进程广播通知主进程打开窗口" class="headerlink" title="6.1.4 渲染进程广播通知主进程打开窗口"></a>6.1.4 渲染进程广播通知主进程打开窗口</h3><blockquote><p>一般都是在渲染进程中执行广播操作，去通知主进程完成任务</p></blockquote><p><strong>1. 引入openWindow</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendSync"</span>&gt;</span>渲染进程和主进程同步通信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/openWindow.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain2.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程通知主进程打开窗口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/openWindow.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> openWindow = <span class="built_in">document</span>.querySelector(<span class="string">'#openWindow'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和渲染进程直接的通信========</span></span><br><span class="line">openWindow.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过广播的形式 通知主进程执行操作</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'openwindow'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 主进程收到通知执行操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain2.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> &#123; ipcMain,BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到广播</span></span><br><span class="line">ipcMain.on(<span class="string">'openwindow'</span>, (e, data)=&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用window打开新窗口</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">400</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    win.loadURL(path.join(<span class="string">'file:'</span>,__dirname, <span class="string">'../news.html'</span>));</span><br><span class="line">    win.webContents.openDevTools()</span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d094a09efe23f09b.png" alt="image.png"></p><h2 id="6-2-渲染进程与渲染进程之间的通信"><a href="#6-2-渲染进程与渲染进程之间的通信" class="headerlink" title="6.2 渲染进程与渲染进程之间的通信"></a>6.2 渲染进程与渲染进程之间的通信</h2><blockquote><p>也就是两个窗口直接的通信</p></blockquote><h3 id="6-2-1-localstorage传值"><a href="#6-2-1-localstorage传值" class="headerlink" title="6.2.1 localstorage传值"></a>6.2.1 localstorage传值</h3><blockquote><p><code>Electron</code> 渲染进程通过 <code>localstorage</code> 给另一个渲染进程传值</p></blockquote><p><strong>1. 引入openWindow</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendSync"</span>&gt;</span>渲染进程和主进程同步通信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/openWindow.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain2.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程通知主进程打开窗口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/openWindow.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> openWindow = <span class="built_in">document</span>.querySelector(<span class="string">'#openWindow'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和渲染进程直接的通信========</span></span><br><span class="line">openWindow.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过广播的形式 通知主进程执行操作</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'openwindow'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ======= localstorage传值 =====</span></span><br><span class="line">     localStorage.setItem(<span class="string">'username'</span>, <span class="string">'poetries'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 新建news页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/news.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    news page</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/news.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/news.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> username = localStorage.getItem(<span class="string">'username'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(username)</span><br></pre></td></tr></table></figure><p><strong>5. 主进程收到通知执行操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain2.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> &#123; ipcMain,BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到广播</span></span><br><span class="line">ipcMain.on(<span class="string">'openwindow'</span>, (e, data)=&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用window打开新窗口</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">400</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    win.loadURL(path.join(<span class="string">'file:'</span>,__dirname, <span class="string">'../news.html'</span>));</span><br><span class="line">    win.webContents.openDevTools()</span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-2-2-BrowserWindow和webContents方式实现"><a href="#6-2-2-BrowserWindow和webContents方式实现" class="headerlink" title="6.2.2 BrowserWindow和webContents方式实现"></a>6.2.2 BrowserWindow和webContents方式实现</h3><blockquote><p>通过 <code>BrowserWindow</code> 和 <code>webContents</code> 模块实现渲染进程和渲染进程的通信</p></blockquote><blockquote><p><code>webContents</code> 是一个事件发出者.它负责渲染并控制网页，也是 <code>BrowserWindow</code> 对象的属性</p></blockquote><p><strong>需要了解的几个知识点</strong></p><ol><li>获取当前窗口的 <code>id</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winId = BrowserWindow.getFocusedWindow().id;</span><br></pre></td></tr></table></figure><ol start="2"><li>监听当前窗口加载完成的事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">win.webContents.on(<span class="string">'did-finish-load'</span>,(event) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>同一窗口之间广播数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">win.webContents.on(<span class="string">'did-finish-load'</span>,(event) =&gt; &#123;</span><br><span class="line">    win.webContents.send(<span class="string">'msg'</span>,winId,<span class="string">'我是 index.html 的数据'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>通过 <code>id</code> 查找窗口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> win = BrowserWindow.fromId(winId);</span><br></pre></td></tr></table></figure><blockquote><p>下面是具体演示</p></blockquote><p><strong>1. 引入openWindow</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendSync"</span>&gt;</span>渲染进程和主进程同步通信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/openWindow.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 引入ipcMain2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/ipcMain2.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 渲染进程通知主进程打开窗口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/openWindow.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> openWindow = <span class="built_in">document</span>.querySelector(<span class="string">'#openWindow'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和渲染进程直接的通信========</span></span><br><span class="line">openWindow.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过广播的形式 通知主进程执行操作</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'openwindow'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 主进程收到通知执行操作</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain2.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; ipcMain,BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到广播</span></span><br><span class="line">ipcMain.on(<span class="string">'openwindow'</span>, (e, userInfo)=&gt; &#123;</span><br><span class="line">    <span class="comment">// 调用window打开新窗口</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">400</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    win.loadURL(path.join(<span class="string">'file:'</span>,__dirname, <span class="string">'../news.html'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新开窗口调试模式</span></span><br><span class="line">    win.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把渲染进程传递过来的数据再次传递给渲染进程news</span></span><br><span class="line">    <span class="comment">// 等待窗口加载完</span></span><br><span class="line">    win.webContents.on(<span class="string">'did-finish-load'</span>, ()=&gt;[</span><br><span class="line">        win.webContents.send(<span class="string">'toNews'</span>, userInfo)</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>5. news接收主进程传递的数据</strong></p><blockquote><p>数据经过渲染进程-&gt;主进程-&gt;<code>news</code>渲染进程</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--news页面--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    news page</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/news.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/news.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let username = localStorage.getItem('username')</span></span><br><span class="line"><span class="comment">// console.log(username)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听主进程传递过来的数据 </span></span><br><span class="line">ipcRenderer.on(<span class="string">'toNews'</span>,(e, userInfo)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(userInfo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a50aae62116329c2.png" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-48de9dfe0df0cd6c.png" alt="image.png"></p><blockquote><p>那么，这里有一个问题，<code>news</code>进程接收到了广播后如何给出反馈呢？</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cc88a9c47cbefcd0.png" alt="image.png"></p><p><strong>1. 在主进程中获取窗口ID传递</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/ipcMain2.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; ipcMain,BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到广播</span></span><br><span class="line">ipcMain.on(<span class="string">'openwindow'</span>, (e, userInfo)=&gt; &#123;</span><br><span class="line">      <span class="comment">// 获取当前窗口ID 放在第一行保险  因为后面也打开了新窗口使得获取的ID有问题</span></span><br><span class="line">    <span class="keyword">let</span> winId = BrowserWindow.getFocusedWindow().id</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用window打开新窗口</span></span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">400</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    win.loadURL(path.join(<span class="string">'file:'</span>,__dirname, <span class="string">'../news.html'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新开窗口调试模式</span></span><br><span class="line">    win.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把渲染进程传递过来的数据再次传递给渲染进程news</span></span><br><span class="line">    <span class="comment">// 等待窗口加载完</span></span><br><span class="line">    win.webContents.on(<span class="string">'did-finish-load'</span>, ()=&gt;[</span><br><span class="line">        win.webContents.send(<span class="string">'toNews'</span>, userInfo, winId)</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 在news进程中广播数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/news.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里 在渲染进程中需要从remote中获取BrowserWindow</span></span><br><span class="line"><span class="keyword">const</span> BrowerWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.BrowserWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let username = localStorage.getItem('username')</span></span><br><span class="line"><span class="comment">// console.log(username)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听主进程传递过来的数据 </span></span><br><span class="line">ipcRenderer.on(<span class="string">'toNews'</span>,(e, userInfo, winId)=&gt;&#123;</span><br><span class="line">    <span class="comment">// windID 第一个窗口ID</span></span><br><span class="line">    <span class="comment">// 获取对应ID的窗口</span></span><br><span class="line">    <span class="keyword">let</span> firstWin = BrowerWindow.fromId(winId)</span><br><span class="line">    firstWin.webContents.send(<span class="string">'toIndex'</span>, <span class="string">'来自news进程反馈的信息'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(userInfo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3. 在另一个渲染进程中处理广播</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">let</span> openWindow = <span class="built_in">document</span>.querySelector(<span class="string">'#openWindow'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程和渲染进程直接的通信========</span></span><br><span class="line">openWindow.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传递消息给主进程</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'openwindow'</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递给打开的窗口 渲染进程和渲染进程直接的通信</span></span><br><span class="line">    localStorage.setItem(<span class="string">'username'</span>, <span class="string">'poetries'</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收news渲染进程传递回来的消息</span></span><br><span class="line">ipcRenderer.on(<span class="string">'toIndex'</span>, (e, data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'==='</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1a80c8ad2194b480.png" alt="image.png"></p><h1 id="七、Electron-Shell-模块"><a href="#七、Electron-Shell-模块" class="headerlink" title="七、Electron Shell 模块"></a>七、Electron Shell 模块</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-eabc8dbe46f65cfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="7-1-Shell-模块使用"><a href="#7-1-Shell-模块使用" class="headerlink" title="7.1 Shell 模块使用"></a>7.1 Shell 模块使用</h2><blockquote><p>文档 <a href="https://electronjs.org/docs/api/shell" target="_blank" rel="noopener">https://electronjs.org/docs/api/shell</a></p></blockquote><blockquote><p><code>Electron Shell</code> 模块在用户默认浏览器 中打开 <code>URL</code> 以及 <code>Electron DOM webview</code> 标签。<code>Shell</code>既属于主进程模块又是渲染进程模块</p></blockquote><blockquote><p><code>shell</code> 模块提供了集成其他桌面客户端的关联功能</p></blockquote><p><strong>1. 引入</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"shellDom"</span>&gt;</span>通过shell打开外部链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/shell.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. shell.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/render/shell.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; shell &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">let</span> shellDom = <span class="built_in">document</span>.querySelector(<span class="string">'#shellDom'</span>);</span><br><span class="line"></span><br><span class="line">shellDom.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   shell.openExternal(<span class="string">'https://github.com/poetries'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-Electron-DOM-lt-webview-gt-标签"><a href="#7-2-Electron-DOM-lt-webview-gt-标签" class="headerlink" title="7.2 Electron DOM &lt;webview&gt; 标签"></a>7.2 <code>Electron DOM</code> <code>&lt;webview&gt;</code> 标签</h2><blockquote><p><code>Webview</code> 与 <code>iframe</code> 有点相似，但是与 <code>iframe</code> 不同, <code>webview</code> 和你的应用运行的是不同的进程。它不拥有渲染进程的权限，并且应用和嵌入内容之间的交互全部都是异步的。因为这能 保证应用的安全性不受嵌入内容的影响。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html中引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webview</span> <span class="attr">id</span>=<span class="string">"webview"</span> <span class="attr">src</span>=<span class="string">"http://blog.poetries.top"</span> <span class="attr">style</span>=<span class="string">"position:fixed; width:100%; height:100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-shell模块-lt-webview-gt-结合Menu模块使用案例"><a href="#7-3-shell模块-lt-webview-gt-结合Menu模块使用案例" class="headerlink" title="7.3 shell模块&lt;webview&gt;结合Menu模块使用案例"></a>7.3 <code>shell</code>模块<code>&lt;webview&gt;</code>结合<code>Menu</code>模块使用案例</h2><p><strong>1. 新建src/render/webview.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">let</span> myWebview = <span class="built_in">document</span>.querySelector(<span class="string">'#myWebview'</span>)</span><br><span class="line"></span><br><span class="line">ipcRenderer.on(<span class="string">'openwebview'</span>, (e, url)=&gt;&#123;</span><br><span class="line">    myWebview.src = url</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 引入src/index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">webview</span> <span class="attr">id</span>=<span class="string">"myWebview"</span> <span class="attr">src</span>=<span class="string">"http://blog.poetries.top"</span> <span class="attr">style</span>=<span class="string">"position:fixed; width:100%; height:100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/webview.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 新建src/main/menu.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">const</span> &#123; shell, Menu, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前窗口渲染网页</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWebView</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前窗口Id</span></span><br><span class="line">    <span class="keyword">let</span> win = BrowserWindow.getFocusedWindow()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广播通知渲染进程打开webview</span></span><br><span class="line">    win.webContents.send(<span class="string">'openwebview'</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在窗口外打开网页</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWeb</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    shell.openExternal(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = [</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'帮助'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'关于我们'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    openWeb(<span class="string">'http://blog.poetries.top'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'separator'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'联系我们'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    openWeb(<span class="string">'https://github.com/poetries'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">        label: <span class="string">'加载网页'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'博客'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    openWebView(<span class="string">'http://blog.poetries.top'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'separator'</span> <span class="comment">// 分隔符</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'GitHub'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    openWebView(<span class="string">'https://github.com/poetries'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'separator'</span> <span class="comment">// 分隔符</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'简书'</span>,</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    openWebView(<span class="string">'https://www.jianshu.com/users/94077fcddfc0/timeline'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    label: <span class="string">'视频网站'</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'优酷'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                openWebView(<span class="string">'https://www.youku.com'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'separator'</span> <span class="comment">// 分隔符</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'爱奇艺'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                openWebView(<span class="string">'https://www.iqiyi.com/'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'separator'</span> <span class="comment">// 分隔符</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'腾讯视频'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                openWebView(<span class="string">'https://v.qq.com/'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = Menu.buildFromTemplate(template)</span><br><span class="line">Menu.setApplicationMenu(m)</span><br></pre></td></tr></table></figure><p><strong>4. 引入menu</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程src/index.js中引入</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建菜单  </span></span><br><span class="line">  <span class="comment">// 引入菜单模块</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./main/menu.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-96d5d9b578ae4503.png" alt="image.png"></p><h1 id="八、Electron-dialog-弹出框"><a href="#八、Electron-dialog-弹出框" class="headerlink" title="八、Electron dialog 弹出框"></a>八、Electron dialog 弹出框</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7aafe8b93818de91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>文档 <a href="https://electronjs.org/docs/api/dialog" target="_blank" rel="noopener">https://electronjs.org/docs/api/dialog</a></p></blockquote><blockquote><p><code>dialog</code>属于主进程中的模块</p></blockquote><blockquote><p><code>dialog</code> 模块提供了 <code>api</code> 来展示原生的系统对话框，例如打开文件框，<code>alert</code> 框， 所以 <code>web</code> 应用可以给用户带来跟系统应用相同的体验</p></blockquote><p><strong>1. 在src/index.html中引入</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"showError"</span>&gt;</span>showError<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"showMsg"</span>&gt;</span>showMsg<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"showOpenDialog"</span>&gt;</span>showOpenDialog<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"saveDialog"</span>&gt;</span>saveDialog<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/dialog.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 新建render/dialog.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render/dialog.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showError = <span class="built_in">document</span>.querySelector(<span class="string">'#showError'</span>);</span><br><span class="line"><span class="keyword">let</span> showMsg = <span class="built_in">document</span>.querySelector(<span class="string">'#showMsg'</span>);</span><br><span class="line"><span class="keyword">let</span> showOpenDialog = <span class="built_in">document</span>.querySelector(<span class="string">'#showOpenDialog'</span>);</span><br><span class="line"><span class="keyword">let</span> saveDialog = <span class="built_in">document</span>.querySelector(<span class="string">'#saveDialog'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">showError.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    remote.dialog.showErrorBox(<span class="string">'警告'</span>, <span class="string">'操作有误'</span>)</span><br><span class="line">&#125;</span><br><span class="line">showMsg.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    remote.dialog.showMessageBox(&#123;</span><br><span class="line">        type: <span class="string">'info'</span>,</span><br><span class="line">        title: <span class="string">'提示信息'</span>,</span><br><span class="line">        message: <span class="string">'内容'</span>,</span><br><span class="line">        buttons: [<span class="string">'确定'</span>, <span class="string">'取消'</span>]</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(index)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">showOpenDialog.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    remote.dialog.showOpenDialog(&#123;</span><br><span class="line">        <span class="comment">// 打开文件夹</span></span><br><span class="line">        properties: [<span class="string">'openDirectory'</span>, <span class="string">'openFile'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文件</span></span><br><span class="line">        <span class="comment">// properties: ['openFile']</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">saveDialog.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    remote.dialog.showSaveDialog(&#123;</span><br><span class="line">        title: <span class="string">'Save File'</span>,</span><br><span class="line">        defaultPath: <span class="string">'/Users/poetry/Downloads/'</span>,</span><br><span class="line">        <span class="comment">// filters 指定一个文件类型数组，用于规定用户可见或可选的特定类型范围</span></span><br><span class="line">        filters: [</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'Images'</span>, <span class="attr">extensions</span>: [<span class="string">'jpg'</span>, <span class="string">'png'</span>, <span class="string">'gif'</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'Movies'</span>, <span class="attr">extensions</span>: [<span class="string">'mkv'</span>, <span class="string">'avi'</span>, <span class="string">'mp4'</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'Custom File Type'</span>, <span class="attr">extensions</span>: [<span class="string">'as'</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'All Files'</span>, <span class="attr">extensions</span>: [<span class="string">'*'</span>] &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 不是真的保存 ，具体还需nodejs处理</span></span><br><span class="line">        <span class="built_in">console</span>.log(path)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>showError</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote.dialog.showErrorBox(<span class="string">'警告'</span>, <span class="string">'操作有误'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-209b3adbfc2dacac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>showMessageBox</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">remote.dialog.showMessageBox(&#123;</span><br><span class="line">    type: <span class="string">'info'</span>,</span><br><span class="line">    title: <span class="string">'提示信息'</span>,</span><br><span class="line">    message: <span class="string">'内容'</span>,</span><br><span class="line">    buttons: [<span class="string">'确定'</span>, <span class="string">'取消'</span>]</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-89ef356b82380150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>showOpenDialog</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">remote.dialog.showOpenDialog(&#123;</span><br><span class="line">    <span class="comment">// 打开文件夹</span></span><br><span class="line">    properties: [<span class="string">'openDirectory'</span>, <span class="string">'openFile'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="comment">// properties: ['openFile']</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2cf5712d5571e731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>showSaveDialog</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">remote.dialog.showSaveDialog(&#123;</span><br><span class="line">    title: <span class="string">'Save File'</span>,</span><br><span class="line">    defaultPath: <span class="string">'/Users/poetry/Downloads/'</span>,</span><br><span class="line">    <span class="comment">// filters 指定一个文件类型数组，用于规定用户可见或可选的特定类型范围</span></span><br><span class="line">    filters: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'Images'</span>, <span class="attr">extensions</span>: [<span class="string">'jpg'</span>, <span class="string">'png'</span>, <span class="string">'gif'</span>] &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'Movies'</span>, <span class="attr">extensions</span>: [<span class="string">'mkv'</span>, <span class="string">'avi'</span>, <span class="string">'mp4'</span>] &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'Custom File Type'</span>, <span class="attr">extensions</span>: [<span class="string">'as'</span>] &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'All Files'</span>, <span class="attr">extensions</span>: [<span class="string">'*'</span>] &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不是真的保存 ，具体还需nodejs处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(path)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e97ca8b42a31121b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="九、实现一个类似EditPlus的简易记事本代码编辑器"><a href="#九、实现一个类似EditPlus的简易记事本代码编辑器" class="headerlink" title="九、实现一个类似EditPlus的简易记事本代码编辑器"></a>九、实现一个类似EditPlus的简易记事本代码编辑器</h1><blockquote><p>代码 <a href="https://github.com/poetries/electron-demo/tree/master/notepad" target="_blank" rel="noopener">https://github.com/poetries/electron-demo/tree/master/notepad</a></p></blockquote><h1 id="十、系统托盘、托盘右键菜单、托盘图标闪烁"><a href="#十、系统托盘、托盘右键菜单、托盘图标闪烁" class="headerlink" title="十、系统托盘、托盘右键菜单、托盘图标闪烁"></a>十、系统托盘、托盘右键菜单、托盘图标闪烁</h1><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e891469217a99101.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>文档 <a href="https://electronjs.org/docs/api/tray" target="_blank" rel="noopener">https://electronjs.org/docs/api/tray</a></p></blockquote><blockquote><p>系统托盘，托盘右键菜单、托盘图标闪烁 点击右上角关闭按钮隐藏到托盘(仿杀毒软件)</p></blockquote><p><strong>1. 引入文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">const</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./main/tray.js'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2. Electron 创建任务栏图标以及任务栏图标右键菜单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/tray.js</span></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    Menu, Tray, app, BrowserWindow</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appIcon = <span class="keyword">new</span> Tray(path.join(__dirname, <span class="string">'../static/lover.png'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate([</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'设置'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//打开相应页面 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'帮助'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'关于'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'退出'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="comment">// BrowserWindow.getFocusedWindow().webContents().send('close-main-window');</span></span><br><span class="line">            app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br><span class="line"><span class="comment">// 鼠标放上去提示信息</span></span><br><span class="line">appIcon.setToolTip(<span class="string">'hello poetries'</span>);</span><br><span class="line">appIcon.setContextMenu(menu);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5b774901ba687b8d.png" alt="mac系统托盘"></p><p><strong>3. 监听任务栏图标的单击、双击事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现点击关闭按钮，让应用保存在托盘里面，双击托盘打开</span></span><br><span class="line"><span class="keyword">let</span> win = BrowserWindow.getFocusedWindow()</span><br><span class="line"></span><br><span class="line">win.on(<span class="string">'close'</span>, (e)=&gt;&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    win.hide()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">iconTray.on(<span class="string">'double-click'</span>, (e)=&gt;&#123;</span><br><span class="line">    win.show()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4. Electron 点击右上角关闭按钮隐藏任务栏图标</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> win = BrowserWindow.getFocusedWindow();</span><br><span class="line"></span><br><span class="line">win.on(<span class="string">'close'</span>, (e) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(win.isFocused());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!win.isFocused()) &#123;</span><br><span class="line">        win = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        e.preventDefault();<span class="comment">/*阻止应用退出*/</span></span><br><span class="line">        win.hide();<span class="comment">/*隐藏当前窗口*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>5. Electron 实现任务栏闪烁图标</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appIcon = <span class="keyword">new</span> Tray(path.join(__dirname, <span class="string">'../static/lover.png'</span>));</span><br><span class="line"></span><br><span class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        appIcon.setImage(path.join(__dirname, <span class="string">'../static/empty.ico'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        appIcon.setImage(path.join(__dirname, <span class="string">'../static/lover.png'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="number">500</span>);</span><br></pre></td></tr></table></figure><h1 id="十一、消息通知、监听网络变-化、网络变化弹出通知框"><a href="#十一、消息通知、监听网络变-化、网络变化弹出通知框" class="headerlink" title="十一、消息通知、监听网络变 化、网络变化弹出通知框"></a>十一、消息通知、监听网络变 化、网络变化弹出通知框</h1><h2 id="11-1-消息通知"><a href="#11-1-消息通知" class="headerlink" title="11.1 消息通知"></a>11.1 消息通知</h2><p><strong>1. Electron 实现消息通知</strong></p><blockquote><p><code>Electron</code> 里面的消息通知是基于 <code>h5</code> 的通知 <code>api</code> 实现的</p></blockquote><blockquote><p>文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/notification" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/notification</a></p></blockquote><p><strong>1. 新建notification.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h5api实现通知</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    title: <span class="string">'electron 通知API'</span>,</span><br><span class="line">    body: <span class="string">'hello poetries'</span>,</span><br><span class="line">    icon: path.join(<span class="string">'../static/img/favicon2.ico'</span>) <span class="comment">// 通知图标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#showNotification'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> myNotification  = <span class="keyword">new</span> <span class="built_in">window</span>.Notification(options.title, options)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 消息可点击</span></span><br><span class="line">    myNotification.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click notification'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 引入</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"showNotification"</span>&gt;</span>弹出消息通知<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/notification.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mac</code>上的消息通知</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9fbaee5cd9c9ad09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mac上的消息通知"></p><h2 id="11-2-监听网络变化"><a href="#11-2-监听网络变化" class="headerlink" title="11.2 监听网络变化"></a>11.2 监听网络变化</h2><p><strong>1. 基本使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 监听网络变化</span></span><br><span class="line"><span class="comment">// 端开网络 再次连接测试</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'online'</span>)</span><br><span class="line"> &#125;); </span><br><span class="line"> </span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'offline'</span>)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p> <strong>2. 监听网络变化实现消息通知</strong></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 端开网络 再次连接测试</span></span><br><span class="line"><span class="comment">// 监听网络变化实现消息通知</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'online'</span>)</span><br><span class="line"> &#125;); </span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 断开网络触发事件</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        title: <span class="string">'QQ邮箱'</span>,</span><br><span class="line">        body: <span class="string">'网络异常，请检查你的网络'</span>,</span><br><span class="line">        icon: path.join(<span class="string">'../static/img/favicon2.ico'</span>) <span class="comment">// 通知图标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> myNotification  = <span class="keyword">new</span> <span class="built_in">window</span>.Notification(options.title, options)</span><br><span class="line">    myNotification.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click notification'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p> <img src="https://upload-images.jianshu.io/upload_images/1480597-e2ae4e20a2229ef5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="十二、注册全局快捷键-剪切板事件-nativeImage-模块"><a href="#十二、注册全局快捷键-剪切板事件-nativeImage-模块" class="headerlink" title="十二、注册全局快捷键/剪切板事件/nativeImage 模块"></a>十二、注册全局快捷键/剪切板事件/nativeImage 模块</h1><blockquote><p><code>Electron</code> 注册全局快捷键 (<code>globalShortcut</code>) 以及 <code>clipboard</code> 剪 切板事件以及 <code>nativeImage</code> 模块(实现类似播放器点击机器码自动复制功 能)</p></blockquote><h2 id="12-1-注册全局快捷键"><a href="#12-1-注册全局快捷键" class="headerlink" title="12.1 注册全局快捷键"></a>12.1 注册全局快捷键</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8d288b412f99b18f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><a href="https://electronjs.org/docs/tutorial/keyboard-shortcuts" target="_blank" rel="noopener">keyboard-shortcuts文档</a></li><li><a href="https://electronjs.org/docs/api/app" target="_blank" rel="noopener">app模块参考文档</a></li></ul><p><strong>1. 新建src/main/shortCut.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;globalShortcut, app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// 注册全局快捷键</span></span><br><span class="line">    globalShortcut.register(<span class="string">'command+e'</span>, ()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测快捷键是否注册成功 true是注册成功</span></span><br><span class="line">    <span class="keyword">let</span> isRegister = globalShortcut.isRegistered(<span class="string">'command+e'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isRegister)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出的时候取消全局快捷键</span></span><br><span class="line">app.on(<span class="string">'will-quit'</span>, ()=&gt;&#123;</span><br><span class="line">    globalShortcut.unregister(<span class="string">'command+e'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 引入src/index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意在外部引入即可 不用放到app中</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./main/shortCut.js'</span>)</span><br></pre></td></tr></table></figure><h2 id="12-2-剪切板clipboard、nativeImage-模块"><a href="#12-2-剪切板clipboard、nativeImage-模块" class="headerlink" title="12.2  剪切板clipboard、nativeImage 模块"></a>12.2  剪切板clipboard、nativeImage 模块</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7e015801fa54f4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><a href="https://electronjs.org/docs/api/clipboard" target="_blank" rel="noopener">剪切板clipboard文档</a></li><li><a href="https://electronjs.org/docs/api/native-image" target="_blank" rel="noopener">nativeImage模块</a></li></ul><p><strong>1. html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--src/index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双击下面信息复制<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'msg'</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"plat"</span>&gt;</span>粘贴<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>复制图片到界面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"copyImg"</span>&gt;</span>复制图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"render/clipboard.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 新建src/render/clipboard.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clipboard可以在主进程或渲染进程使用</span></span><br><span class="line"><span class="keyword">const</span> &#123; clipboard, nativeImage &#125;  = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line"><span class="comment">// 运行ctrl+v可看到复制的内容</span></span><br><span class="line"><span class="comment">// clipboard.writeText('poetries')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clipboard.readText() //获取复制的内容 粘贴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双击复制消息</span></span><br><span class="line"><span class="keyword">let</span> msg = <span class="built_in">document</span>.querySelector(<span class="string">'#msg'</span>)</span><br><span class="line"><span class="keyword">let</span> plat = <span class="built_in">document</span>.querySelector(<span class="string">'#plat'</span>)</span><br><span class="line"><span class="keyword">let</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'#text'</span>)</span><br><span class="line"></span><br><span class="line">msg.ondblclick  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clipboard.writeText(msg.innerHTML)</span><br><span class="line">    alert(msg.innerHTML)</span><br><span class="line">&#125;</span><br><span class="line">plat.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    text.value = clipboard.readText()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制图片显示到界面</span></span><br><span class="line"><span class="keyword">let</span> copyImg = <span class="built_in">document</span>.querySelector(<span class="string">'#copyImg'</span>)</span><br><span class="line">copyImg.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 结合nativeImage模块</span></span><br><span class="line">    <span class="keyword">let</span> image = nativeImage.createFromPath(<span class="string">'../static/img/lover.png'</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制图片</span></span><br><span class="line">    clipboard.writeImage(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 粘贴图片</span></span><br><span class="line">    <span class="keyword">let</span> imgSrc = clipboard.readImage().toDataURL() <span class="comment">// base64图片</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示到页面上</span></span><br><span class="line">    <span class="keyword">let</span> imgDom = <span class="keyword">new</span> Image()</span><br><span class="line">    imgDom.src = imgSrc </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imgDom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、结合electron-vue"><a href="#十三、结合electron-vue" class="headerlink" title="十三、结合electron-vue"></a>十三、结合electron-vue</h1><h2 id="13-1-electron-vue-的使用"><a href="#13-1-electron-vue-的使用" class="headerlink" title="13.1 electron-vue 的使用"></a>13.1 electron-vue 的使用</h2><p><strong>1. electron-vue 的一些资源</strong></p><blockquote><p><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">https://github.com/SimulatedGREG/electron-vue</a></p></blockquote><p><code>Electron-vue</code> 文档 <a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn" target="_blank" rel="noopener">https://simulatedgreg.gitbooks.io/electron-vue/content/cn</a></p><p><strong>2. electron-vue 环境搭建、创建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line">yarn <span class="comment"># or npm install</span></span><br><span class="line"></span><br><span class="line">yarn run dev <span class="comment"># or npm run dev</span></span><br></pre></td></tr></table></figure><p><strong>3. electron-vue 目录结构分析</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3137d0001e34cf1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="13-2-electron-vue-中使用-sass-ElementUi"><a href="#13-2-electron-vue-中使用-sass-ElementUi" class="headerlink" title="13.2 electron-vue 中使用 sass/ElementUi"></a>13.2 electron-vue 中使用 sass/ElementUi</h2><p><strong>1. electron-vue UI 框架 ElementUi 的使用</strong></p><blockquote><p><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p></blockquote><p><strong>2. electron-vue 中使用 sass</strong></p><ul><li><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/using_pre-processors.html" target="_blank" rel="noopener">electron-vue 中使用 sass</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 sass-loader:</span></span><br><span class="line"></span><br><span class="line">npm install --save-dev sass-loader node-sass</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--vue 文件中修改 style 为如下代码:--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* SCSS */</span> </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13-3-electron-vue-中隐藏顶部菜单隐藏"><a href="#13-3-electron-vue-中隐藏顶部菜单隐藏" class="headerlink" title="13.3 electron-vue 中隐藏顶部菜单隐藏"></a>13.3 electron-vue 中隐藏顶部菜单隐藏</h2><blockquote><p>electron-vue 中隐藏顶部菜单隐藏顶部最大化、最小化、关闭按钮 自定最大化、最小化 、关闭按钮</p></blockquote><p><strong>1. electron-vue 中隐藏顶部菜单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/index.js</span></span><br><span class="line">mainWindow.setMenu(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><strong>2. electron-vue 中隐藏关闭 最大化 最小化按钮</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/index.js</span></span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    height: <span class="number">620</span>,</span><br><span class="line">    useContentSize: <span class="literal">true</span>,</span><br><span class="line">    width: <span class="number">1280</span>,</span><br><span class="line">    frame: <span class="literal">false</span> <span class="comment">/*去掉顶部导航 去掉关闭按钮 最大化最小化按钮*/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3 .electron-vue 自定义关闭/最大化最小化按钮</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意在mac下不需要监听窗口最大最小化、以为系统默认支持，这个只是针对windows平台</span></span><br><span class="line"></span><br><span class="line">ipc.on(<span class="string">'window-min'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mainWindow.minimize();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录窗口最大化 </span></span><br><span class="line">ipc.on(<span class="string">'window-max'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow.isMaximized()) &#123;</span><br><span class="line">        mainWindow.restore();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mainWindow.maximize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">ipc.on(<span class="string">'window-close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mainWindow.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4. electron-vue 自定义导航可拖拽</strong></p><ul><li>可拖拽的 <code>css</code>: <code>-webkit-app-region: drag;</code></li><li>不可拖拽的 <code>css</code>:  <code>-webkit-app-region: no-drag;</code></li></ul><h2 id="13-4-使用electron-vue开发舆情监控系统"><a href="#13-4-使用electron-vue开发舆情监控系统" class="headerlink" title="13.4 使用electron-vue开发舆情监控系统"></a>13.4 使用electron-vue开发舆情监控系统</h2><h3 id="13-4-1-配置开发环境"><a href="#13-4-1-配置开发环境" class="headerlink" title="13.4.1 配置开发环境"></a>13.4.1 配置开发环境</h3><p><strong>1. 项目搭建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line">yarn <span class="comment"># or npm install</span></span><br><span class="line"></span><br><span class="line">yarn run dev <span class="comment"># or npm run dev</span></span><br></pre></td></tr></table></figure><p><strong>2. 安装一些依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 sass-loader:</span></span><br><span class="line">npm install --save-dev sass-loader node-sass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装elementUI、js-md5</span></span><br><span class="line">npm i element-ui  js-md5 -S</span><br></pre></td></tr></table></figure><ul><li>在<code>.electron-vue/webpack.renderer.config.js</code>中配置<code>sass-loader</code>就可以编写<code></code>sass`了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--vue 文件中修改 style 为如下代码:--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* SCSS */</span> </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-4-2-主进程配置"><a href="#13-4-2-主进程配置" class="headerlink" title="13.4.2 主进程配置"></a>13.4.2 主进程配置</h3><p><strong>1. <code>src/main/index.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 去掉顶部菜单</span></span><br><span class="line">  mainWindow.setMenu(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 菜单项</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./model/menu.js'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 系统托盘相关</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./model/tray.js'</span>);</span><br></pre></td></tr></table></figure><p><strong>2. <code>src/main/menu.js</code>菜单配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Menu,ipcMain,BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//右键菜单</span></span><br><span class="line"><span class="keyword">const</span> contextMenuTemplate=[</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'复制'</span>, <span class="attr">role</span>: <span class="string">'copy'</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'黏贴'</span>, <span class="attr">role</span>: <span class="string">'paste'</span> &#125;,        </span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'separator'</span> &#125;, <span class="comment">//分隔线</span></span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'其他功能'</span>,     </span><br><span class="line">        click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contextMenu=Menu.buildFromTemplate(contextMenuTemplate);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">'contextmenu'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    contextMenu.popup(BrowserWindow.getFocusedWindow());</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3. <code>src/main/tray.js</code>系统托盘配置</strong></p><blockquote><p>托盘点击监听事件只有在<code>windows</code>下才生效，<code>mac</code>系统默认支持</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123;app,Menu,BrowserWindow,Tray, shell&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建系统托盘</span></span><br><span class="line">    <span class="keyword">const</span> tray = <span class="keyword">new</span> Tray(path.resolve(__static, <span class="string">'favicon.png'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给托盘增加右键菜单</span></span><br><span class="line">    <span class="keyword">const</span> template= [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'设置'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                shell.openExternal(<span class="string">'http://blog.poetries.top'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'帮助'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                shell.openExternal(<span class="string">'http://blog.poetries.top/2019/01/06/electron-summary'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'关于'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                shell.openExternal(<span class="string">'https://github.com/poetries/yuqing-monitor-electron'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'退出'</span>,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// BrowserWindow.getFocusedWindow().webContents().send('close-main-window');</span></span><br><span class="line">                app.quit();</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> menu = Menu.buildFromTemplate(template);</span><br><span class="line">    tray.setContextMenu(menu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    tray.setToolTip(<span class="string">'舆情监控系统'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听关闭事件隐藏到系统托盘</span></span><br><span class="line">    <span class="comment">// 这里需要注意：在window中才生效，mac下系统默认支持</span></span><br><span class="line">    <span class="comment">// var win = BrowserWindow.getFocusedWindow();</span></span><br><span class="line">    <span class="comment">// win.on('close',(e)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         if(!win.isFocused())&#123;</span></span><br><span class="line">    <span class="comment">//             win=null;</span></span><br><span class="line">    <span class="comment">//         &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//             e.preventDefault();  /*阻止应用退出*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//             win.hide(); /*隐藏当前窗口*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//         &#125;       </span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// //监听托盘的双击事件</span></span><br><span class="line">    <span class="comment">// tray.on('double-click',()=&gt;&#123;               </span></span><br><span class="line">    <span class="comment">//     win.show();</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>4. <code>src/main/shortCut.js</code>快捷键配置</strong></p><p>在<code>src/main/index.js</code>中引入（<code>require(&#39;src/main/shortCut.js&#39;)</code>）即可，不需要放到<code>app</code>监控中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;globalShortcut, app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// 注册全局快捷键</span></span><br><span class="line">    globalShortcut.register(<span class="string">'command+e'</span>, ()=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测快捷键是否注册成功 true是注册成功</span></span><br><span class="line">    <span class="keyword">let</span> isRegister = globalShortcut.isRegistered(<span class="string">'command+e'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isRegister)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出的时候取消全局快捷键</span></span><br><span class="line">app.on(<span class="string">'will-quit'</span>, ()=&gt;&#123;</span><br><span class="line">    globalShortcut.unregister(<span class="string">'command+e'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-4-3-渲染进程配置"><a href="#13-4-3-渲染进程配置" class="headerlink" title="13.4.3 渲染进程配置"></a>13.4.3 渲染进程配置</h3><p><strong>1. src/render/main.js配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> VueHighcharts <span class="keyword">from</span> <span class="string">'vue-highcharts'</span>;</span><br><span class="line"><span class="keyword">import</span> VueSocketIO <span class="keyword">from</span> <span class="string">'vue-socket.io'</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.use(VueHighcharts);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入socket.io配置连接</span></span><br><span class="line">Vue.use(<span class="keyword">new</span> VueSocketIO(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  connection: <span class="string">'http://118.123.14.36:3000'</span>,</span><br><span class="line">  vuex: &#123;</span><br><span class="line">      store,</span><br><span class="line">      actionPrefix: <span class="string">'SOCKET_'</span>,</span><br><span class="line">      mutationPrefix: <span class="string">'SOCKET_'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.IS_WEB) Vue.use(<span class="built_in">require</span>(<span class="string">'vue-electron'</span>))</span><br><span class="line">Vue.http = Vue.prototype.$http = axios</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p><strong>2. 路由配置src/renderer/router/index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/home'</span>,</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/Home'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/report'</span>,</span><br><span class="line">      name: <span class="string">'report'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/Report'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/negativereport'</span>,</span><br><span class="line">      name: <span class="string">'negativereport'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/NegativeReport'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/positivereport'</span>,</span><br><span class="line">      name: <span class="string">'positivereport'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/PositiveReport'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/keyword'</span>,</span><br><span class="line">      name: <span class="string">'keyword'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/KeyWord'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/alarm'</span>,</span><br><span class="line">      name: <span class="string">'alarm'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/Alarm'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/msg'</span>,</span><br><span class="line">      name: <span class="string">'msg'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/Msg'</span>).default</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      redirect: <span class="string">'/home'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/poetries/yuqing-monitor-electron/tree/master/src/renderer" target="_blank" rel="noopener">其他页面更多详情Github</a></p></blockquote><p><strong>3. 在渲染进程中使用主进程方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// electron挂载到了vue实例上 $electron</span></span><br><span class="line"><span class="keyword">this</span>.$electron.shell</span><br></pre></td></tr></table></figure><h3 id="13-4-4-多平台打包"><a href="#13-4-4-多平台打包" class="headerlink" title="13.4.4 多平台打包"></a>13.4.4 多平台打包</h3><blockquote><p>需要注意的是打包<code>mac</code>版本在<code>mac</code>系统上打包，打包<code>window</code>则在<code>windows</code>上打包，可以避免很多问题</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在不同平台上执行即可打包应用</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="13-4-4-1-打包介绍"><a href="#13-4-4-1-打包介绍" class="headerlink" title="13.4.4.1 打包介绍"></a>13.4.4.1 打包介绍</h4><blockquote><p><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/using-electron-packager.html" target="_blank" rel="noopener">electron-vue打包文档</a></p></blockquote><p><strong>1. electron 中构建应用最常用的模块</strong></p><ul><li><code>electron-packager</code> </li><li><code>electron-builder</code></li></ul><blockquote><p><code>electron-packager</code> 和 <code>electron-builder</code>在自己单独创建的应用用也可以完成打包功 能。但是由于配置太复杂所以我们不建议单独配置</p></blockquote><p><strong>2. electron-forge</strong></p><blockquote><p><a href="https://github.com/electron-userland/electron-forge" target="_blank" rel="noopener">https://github.com/electron-userland/electron-forge</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">electron-forge package </span><br><span class="line">electron-forge make</span><br></pre></td></tr></table></figure><p><strong>3. electron-vue中的打包方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://simulatedgreg.gitbooks.io/electron-vue/content/cn/using-electron-packager. html</span></span><br><span class="line"><span class="comment"># 之需要执行一条命令</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="13-4-4-2-修改应用信息"><a href="#13-4-4-2-修改应用信息" class="headerlink" title="13.4.4.2 修改应用信息"></a>13.4.4.2 修改应用信息</h4><p><strong>1. 修改package.json</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3d77650ad5e4f1a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>2. 修改src/index.ejs标题信息</strong></p><p><strong>3. 修改build/icons图标</strong></p><h4 id="13-4-4-3-打包遇到的问题"><a href="#13-4-4-3-打包遇到的问题" class="headerlink" title="13.4.4.3 打包遇到的问题"></a>13.4.4.3 打包遇到的问题</h4><p><strong>1. 创建应用托盘的时候可能会遇到错误</strong></p><ul><li>把托盘图片放在根目录<code>static</code>里面，然后注意下面写法。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tray = <span class="keyword">new</span> Tray(path.join(__static,<span class="string">'favicon.ico'</span>))</span><br></pre></td></tr></table></figure><ul><li>如果托盘路径没有问题，还是包托盘相关错误的话，把托盘对应的图片换成<code>.png</code> 格式重试</li></ul><p><strong>2. 模块问题可能会遇到的错误</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-55209a332e74eef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a5bd54ac66d34244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>解决办法</strong></p><ul><li>删掉 <code>node_modules</code> 然后重新用 <code>npm install</code> 安装依赖</li><li>用 <code>yarn</code> 来安装模块</li><li>用手机创建一个热点电脑连上热点重试</li></ul><blockquote><p>最后执行<code>yarn run build</code>即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-128e2c02d19b79c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>项目源码 <a href="https://github.com/poetries/yuqing-monitor-electron" target="_blank" rel="noopener">https://github.com/poetries/yuqing-monitor-electron</a></p></blockquote><h1 id="十四、更多参考"><a href="#十四、更多参考" class="headerlink" title="十四、更多参考"></a>十四、更多参考</h1><ul><li><a href="https://github.com/poetries/electron-demo" target="_blank" rel="noopener">本文对应DEMO地址</a></li><li><a href="https://github.com/electron/electron-api-demos" target="_blank" rel="noopener">一些比较常用的API，克隆后跑起来你就可以快速查看这些常用API</a></li><li><a href="https://github.com/poetries/electron-wiki" target="_blank" rel="noopener">electron学习资料整理</a></li><li><a href="https://wizardforcel.gitbooks.io/electron-doc/content/faq/electron-faq.html" target="_blank" rel="noopener">electron中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NW.js&lt;/code&gt; 和 &lt;code&gt;Electron&lt;/code&gt; 都可以用前端的知识来开发桌
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="Electron" scheme="http://blog.poetries.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存原理总结</title>
    <link href="http://blog.poetries.top/2019/01/02/browser-cache/"/>
    <id>http://blog.poetries.top/2019/01/02/browser-cache/</id>
    <published>2019-01-02T06:20:43.000Z</published>
    <updated>2019-01-25T09:06:54.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、浏览器缓存基本认识"><a href="#一、浏览器缓存基本认识" class="headerlink" title="一、浏览器缓存基本认识"></a>一、浏览器缓存基本认识</h1><p><strong>分为强缓存和协商缓存</strong></p><ol><li>浏览器在加载资源时，先根据这个资源的一些<code>http header</code>判断它是否命中强缓存，强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器。比如某个<code>css</code>文件，如果浏览器在加载它所在的网页时，这个<code>css</code>文件的缓存配置命中了强缓存，浏览器就直接从缓存中加载这个<code>css</code>，连请求都不会发送到网页所在服务器</li><li>当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，通过服务器端依据资源的另外一些<code>http header</code>验证这个资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源，于是浏览器就又会从自己的缓存中去加载这个资源</li><li><strong>强缓存与协商缓存的共同点是</strong>：如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；区别是：<strong>强缓存不发请求到服务器</strong>，协商缓存会发请求到服务器</li><li>当协商缓存也没有命中的时候，浏览器直接从服务器加载资源数据</li></ol><h1 id="二、强缓存的原理"><a href="#二、强缓存的原理" class="headerlink" title="二、强缓存的原理"></a>二、强缓存的原理</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><blockquote><p>当浏览器对某个资源的请求命中了强缓存时，返回的<code>http</code>状态为<code>200</code>，在<code>chrome</code>的开发者工具的<code>network</code>里面<code>size</code>会显示为<code>from cache</code>，比如京东的首页里就有很多静态资源配置了强缓存，用<code>chrome</code>打开几次，再用<code>f12</code>查看<code>network</code>，可以看到有不少请求就是从缓存中加载的</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6341ce9ec238a050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>强缓存是利用<code>Expires</code>或者<code>Cache-Control</code>这两个<code>http response header</code>实现的，它们都用来表示资源在客户端缓存的有效期。</li></ul><blockquote><p><code>Expires</code>是<code>http1.0</code>提出的一个表示资源过期时间的<code>header</code>，它描述的是一个绝对时间，由服务器返回，用<code>GMT</code>格式的字符串表示，如：<code>Expires:Thu, 31 Dec 2037 23:55:55 GMT</code></p></blockquote><h2 id="2-2-Expires缓存原理"><a href="#2-2-Expires缓存原理" class="headerlink" title="2.2 Expires缓存原理"></a>2.2 Expires缓存原理</h2><ol><li>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在<code>respone</code>的<code>header</code>加上<code>Expires</code>，如</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-72ccb81233fb091a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>浏览器在接收到这个资源后，会把这个资源连同所有<code>response header</code>一起缓存下来（所以缓存命中的请求返回的<code>header</code>并不是来自服务器，而是来自之前缓存的<code>header</code>）</li><li>浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，拿出它的<code>Expires</code>跟当前的请求时间比较，如果请求时间在<code>Expires</code>指定的时间之前，就能命中缓存，否则就不行</li><li>如果缓存没有命中，浏览器直接从服务器加载资源时，<code>Expires Header</code>在重新加载的时候会被更新</li></ol><blockquote><p><code>Expires</code>是较老的强缓存管理<code>header</code>，由于它是服务器返回的一个绝对时间，在服务器时间与客户端时间相差较大时，缓存管理容易出现问题，比如随意修改下客户端时间，就能影响缓存命中的结果。所以在<code>http1.1</code>的时候，提出了一个新的<code>header</code>，就是<code>Cache-Control</code>，这是一个相对时间，在配置缓存的时候，以秒为单位，用数值表示，如：<code>Cache-Control:max-age=315360000</code></p></blockquote><h2 id="2-3-Cache-Control缓存原理"><a href="#2-3-Cache-Control缓存原理" class="headerlink" title="2.3 Cache-Control缓存原理"></a>2.3 Cache-Control缓存原理</h2><ol><li>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在<code>respone</code>的<code>header</code>加上<code>Cache-Control</code>，如：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-262d2cd0a580eb2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>浏览器在接收到这个资源后，会把这个资源连同所有<code>response header</code>一起缓存下来</li><li>浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，根据它第一次的请求时间和<code>Cache-Control</code>设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行</li><li>如果缓存没有命中，浏览器直接从服务器加载资源时，<code>Cache-Control Header</code>在重新加载的时候会被更新</li></ol><ul><li><code>Cache-Control</code>描述的是一个相对时间，在进行缓存命中的时候，都是利用客户端时间进行判断，所以相比较<code>Expires</code>，<code>Cache-Control</code>的缓存管理更有效，安全一些。</li><li>这两个<code>header</code>可以只启用一个，也可以同时启用，当<code>response header</code>中，<code>Expires</code>和<code>Cache-Control</code>同时存在时，<code>Cache-Control</code>优先级高于<code>Expires</code>：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-390a31fe7f6af46b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="三、强缓存的管理"><a href="#三、强缓存的管理" class="headerlink" title="三、强缓存的管理"></a>三、强缓存的管理</h1><blockquote><p>前面介绍的是强缓存的原理，在实际应用中我们会碰到需要强缓存的场景和不需要强缓存的场景，通常有2种方式来设置是否启用强缓存</p></blockquote><ol><li>通过代码的方式，在<code>web</code>服务器返回的响应中添加<code>Expires</code>和<code>Cache-Control Header</code></li><li>通过配置<code>web</code>服务器的方式，让<code>web</code>服务器在响应资源的时候统一添加<code>Expires</code>和<code>Cache-Control Header</code></li></ol><blockquote><p>比如在javaweb里面，我们可以使用类似下面的代码设置强缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.util.Date date = <span class="keyword">new</span> java.util.Date();    </span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>,date.getTime()+<span class="number">20000</span>); <span class="comment">//Expires:过时期限值 </span></span><br><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"public"</span>); <span class="comment">//Cache-Control来控制页面的缓存与否,public:浏览器和缓存服务器都可以缓存页面信息；</span></span><br><span class="line">response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"Pragma"</span>); <span class="comment">//Pragma:设置页面是否缓存，为Pragma则缓存，no-cache则不缓存</span></span><br></pre></td></tr></table></figure><blockquote><p>还可以通过类似下面的<code>java</code>代码设置不启用强缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader( <span class="string">"Pragma"</span>, <span class="string">"no-cache"</span> );   </span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);   </span><br><span class="line">response.addHeader( <span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span> );<span class="comment">//浏览器和缓存服务器都不应该缓存页面信息</span></span><br></pre></td></tr></table></figure><ul><li><code>nginx</code>和<code>apache</code>作为专业的<code>web</code>服务器，都有专门的配置文件，可以配置<code>expires</code>和<code>cache-control</code>，这方面的知识，如果你对运维感兴趣的话，可以在百度上搜索<code>nginx</code> 设置 <code>expires cache-control</code>或 <code>apache 设置 expires cache-control</code> 都能找到不少相关的文章。</li><li>由于在开发的时候不会专门去配置强缓存，而浏览器又默认会缓存图片，<code>css</code>和<code>js</code>等静态资源，所以开发环境下经常会因为强缓存导致资源没有及时更新而看不到最新的效果，解决这个问题的方法有很多，常用的有以下几种</li></ul><p><strong>处理缓存带来的问题</strong></p><ol><li>直接<code>ctrl+f5</code>，这个办法能解决页面直接引用的资源更新的问题</li><li>使用浏览器的隐私模式开发</li><li>如果用的是<code>chrome</code>，可以<code>f12</code>在<code>network</code>那里把缓存给禁掉（这是个非常有效的方法）</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5d2598d74fb558fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="4"><li>在开发阶段，给资源加上一个动态的参数，如<code>css/index.css?v=0.0001</code>，由于每次资源的修改都要更新引用的位置，同时修改参数的值，所以操作起来不是很方便，除非你是在动态页面比如jsp里开发就可以用服务器变量来解决（<code>v=${sysRnd}</code>），或者你能用一些前端的构建工具来处理这个参数修改的问题</li><li>如果资源引用的页面，被嵌入到了一个<code>iframe</code>里面，可以在<code>iframe</code>的区域右键单击重新加载该页面，以<code>chrome</code>为例</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-dcf16f68408965a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="6"><li>如果缓存问题出现在<code>ajax</code>请求中，最有效的解决办法就是<code>ajax</code>的请求地址追加随机数</li><li>还有一种情况就是动态设置<code>iframe</code>的<code>src</code>时，有可能也会因为缓存问题，导致看不到最新的效果，这时候在要设置的<code>src</code>后面添加随机数也能解决问题</li><li>如果你用的是<code>grunt</code>和<code>gulp</code>、<code>webpack</code>这种前端工具开发，通过它们的插件比如<code>grunt-contrib-connect</code>来启动一个静态服务器，则完全不用担心开发阶段的资源更新问题，因为在这个静态服务器下的所有资源返回的<code>respone header</code>中，<code>cache-control</code>始终被设置为不缓存</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-afa964e8c9329669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="四、强缓存的应用"><a href="#四、强缓存的应用" class="headerlink" title="四、强缓存的应用"></a>四、强缓存的应用</h1><blockquote><p>强缓存是前端性能优化最有力的工具，没有之一，对于有大量静态资源的网页，一定要利用强缓存，提高响应速度。通常的做法是，为这些静态资源全部配置一个超时时间超长的<code>Expires</code>或<code>Cache-Control</code>，这样用户在访问网页时，只会在第一次加载时从服务器请求静态资源，其它时候只要缓存没有失效并且用户没有强制刷新的条件下都会从自己的缓存中加载，比如前面提到过的京东首页缓存的资源，它的缓存过期时间都设置到了<code>2026</code>年</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ee120cc92380a2d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>然而这种缓存配置方式会带来一个新的问题，就是发布时资源更新的问题，比如某一张图片，在用户访问第一个版本的时候已经缓存到了用户的电脑上，当网站发布新版本，替换了这个图片时，已经访问过第一个版本的用户由于缓存的设置，导致在默认的情况下不会请求服务器最新的图片资源，除非他清掉或禁用缓存或者强制刷新，否则就看不到最新的图片效果</p></blockquote><p>这个问题已经有成熟的解决方案，具体内容可阅读知乎这篇文章详细了解：<a href="http://www.zhihu.com/question/20790576" target="_blank" rel="noopener">http://www.zhihu.com/question/20790576</a></p><p>文章提到的东西都属于理论上的解决方案，不过现在已经有很多前端工具能够实际地解决这个问题，由于每个工具涉及到的内容细节都有很多，本文没有办法一一深入介绍。有兴趣的可以去了解下<code>grunt</code> <code>gulp</code> <code>webpack</code> <code>fis</code> 还有edp这几个工具，基于这几个工具都能解决这个问题，尤其是<code>fis</code>和<code>edp</code>是百度推出的前端开发平台，有现成的文档可以参考：</p><p><a href="http://fis.baidu.com/fis3/api/index.html" target="_blank" rel="noopener">http://fis.baidu.com/fis3/api/index.html</a></p><p><a href="http://ecomfe.github.io/edp/doc/initialization/install/" target="_blank" rel="noopener">http://ecomfe.github.io/edp/doc/initialization/install/</a></p><blockquote><p>强缓存还有一点需要注意的是，通常都是针对静态资源使用，动态资源需要慎用，除了服务端页面可以看作动态资源外，那些引用静态资源的<code>html</code>也可以看作是动态资源，如果这种<code>html</code>也被缓存，当这些<code>html</code>更新之后，可能就没有机制能够通知浏览器这些html有更新，尤其是前后端分离的应用里，页面都是纯<code>html</code>页面，每个访问地址可能都是直接访问<code>html</code>页面，这些页面通常不加强缓存，以保证浏览器访问这些页面时始终请求服务器最新的资源</p></blockquote><h1 id="五、协商缓存的原理"><a href="#五、协商缓存的原理" class="headerlink" title="五、协商缓存的原理"></a>五、协商缓存的原理</h1><h2 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h2><blockquote><p>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的<code>http</code>状态为<code>304</code>并且会显示一个<code>Not Modified</code>的字符串，比如你打开京东的首页，按<code>f12</code>打开开发者工具，再按<code>f5</code>刷新页面，查看<code>network</code>，可以看到有不少请求就是命中了协商缓存的</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1a49df2ac7217346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>查看单个请求的<code>Response Header</code>，也能看到<code>304</code>的状态码和<code>Not Modified</code>的字符串，只要看到这个就可说明这个资源是命中了协商缓存，然后从客户端缓存中加载的，而不是服务器最新的资源</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ba6199b735178677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="5-2-Last-Modified，If-Modified-Since控制协商缓存"><a href="#5-2-Last-Modified，If-Modified-Since控制协商缓存" class="headerlink" title="5.2 Last-Modified，If-Modified-Since控制协商缓存"></a>5.2 Last-Modified，If-Modified-Since控制协商缓存</h2><ol><li>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在<code>respone</code>的<code>header</code>加上<code>Last-Modified</code>的<code>header</code>，这个<code>header</code>表示这个资源在服务器上的最后修改时间</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c94ad8a6eca3523c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>浏览器再次跟服务器请求这个资源时，在<code>request</code>的<code>header</code>上加上<code>If-Modified-Since</code>的<code>header</code>，这个<code>header</code>的值就是上一次请求时返回的<code>Last-Modified</code>的值</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fb168628a9057045.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="3"><li>服务器再次收到资源请求时，根据浏览器传过来<code>If-Modified-Since</code>和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回<code>304 Not Modified</code>，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回<code>304 Not Modified</code>的响应时，<code>response header</code>中不会再添加<code>Last-Modified</code>的<code>header</code>，因为既然资源没有变化，那么<code>Last-Modified</code>也就不会改变，这是服务器返回<code>304</code>时的<code>response header</code></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-41b97ffa2d4cb6d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="4"><li>浏览器收到<code>304</code>的响应后，就会从缓存中加载资源</li><li>如果协商缓存没有命中，浏览器直接从服务器加载资源时，<code>Last-Modified</code> <code>Header</code>在重新加载的时候会被更新，下次请求时，<code>If-Modified-Since</code>会启用上次返回的<code>Last-Modified</code>值</li></ol><blockquote><p>【<code>Last-Modified</code>，<code>If-Modified-Since</code>】都是根据服务器时间返回的<code>header</code>，一般来说，在没有调整服务器时间和篡改客户端缓存的情况下，这两个<code>header</code>配合起来管理协商缓存是非常可靠的，但是有时候也会服务器上资源其实有变化，但是最后修改时间却没有变化的情况，而这种问题又很不容易被定位出来，而当这种情况出现的时候，就会影响协商缓存的可靠性。所以就有了另外一对<code>header</code>来管理协商缓存，这对<code>header</code>就是【<code>ETag</code>、<code>If-None-Match</code>】。它们的缓存管理的方式是</p></blockquote><h2 id="5-3-ETag、If-None-Match控制协商缓存"><a href="#5-3-ETag、If-None-Match控制协商缓存" class="headerlink" title="5.3 ETag、If-None-Match控制协商缓存"></a>5.3 ETag、If-None-Match控制协商缓存</h2><ol><li>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在<code>respone</code>的<code>header</code>加上<code>ETag</code>的<code>header</code>，这个<code>header</code>是服务器根据当前请求的资源生成的一个唯一标识，这个唯一标识是一个字符串，只要资源有变化这个串就不同，跟最后修改时间没有关系，所以能很好的补充<code>Last-Modified</code>的问题</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2e7b17cc416372d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>浏览器再次跟服务器请求这个资源时，在<code>request</code>的<code>header</code>上加上<code>If-None-Match</code>的<code>header</code>，这个<code>header</code>的值就是上一次请求时返回的<code>ETag</code>的值</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4e9de6397823de3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="3"><li>服务器再次收到资源请求时，根据浏览器传过来<code>If-None-Match</code>和然后再根据资源生成一个新的<code>ETag</code>，如果这两个值相同就说明资源没有变化，否则就是有变化；如果没有变化则返回<code>304 Not Modified</code>，但是不会返回资源内容；如果有变化，就正常返回资源内容。与<code>Last-Modified</code>不一样的是，当服务器返回<code>304 Not Modified</code>的响应时，由于<code>ETag</code>重新生成过，<code>response header</code>中还会把这个<code>ETag</code>返回，即使这个<code>ETag</code>跟之前的没有变化</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d7e0fed4eb20776b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="4"><li>浏览器收到<code>304</code>的响应后，就会从缓存中加载资源。</li></ol><h1 id="六、协商缓存的管理"><a href="#六、协商缓存的管理" class="headerlink" title="六、协商缓存的管理"></a>六、协商缓存的管理</h1><blockquote><p>协商缓存跟强缓存不一样，强缓存不发请求到服务器，所以有时候资源更新了浏览器还不知道，但是协商缓存会发请求到服务器，所以资源是否更新，服务器肯定知道。大部分<code>web</code>服务器都默认开启协商缓存，而且是同时启用【<code>Last-Modified</code>，<code>If-Modified-Since</code>】和【<code>ETag</code>、<code>If-None-Match</code>】，比如<code>apache</code>:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e8a13371862964b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>如果没有协商缓存，每个到服务器的请求，就都得返回资源内容，这样服务器的性能会极差。</p></blockquote><ul><li>【<code>Last-Modified</code>，<code>If-Modified-Since</code>】和【<code>ETag</code>、<code>If-None-Match</code>】一般都是同时启用，这是为了处理<code>Last-Modified</code>不可靠的情况。</li></ul><p><strong>有一种场景需要注意</strong></p><ul><li>分布式系统里多台机器间文件的<code>Last-Modified</code>必须保持一致，以免负载均衡到不同机器导致比对失败；</li><li>分布式系统尽量关闭掉<code>ETag</code>(每台机器生成的<code>ETag</code>都会不一样）；</li><li>京东页面的资源请求，返回的<code>repsones header</code>就只有<code>Last-Modified</code>，没有<code>ETag</code>：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ca1e0f55f8fb9928.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>协商缓存需要配合强缓存使用，你看前面这个截图中，除了<code>Last-Modified</code>这个<code>header</code>，还有强缓存的相关<code>header</code>，因为如果不启用强缓存的话，协商缓存根本没有意义</p></blockquote><h1 id="七、相关浏览器行为对缓存的影响"><a href="#七、相关浏览器行为对缓存的影响" class="headerlink" title="七、相关浏览器行为对缓存的影响"></a>七、相关浏览器行为对缓存的影响</h1><blockquote><p>如果资源已经被浏览器缓存下来，在缓存失效之前，再次请求时，默认会先检查是否命中强缓存，如果强缓存命中则直接读取缓存，如果强缓存没有命中则发请求到服务器检查是否命中协商缓存，如果协商缓存命中，则告诉浏览器还是可以从缓存读取，否则才从服务器返回最新的资源。这是默认的处理方式，这个方式可能被浏览器的行为改变：</p></blockquote><ul><li>当<code>ctrl+f5</code>强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li><li>当<code>f5</code>刷新网页时，跳过强缓存，但是会检查协商缓存</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、浏览器缓存基本认识&quot;&gt;&lt;a href=&quot;#一、浏览器缓存基本认识&quot; class=&quot;headerlink&quot; title=&quot;一、浏览器缓存基本认识&quot;&gt;&lt;/a&gt;一、浏览器缓存基本认识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;分为强缓存和协商缓存&lt;/strong&gt;&lt;/p&gt;
&lt;o
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
      <category term="缓存" scheme="http://blog.poetries.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Typescript+React模板搭建（三）</title>
    <link href="http://blog.poetries.top/2018/12/31/ts-react-template/"/>
    <id>http://blog.poetries.top/2018/12/31/ts-react-template/</id>
    <published>2018-12-31T15:50:14.000Z</published>
    <updated>2019-01-25T09:06:54.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于网络</p></blockquote><h1 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h1><h2 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h2><blockquote><p>确保安装了 <code>npm install -g typescript</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -S 是--save简写</span></span><br><span class="line"><span class="comment"># -D 是--save-dev简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir ts-react &amp;&amp; <span class="built_in">cd</span> ts-react</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成package.json、tsconfig.json</span></span><br><span class="line">npm init -y &amp;&amp; tsc --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装开发工具</span></span><br><span class="line">npm install-D webpack webpack-cli webpack-dev-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装react相关</span></span><br><span class="line">npm install -S react react-dom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装react相关的ts验证包</span></span><br><span class="line">npm install -D @types/react @types/react-dom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ts-loader(或者awesome-typescript-loader) 这两款loader用于将ts代码编译成js代码</span></span><br><span class="line">npm install -D babel-loader</span><br></pre></td></tr></table></figure><h2 id="1-2-webpack配置"><a href="#1-2-webpack配置" class="headerlink" title="1.2 webpack配置"></a>1.2 webpack配置</h2><ol><li>在项目根目录新建一个<code>build</code>文件夹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; cd build &amp;&amp; touch webpack.config.js</span><br></pre></td></tr></table></figure><ol start="2"><li>根目录下新建src文件夹，然后在src里新建index.tsx文件作为项目入口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir src &amp;&amp; cd src &amp;&amp; touch index.tsx</span><br></pre></td></tr></table></figure><ol start="3"><li>编写简单的<code>webpack</code>配置，只包含<code>entry</code>和<code>output</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: path.join(__dirname, <span class="string">'../'</span>, <span class="string">'src/index.tsx)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    output: &#123;</span></span><br><span class="line"><span class="string">        path.join(__dirname, '</span>../<span class="string">', '</span>dist),</span><br><span class="line">        filename: <span class="string">'[name].js</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写<code>awesome-typescript-loader</code>配置项:<br>在<code>webpack</code>中的<code>module</code>是专门用来决定如何处理各种模块的配置项，例如本例中的<code>typescript</code>，这里主要用的配置项就是<code>module.rules</code>，而当前只需要简单配置解析<code>.tsx</code>文件类型即可</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f6ab875f614" alt=""></p><ol start="5"><li>在<code>src/index.tsx</code>中写入口文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'@components/Test'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;div&gt;<span class="number">1234</span>&lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">        document.querySelector('#app')</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()</span></span><br></pre></td></tr></table></figure><blockquote><p>但是这时候你会发现有一个错误没有处理</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3ac1896339551fcf.png" alt="image.png"></p><blockquote><p>这是因为在<code>tsconfig</code>里面没有指定<code>JSX</code>的版本，这时候在<code>tsconfig</code>的<code>compilerOptions</code>中添加<code>&quot;jsx&quot;: &quot;react&quot;</code>配置项即可消除错误</p></blockquote><ul><li>此外还需要注意一点，以后需要<code>import xxx from &#39;xxx&#39;</code>这样的文件的话需要在<code>webpack</code>中的<code>resolve</code>项中配置<code>extensions</code>，这样以后引入文件就不需要带扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.ts'</span>, <span class="string">'.tsx'</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>添加页面模板</li></ol><blockquote><p>在<code>public</code>文件夹下新建文件夹<code>tpl</code>，然后在<code>tpl</code>中新建一个<code>index.html</code>，如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir public &amp;&amp; <span class="built_in">cd</span> public &amp;&amp; touch index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这时候有了页面模板还是不够的，还需要将页面模板和打包出来的<code>js</code>文件关联起来，因为考虑到以后打包出来的<code>js</code>的文件不会是一个固定的名称，所以这里需要使用一个<code>webpack</code>的插件<code>html-webpack-plugin</code></p></blockquote><ol start="7"><li>配置<code>html-webpack-plugin</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'public/index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置完成后就可以启动项目了</p></blockquote><ol start="8"><li>配置<code>tsconfig</code></li></ol><ul><li><strong>编译目标</strong> 这时候我们切回<code>tsconfig</code>配置中，会发现在<code>compilerOptions</code>配置项的<code>target</code>是<code>es5</code>，也就是说把<code>ts</code>代码编译成<code>es5</code>规范的代码，如果不做兼容的话，我们可以将它设置为<code>es6</code>，使其编译成<code>es6</code>的代码</li><li><strong>模块处理</strong> 在<code>module</code>项中，会发现生成的是<code>commonjs</code>的模块系统，因为不考虑兼容，所以这里我也将其设定为最新的<code>esnext</code>，并且将模块处理方式改为用<code>node</code>来处理，设置<code>moduleResolution</code>项为<code>node</code>，不做模块处理方式设置的话可能会有报错</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-46772c094f3b6ec4.png" alt="image.png"></p><ol start="9"><li>项目启动</li></ol><blockquote><p>这时候我们可以在<code>package.json</code>中添加启动命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config build/webpack.config.js --mode development"</span></span><br></pre></td></tr></table></figure><blockquote><p>其中<code>--mode development</code>用于指定开发模式，否则在<code>webpack4+</code>版本下会有警告<br>然后直接<code>npm run dev</code>即可</p></blockquote><p><strong>总结</strong></p><blockquote><p>其实这个时候项目其实就已经跑起来了，完全可以不用往下看，但是实际上的工作并没有做完，下一章就开始讲解如何提高开发体验</p></blockquote><h1 id="二、提升开发体验"><a href="#二、提升开发体验" class="headerlink" title="二、提升开发体验"></a>二、提升开发体验</h1><blockquote><p>本章主要介绍的是建立在项目初始化的基础上如何优化开发体验 内容包含如下:</p></blockquote><ul><li>支持<code>sass</code></li><li>支持<code>css module</code></li><li>配置公用的<code>sass</code>属性</li><li>支持装饰器</li><li>路径优化</li><li>构建缓存</li><li>构建加速</li></ul><h2 id="2-1-支持sass"><a href="#2-1-支持sass" class="headerlink" title="2.1 支持sass"></a>2.1 支持sass</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装相应包</span></span><br><span class="line">npm install -D node-sass sass-loader style-loader css-loader</span><br></pre></td></tr></table></figure><blockquote><p><code>webpack</code>进行<code>loader</code>编译的顺序是从下到上的:知道上面的顺序后我们在<code>webpack</code>中的配置就非常简单了，直接在<code>module.rules</code>下面加上<code>.scss</code>文件类型的编译配置即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c145c9bc2d7beba3.png" alt="image.png"></p><blockquote><p>查看效果,这时候我们在<code>src</code>下面新建一个<code>index.scss</code>，然后在<code>index.tsx</code>里面引入这个文件查看</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-b74706639dcc96ec.png" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1a6a70075e7c7c50.png" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fceef9bad33d1c88.png" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f2d61554eee89eb8.png" alt="image.png"></p><h2 id="2-2-支持css-module"><a href="#2-2-支持css-module" class="headerlink" title="2.2 支持css module"></a>2.2 支持css module</h2><blockquote><p><code>css module</code>是针对<code>css</code>类名作用域做出限定的一种规范，用以解决<code>css</code>类名冲突的问题</p></blockquote><ul><li>安装对应的包 因为在这里我们用的是<code>TypeScript</code>，所以可以用<code>typings-for-css-modules-loader</code>这个包，这个包也可以替代<code>css-loader</code>的功能，此外这个包还能根据<code>.scss</code>文件里面的类名自动生成对应的<code>.d.ts</code>文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D typings-for-css-modules-loader</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>webpack</code> 这个配置接非常简单了，因为要用<code>typings-for-css-modules-loader</code>替代<code>css-loader</code>的功能，所以直接替换即可，将前面<code>sass</code>的配置修改为如下:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a8e5e88cc166e9e9.png" alt="image.png"></p><blockquote><p>修改为这样既可，但是同时我们也发现一个问题:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8650cbd1167c3b6e.png" alt="image.png"></p><ul><li>这个问题导致的原因是因为<code>.scss</code>文件中并没有类似<code>export</code>这样的关键词用于导出一个模块，所以也就导致报错找不到模块，这个问题可以通过<code>ts</code>的模块声明(<code>declare module</code>)来解决。</li><li>解决模块声明问题,这时候我们在根目录下新建一个<code>typings</code>文件夹，用于存放<code>.scss</code>的模块声明，以及后续需要用到的全局校验接口，然后新建<code>typed-css-modules.d.ts</code>文件用于存放<code>.scss</code>模块声明，目录结构和声明内容如下</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d4b2a1e15a409d1f.png" alt="image.png"></p><blockquote><p>这个时候回到<code>index.tsx</code>文件中你会发现错误标红消失了，然后我们在<code>index.scss</code>文件中新增如下代码</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-886d76204ba49b50.png" alt="image.png"></p><blockquote><p>保存后你会发现当前目录下新增了一个<code>index.scss.d.ts</code>文件，打开里面可以发现是针对每个类名的类型校验，当以后新增类名的时候，<code>typed-css-modules.d.ts</code>都会自动在<code>index.scss.d.ts</code>里面新增对应的类型校验</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ffcf09769cc79135.png" alt="image.png"></p><p>这时候回到页面查看，你会发现类名变成了一个<code>hash</code>值，这样可以有效地避免类名全局污染问题</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-be3150005a9700ab.png" alt="image.png"></p><h2 id="2-3-配置公共sass属性"><a href="#2-3-配置公共sass属性" class="headerlink" title="2.3 配置公共sass属性"></a>2.3 配置公共sass属性</h2><blockquote><p>既然已经可以使用<code>sass</code>进行更加简便的<code>css</code>代码编写，那么我们也可以将常用的一些样式代码和<code>sass</code>变量写入公共文件中，当使用的时候就可以直接引入使用，这可以提高一定的效率节约时间</p></blockquote><ol><li>新建公共样式目录 </li></ol><blockquote><p>首先在<code>src</code>目录下新建<code>styles</code>文件夹，然后在<code>styles</code>文件夹下新建<code>var.scss</code>文件用于存放样式变量。 之后在<code>var.scss</code>文件里写入一个颜色变量和一个样式:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4ada767224de622b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>查看效果 </li></ol><blockquote><p>然后在<code>index.scss</code>文件里面引入<code>var.scss</code>，接着就可以直接使用里面的变量了</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4f452f5cba5782f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1554f29f39aa3522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="3"><li>优化</li></ol><blockquote><p>上面的效果其实已经达成，但还是存在一个不好的问题，就是在引入<code>var.scss</code>的路径上要根据每个文件夹的路径相对来引入非常麻烦，那么我们能否做到只需要<code>@import var.scss</code>就行呢？答案是可以的，我们可以使用一个<code>node-sass</code>的属性<code>includePaths</code>进行路径优化:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cc44afa01edc72d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ad9864348b48135a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="2-4-支持装饰器"><a href="#2-4-支持装饰器" class="headerlink" title="2.4 支持装饰器"></a>2.4 支持装饰器</h2><blockquote><p>前置工作 在<code>src</code>目录下新建一个<code>components</code>文件夹，用于存放通用组件，然后在<code>components</code>文件及里面新建一个组件<code>Test</code>，然后在网页入口引入这个组件，如下图所示:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5492a1601a16945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8ab6539f1b27405c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>什么是装饰器，为什么需要装饰器 装饰器本质上就是一个函数，这个函数对类(<code>class</code>)本身进行一些处理，也可以将装饰器的写法当做一种语法糖，如果不用装饰器的话，可以写成下图这样</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-db9e068794cbc0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>设置装饰器可用 根据装饰器的语法，我们可以将上面的代码写成如下:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-eb59e8237811d204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>但是你会发现这里报了一个错误，这是因为装饰器语法在<code>es6</code>标准中还只是一个提案，并未正式支持，但是在<code>ts</code>中，装饰器已经被正式支持了，不用<code>ts</code>的可以自行安装<code>babel</code>相关包进行支持</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8633fd1213bb094d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>那么怎么解决这个错误呢？我们根据错误提示进入到<code>tsconfig</code>文件中，将<code>experimentalDecorators</code>设置为<code>true</code>即可，然后回到页面查看<code>log</code>装饰器已经生效了</p></blockquote><h2 id="2-5-优化路径"><a href="#2-5-优化路径" class="headerlink" title="2.5 优化路径"></a>2.5 优化路径</h2><blockquote><p>在上面的例子中我们新建了<code>components</code>文件夹，然后在入口处引入了其中的<code>Test</code>组件</p></blockquote><p>但是这时候需要考虑到一个问题，如果以后在一个层级比较深的文件中引入这个组件会不会产生如下这种情况呢?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Test from &apos;../../../../components/Test&apos;</span><br></pre></td></tr></table></figure><blockquote><p>这样不仅书写起来麻烦还容易出错，因此这时候就需要进行一些路径上的优化，使得无论在哪个地方引入这些组件都能用同一种写法，例如:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Test from &apos;@comonents/Test&apos;</span><br></pre></td></tr></table></figure><blockquote><p>这里针对路径的优化有两种方案，第一种是直接在<code>webpack.resolve.alias</code>中进行路径配置:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9fffcce76fa5174d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>但是在这里我们使用了<code>ts</code>，所以还需要在<code>tsconfig</code>中进行配置:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-59b1a58c538f728f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这样也能用，不过我们还可以用<code>tsconfig-paths-webpack-plugin</code>这个包将<code>tsconfig</code>中对路径的设置映射<code>到webpack</code>配置中去，这样就不需要在<code>webpack</code>中再进行一次路径的配置了，首先安装:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tsconfig-paths-webpack-plugin</span><br></pre></td></tr></table></figure><blockquote><p>然后就采用前面<code>tsconfig</code>里面对<code>baseUrl</code>和<code>paths</code>的配置。<br>之后进入<code>webpack</code>配置中，引入<code>tsconfig-paths-webpack-plugin</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const TsconfigPathsPlugin = require(&apos;tsconfig-paths-webpack-plugin&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>接着在<code>webpack.resolve</code>中新增配置项<code>plugins</code>(这里要注意的是新增的不是<code>webpack.plugins</code>，而是<code>webpack.resolve.plugins</code>)，配置如下代码</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2388745cb4a2d2c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>接着我们就可以愉快地使用简化后的路径了：</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a69d77a627210a60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="2-6-构建缓存"><a href="#2-6-构建缓存" class="headerlink" title="2.6 构建缓存"></a>2.6 构建缓存</h2><blockquote><p>我们一般会使用<code>webpack-dev-server</code>来进行项目开发，当我们运行<code>webpack-dev-server</code>的时候它会在内存中进行项目的构建，但是当使用了<code>babel</code>之类的代码转换工具后，会对项目构建产生较大的性能影响，这是因为每一次的构建都会对代码进行重新转换。而构建缓存就是将构建的公用代码缓存在磁盘上，这样做的效果就是第一次构建的时间花销会比不用缓存的构建大，但是在之后每次构建的时间花销都会大大减少</p></blockquote><ul><li><strong>对比</strong> 我们拿一个较大的项目来看区别。 注: 左边是没有设置构建缓存，右边进行了构建缓存。 首先进行对比的是第一次构建时候的时间花销:</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f6737c7614fa602f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>然后是第二次构建的时间花销</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8c51fe3ed1ad6416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>可以看出在第二次构建的时候时间花销减少了百分之五十以上。</p><p><strong>设置构建缓存</strong></p><blockquote><p>在设置构建缓存之前我们首先要考虑的是那些地方需要进行设置，那么在前面的配置过程中，可以看出花销较大的地方有对<code>ts(x)</code>的转换并且以后还会添加对应的<code>babel</code>进去，然后还有针对<code>sass</code>类型的转换，那么我们就先对这两个地方的转换进行配置</p></blockquote><ol><li>对<code>ts(x)</code>的转换</li></ol><blockquote><p>这里因为我们使用的是<code>awesome-typescript-loader</code>，这个库本身自带了开启缓存的选项<code>useCache</code>，然后我们需要指定一个保存缓存文件的地方<code>cacheDirectory</code>，所以配置改为如下:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f824c8eb2f6" alt=""></p><ol start="2"><li>对<code>sass</code>类型的转换</li></ol><blockquote><p>这个地方我们需要使用到一个库<code>cache-loader</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cache-loader</span><br></pre></td></tr></table></figure><blockquote><p>然后在对<code>.scss</code>文件类型的转换配置中使用它，在这里我们主要是针对转换出来的<code>css</code>进行缓存，所以需要写在<code>typings-for-css-modules-loader</code>配置的前面:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a8612869bf4ba225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这样就配置好当前的构建缓存了，当你<code>npm run dev</code>的时候会发现根目录下生成了缓存文件<code>.cache-loader</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-aa84471a4af9e4dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>打开它看会发现有对应的缓存代码:</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5dc044b34a15bc81.png" alt="image.png"></p><h1 id="三、整理杂项"><a href="#三、整理杂项" class="headerlink" title="三、整理杂项"></a>三、整理杂项</h1><blockquote><p>在上一篇提升开发体验中，我们一下子集成了一堆插件和功能进去，导致项目结构比教混乱，重点问题就在<code>webpack</code>的相关配置项目录<code>build</code>文件夹中，所以今天的工作较为轻松，重点就是进行项目结构整理，然后再进行一些杂项的添加</p></blockquote><ul><li>整理项目结构</li><li>集成<code>Ant Design</code>并进行主题修改</li><li>整合常用函数，并且让所有组件继承这些函数</li><li>集成<code>mobx</code>进行项目的状态管理</li><li>使用<code>react-hot-loader</code>进行热加载</li><li>集成<code>svg-component</code></li></ul><h2 id="3-1-整理项目结构"><a href="#3-1-整理项目结构" class="headerlink" title="3.1 整理项目结构"></a>3.1 整理项目结构</h2><p>在做这一步的时候首先我们来看看现在的项目结构是怎么样的</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2afefae4" alt=""></p><blockquote><p>那么当前最先需要做的工作就是进行build文件夹下<code>webapck</code>的配置项整理</p></blockquote><p>针对<code>webpack</code>配置项的整理。做这一步的时候首先需要确定一点就是，我们根据什么来整理<code>webpack</code>配置项目录呢？要确定这一点只需要查看一下<code>webpack</code>中有些什么配置，然后就可以根据每个配置项进行模块划分</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2b307da5" alt=""></p><blockquote><p>在这份配置项中，因为<code>entry</code>、<code>output</code>、<code>resolve</code>内容相对较少，往后也不会有太多内容的添加，所以可以忽略</p></blockquote><p><strong>首先将plugins相关内容移出来</strong></p><ol><li>首先在<code>build</code>中新建文件<code>plugins.js</code>，然后将原先的<code>plugin</code>里面的代码拷贝过去</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2c047254" alt=""></p><ol start="2"><li>在<code>webpack.config.js</code>中将<code>plugins.js</code>的内容引入进来即可</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2c12d407" alt=""></p><p><strong>整合路径选择</strong>在<code>webpack.config.js</code>中你会看到许多使用<code>path.join</code>的地方，这一块也可以抽取出来作为一个工具模块。新建<code>build/utils.js</code>文件，然后写入如下代码，将路径的目标指向根目录，详细路径则通过参数的形式传入</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2c08d84e" alt=""></p><p>之后在任何需要使用的地方引入这个函数使用即可</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c2c233b37" alt=""></p><p><strong>将module相关内容移出来</strong> </p><blockquote><p>因为在<code>module</code>项中相关的配置相对较多，涵盖了对<code>ts(x)</code>和<code>scss</code>等相关文件的<code>loader</code>，以后还需要添加针对图片等文件类型的<code>loader</code>，所以这一块需要分的更加细一些:</p></blockquote><ol><li>在<code>build</code>中新建<code>rules</code>目录，里面新建<code>jsRules</code>和<code>styleRules</code>文件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c64eb6fa0" alt=""></p><ol start="2"><li>将之前<code>module</code>中的<code>loader</code>配置一如对应文件中并导出，然后在<code>webpack.config.js</code>中引入: 首先是<code>jsRules</code>内容</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c68636d4a" alt=""></p><blockquote><p>然后是<code>styleRules</code>内容</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c6fac503d" alt=""></p><p>最后是引入<code>rules</code>后的<code>webpack.config.js</code></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c79f0f5c4" alt=""></p><blockquote><p>至此我们就将<code>webpack</code>的配置项分离了出来，接下来我们集成<code>Ant DesignUI</code>库(简称<code>antd</code>)，并且修改其主题色。</p></blockquote><h2 id="3-2-集成antd"><a href="#3-2-集成antd" class="headerlink" title="3.2 集成antd"></a>3.2 集成antd</h2><blockquote><p>集成<code>antd</code> 要集成<code>antd</code>非常简单，只需要<code>npm install -S antd</code>即可，然后我们在<code>components/Test</code>组件中引入其中一个组件</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8c97991436" alt=""></p><p><strong>修改<code>antd</code>的主题配色</strong></p><blockquote><p>通常在开发中，我们采用的配色不是<code>antd</code>原本的配色，如果大面积引用<code>antd</code>组件的话，一个个去修改配色确实是非常麻烦的事情，于是这个时候就需要一次性对<code>antd</code>的主题色进行修改</p></blockquote><ol><li><code>antd</code>的样式使用<code>less</code>进行编写，对其主题的修改也就是对其中的<code>less</code>变量进行修改，所以想要修改主题需要安装<code>less</code>和<code>less-loader: npm install -D less less-loader</code></li><li>然后我们在根目录下添加一个<code>theme.js</code>文件，里面是需要修改的主题样式代码，具体有什么主题可以进行修改可以点击<a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">这里查看</a>:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d0b747b7c" alt=""></p><ol start="3"><li>然后编写在<code>build/rules/styleRules</code>中添加针对<code>less</code>文件的<code>loader</code>，如下图: 引入上一步的主题文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = <span class="built_in">require</span>(<span class="string">'../../../theme'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d1e9baa99" alt=""></p><ol start="4"><li>最后我们在<code>components/Test</code>组件中引入<code>Button</code>组件的样式<code>less</code>文件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d2765fc0e" alt=""></p><blockquote><p>此时可以查看效果，发现已经主题已经修改成功</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d27a7dca3" alt=""></p><ol start="5"><li>存在的问题</li></ol><blockquote><p>这个时候进行<code>antd</code>组件的引入和主题修改的步骤中还是存在一些问题的，比如在引入某个组件的同时还需要手动引入其对应的<code>less</code>文件，这是非常麻烦的一件事，那么找我们需要解决的就是在引入<code>antd</code>组件的同时也自动引入其对应的<code>less</code>文件。<br>另外，使用<code>import {Button } from &#39;antd&#39;</code>这样的引入方式存在一个很大的弊端，就是在引入其中某个组件的同时会把整个<code>antd</code>文件都引入进来，影响构建速度，而且打包后体积会变大，这样的话我们还需要做<code>antd</code>的按需加载。所以接下来我们需要解决掉这两个问题，而这两个问题也是可以同时解决的</p></blockquote><p><strong>antd按需加载</strong></p><ul><li>在<code>antd</code>官网中推荐使用<code>babel-plugin-import</code>来做按需加载，但是我们的项目用的是<code>typescript</code>，走的是<code>awesome-typescript-loader</code>编译，所以在我们的项目中<code>babel-plugin-import</code>是不生效的，这时候需要就需要一个叫做<code>ts-import-plugin</code>的插件<br><code>npm install -D ts-import-plugin</code></li><li>第二步我们需要在<code>build/rules/jsRules.js</code>中进行配置，根据<code>ts-import-plugin</code>的教程直接配置即可</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d44294d39" alt=""></p><ul><li>回到<code>Test</code>组件中 将<code>import &#39;antd/lib/button/style/index.less&#39;</code>这句话删掉，然后重新运行查看效果</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d564985fd" alt=""></p><h2 id="3-3-整合常用函数"><a href="#3-3-整合常用函数" class="headerlink" title="3.3 整合常用函数"></a>3.3 整合常用函数</h2><blockquote><p>在上一步中，我们集成了<code>antdUI</code>库，在这个库中有许多东西是非常常用的，例如消息组件<code>message</code>和通知组件<code>notification</code>，但是要用到这两个组件的话就得引入，当使用次数较多的时候，我们可以考虑将其整合在一个<code>react</code>组件中，然后所有的组件都继承这个组件即可，这样做的好处是当以后添加了例如<code>axios</code>这样的常用库的时候也可以整合到这个<code>react</code>组件中，使继承这个<code>react</code>组件的组件都可以用到</p></blockquote><p><strong>整合常用函数</strong></p><ol><li>我们先在<code>src</code>下新建<code>utils</code>目录，然后在<code>utils</code>中新建<code>reactExt.tsx</code>文件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d5b6090f8" alt=""></p><ol start="2"><li>然后在<code>tsconfig.json</code>中设置好<code>utils</code>的路径，方便以后的路径引用</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d5c1006a2" alt=""></p><ol start="3"><li>在<code>reactExt.tsx</code>中引入<code>antd</code>常用组件，然后导出这个整合了<code>antd</code>组件的组件，当然你也可以把它叫做类，其中需要注意的是，因为以后的每个<code>react</code>组件使用的都是<code>componentExt</code>，然后在这里我们需要使用<code>typescript</code>的<code>interface</code>来对<code>react</code>组件的<code>state</code>和<code>props</code>进行数据类型上的限制，但与此同时并不能知道每个<code>react</code>组件针对<code>state</code>和<code>props</code>的<code>interface</code>是怎么样的，所以在<code>componentExt</code>中需要用到泛型来灵活化<code>interface</code></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d6e8951c5" alt=""></p><ol start="4"><li>最后在<code>components/Test</code>组件中引入<code>comonentExt</code>进行测试:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d7b30cfdc" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d904c2d8c" alt=""></p><blockquote><p>以后如果有常用的功能性函数也可以往<code>components/reactExt</code>中进行添加。</p></blockquote><h2 id="3-4-集成mobx"><a href="#3-4-集成mobx" class="headerlink" title="3.4 集成mobx"></a>3.4 集成mobx</h2><blockquote><p><code>mobx</code>是<code>react</code>技术栈中一款优秀的状态管理工具，它具有数据监测的功能，并且比<code>redux</code>用起来更加方便，也能脱离<code>react</code>进行单独使用，安装<code>mobx</code>只需要<code>npm install -S mobx</code>即可，同时也要安装他和<code>react</code>连接的工具<code>npm install -S mobx-react</code>。接下来就以一个经典的计算器组件来测试<code>mobx</code>。</p></blockquote><p>准备工作 在进行测试之前，我们还需要整理一下组件存放的目录。首先区分一下组件目录的作用</p><ol><li><code>components</code>目录用于存放通用组件，该目录存放的组件不包含任何业务性功能。</li><li>新建<code>src/containers/views</code>目录，这个目录是用于存放业务组件的，并且这些组件不能复用。</li><li>新建<code>src/containers/shared</code>目录，这个目录用于存放可以复用的业务组件。</li><li>在<code>tsconfig.json</code>中设置简短路径方便以后调用</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8d962b539a" alt=""></p><p>这一步在该博客中作用体现不大，但是对真实项目的条理性是存在较好作用的。 如下图</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8dad2a591e" alt=""></p><p><strong>创建store</strong></p><ol><li>新建<code>src/store</code>目录用于存放<code>store</code>文件，然后在该目录下新建<code>globalStore</code>目录和其中的<code>index.tsx</code>文件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8db62a7861" alt=""></p><ol start="2"><li>然后在这个<code>index.tsx</code>文件中有如下代码:其中的<code>observable</code>和<code>action</code>的功能请自行查看<code>mobx</code>文档</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8db645466b" alt=""></p><ol start="3"><li>然后新建<code>src/store/index.tsx</code>文件用于导出这些<code>store</code></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8dc2c22e8a" alt=""></p><blockquote><p>连接<code>store</code> 创建了<code>store</code>之后我们还需要将其和<code>react</code>进行连接，这个时候就需要用到<code>mobx-react</code>这个库，我们去到<code>src/index.tsx</code>中进行修改</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8dd42b6277" alt=""></p><blockquote><p>这里面的<code>configure({enforceActions: &#39;observed&#39;})</code>用于限制被<code>observable</code>(也就是<code>store</code>中添加了<code>@observable</code>)的数据的修改方式，让其只能添加了<code>@action</code>的函数中进行修改</p></blockquote><p><strong>编写Counter组件进行测试</strong></p><ol><li>我们去到<code>src/containers/views</code>目录中，新增<code>Counter/index.tsx</code>，并写入如下代码:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8e6498d5b6" alt=""></p><ol start="2"><li>然后将这个组件用<code>mobx-react</code>变为可观测对象，并使用<code>@inject</code>注入<code>globalStore</code></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ebe0fe5a8" alt=""></p><ol start="3"><li>最后我们在<code>src/index.tsx</code>中引入<code>Counter</code>组件，顺便看看它的<code>props</code>中是否带有数据</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ebdf84fcb" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ec7ec007f" alt=""></p><ol start="4"><li>最后回到<code>Counter</code>组件中编写方法检验功能是否正常</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ec93a6e97" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ed83a36e1" alt=""></p><p><strong>给<code>store</code>添加全局<code>typescript</code>校验</strong></p><blockquote><p>在上面的例子中虽然我们在功能上已经可以正常的使用了，但是显而易见的是有报错，这个错误是因为没有填写针对组件<code>props</code>的验证接口导致<code>typescript</code>认为<code>globalStore</code>不存在而导致的。我们可以写成如下代码解决问题</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ed94ef498" alt=""></p><blockquote><p>但是每个引入了<code>globalStore</code>的组件都需要写一次显得非常麻烦，那么我们可以将<code>IGlobalStore</code>这个校验接口写成全局的校验接口，直接以如下图形式验证即可:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8ef763161e" alt=""></p><ol><li>我们在<code>src/store/globalStore</code>下新建<code>type.d.ts</code></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8efd0a612d" alt=""></p><ol start="2"><li>去到<code>globalStore/index.tsx</code>中，将<code>GlobalStore</code>类导出，我们将会利用这个类作为<code>typescript</code>校验接口来使用(<a href="https://www.tslang.cn/docs/handbook/classes.html" target="_blank" rel="noopener">这种用法可以点这里查看详情</a>):</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8f0c4f3793" alt=""></p><ol start="3"><li>在<code>type.d.ts</code>中引入这个类，然后定义并导出一个全局命名空间(该用法详解点这里)，接着在这个命名空间中把接口导出:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8f0d3eb028" alt=""></p><ol start="4"><li>回到<code>Counter</code>组件中，将接口改写为如下</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8f228cde5d" alt=""></p><blockquote><p>这里注意需要添加<code>?</code>，因为这个属性是从<code>store</code>中拿过来的，不填写的话，父组件会报错说没有传这个值。 但是因为添加了<code>?</code>，所以这个<code>globalStore</code>验证为不一定有，从而在组件中会有如下报错:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8f2cbe58cd" alt=""></p><blockquote><p>这个时候我们可以去<code>tsconfig.json</code>中将<code>strictNullChecks</code>项置为<code>false</code>，去掉<code>null</code>和<code>undefined</code>的检测即可</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8f3ae218f9" alt=""></p><ol start="5"><li>到了这一步我们集成<code>Mobx</code>就成功了，并且也针对<code>store</code>添加了对应的<code>typescript</code>验证:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8fb0f9a40b" alt=""></p><h2 id="3-5-使用react-hot-loader进行热加载"><a href="#3-5-使用react-hot-loader进行热加载" class="headerlink" title="3.5 使用react-hot-loader进行热加载"></a>3.5 使用react-hot-loader进行热加载</h2><blockquote><p>这一步主要针对的是<code>webpack-dev-server</code>的页面自动刷新功能不能保持数据一直都在，有时候在更新组件代码后需要保持数据不变的场景就会很不方便，所以这个时候就需要用到<code>react-hot-loader</code>来进行页面代码变更检测并找到变更部分进行更新，同时保证数据不变</p></blockquote><ol><li>首先我们安装它<code>npm install -D react-hot-loader</code></li><li>然后我们还要用到它里面的<code>react-hot-loader/babel</code>，但是因为我们使用了<code>awesome-typescript-loader</code>，所以不需要在根目录添加<code>.babelrc</code>文件了，直接进到<code>build/rules/jsRules.js</code>中进行配置即可</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8fe0254e3e" alt=""></p><ol start="3"><li>接着我们去到<code>Counter</code>组件中引入<code>react-hot-loader</code>中的<code>hot</code>方法，直接以装饰器的形式包裹组件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8fe202cfc4" alt=""></p><ol start="4"><li>最后再去<code>package.json</code>中，在<code>dev</code>命令后面加上<code>--hot</code>即可</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8fec22bb00" alt=""></p><ol start="5"><li>回到<code>Counter</code>组件中做个检测，先增加一些数字，然后在增加字样后面加上几个字符，可以看到页面更新的同时保留了数据</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f8fee77cede" alt=""></p><blockquote><p>实际上我们在控制台看到输出这个字样就已经成功了</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9017aa3c1c" alt=""></p><h2 id="3-6-集成svg-component"><a href="#3-6-集成svg-component" class="headerlink" title="3.6 集成svg-component"></a>3.6 集成svg-component</h2><blockquote><p>在前端开发中，<code>svg</code>格式的图片使用的是非常频繁的，而集成了<code>svg-component</code>后，我们可以将<code>svg</code>图片以组件的形式引入并使用</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9049d9e78d" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9053dc41a4" alt=""></p><ol><li>要集成<code>svg-component</code>我们首先要安装<code>@svgr/webpack: npm install -D @svgr/webpack</code>，这是一个<code>loader</code>；</li><li>然后我们在<code>build/rules</code>中新建<code>fileRules.js</code>文件，将<code>svg</code>格式文件用这个<code>loader</code>进行编译</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f90590b139a" alt=""></p><blockquote><p>然后在<code>webpack.config.json</code>中导入并重启项目</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f906b6a9866" alt=""></p><ol start="3"><li>接着我们随便找一个<code>svg</code>格式图片在<code>Counter</code>中引入并测试，虽然可以使用了，但是也导致了一个<code>typescript</code>的报错说找不到模块</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f90846eb8ae" alt=""></p><blockquote><p>导致这个错误的原因是<code>svg</code>图片本身并不具备模块化的功能，也不提供模块导出，所以在导入的时候是不能识别的，要解决这个问题可以模仿我们之前使用<code>css moudles</code>的方式，给它声明一个模块:我们在<code>typings</code>目录下新建<code>svg.d.ts</code>文件，并写入如下代码</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9087ba0a45" alt=""></p><blockquote><p>这个时候还可以为<code>svg-component</code>的使用提供代码提示和传入属性校验的支持: 我们声明一个接口，然后在声明的模块中用这个接口作为内容</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f908ff2a12b" alt=""></p><blockquote><p>这个接口使用的是<code>react</code>的无状态组件声明，传入属性则为<code>svg</code>文件自带的属性比如<code>col</code> or <code>width</code>之类的，然后我们就可以愉快地使用<code>svg-comonent</code>了</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9099a156a0" alt=""></p><h1 id="四、项目打包"><a href="#四、项目打包" class="headerlink" title="四、项目打包"></a>四、项目打包</h1><blockquote><p>本章节内容</p></blockquote><ul><li>添加打包命令</li><li>进行<code>css</code>和<code>js</code>分离</li><li>修改<code>html-webpack-plugin</code>配置项</li><li>添加<code>react-loadable</code>和<code>react-router</code>,进行代码分离和按需加载</li><li>添加<code>optimization</code>,进行第三方库代码分离</li><li>进行代码压缩</li><li>关于<code>externals</code></li></ul><h2 id="4-1-添加打包命令"><a href="#4-1-添加打包命令" class="headerlink" title="4.1 添加打包命令"></a>4.1 添加打包命令</h2><blockquote><p>我们先去<code>webpack.config.js</code>中观察一下<code>output</code>这个配置项</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f94ef778e90" alt=""></p><blockquote><p>该配置项指定了打包路径和打包后的<code>js</code>文件名，在<code>webpack</code>的配置项中，<code>output</code>是必须有的。 接着我们去到<code>package.json</code>中在<code>script</code>中添加打包命令<code>build</code>，该命令引用我们的<code>webpack.config.js</code>配置文件</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f94ef97e678" alt=""></p><blockquote><p>之后试试运行<code>npm run build</code>，会发现已经将项目打包出来了</p></blockquote><p><strong>添加打包路径工具</strong></p><blockquote><p>在上一步中，我们已经知道打包出来的文件位于根目录下的<code>dist</code>文件夹中，所以这个路径工具的添加指向<code>dist</code>文件夹： 我们去到<code>build/utils.js</code>文件中，添加如下代码:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f94f05a96c6" alt=""></p><p>以后指定打包文件存放路径的时候就可以直接使用这个工具进行指定</p><h2 id="4-2-分离css文件"><a href="#4-2-分离css文件" class="headerlink" title="4.2 分离css文件"></a>4.2 分离css文件</h2><blockquote><p>在上面打包的结果中，我们会发现只有一个<code>app.js</code>文件，而实际上我们是有写<code>css</code>样式的，但是现在的却并没有这个<code>css</code>文件，这是因为<code>webpack</code>将所有的资源(包含<code>js,</code> <code>css</code>等等)都看成是<code>chunk</code>，然后一起打包进一个文件中，这样会导致打包出来的<code>js</code>文件体积巨大，从而拖累页面的加载速度</p></blockquote><ol><li>在<code>webpack 4+</code>版本中，我们可以使用<code>mini-css-extract-plugin</code>进行<code>css</code>代码的分离，所以首先安装它<code>npm install -D mini-css-extract-plugin</code>。</li><li>然后我们到<code>build/plugins.js</code>中添加这个插件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f94f05a22d8" alt=""></p><ol start="3"><li>最后需要注意，之前在提升开发体验这一章中有提到过一点，<code>style-loader</code>用于将<code>css-loader</code>编译出来的代码转为<code>js</code>代码并写入<code>js</code>文件中，所以在这里，我们需要用<code>mini-css-extract-plugin</code>中的<code>loader</code>去替换掉<code>style-loader</code>，让它写入单独的<code>css</code>文件而不是js文件中:</li></ol><blockquote><p>我们去到<code>build/rules/styleRules.js</code>中，将原本的<code>style-loader</code>全都替换成<code>mini-css-extract-plugin</code>的<code>loader</code>(这一步可以进行开发环境和生产环境的区分，在文章中不进行区分</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f94f074b032" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95243b1af2" alt=""></p><ol start="4"><li>经过上面的步骤，我们可以打包进行测试: 运行<code>npm run build</code>可以发现打包结果中<code>css</code>文件已经进行了分离</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95246e0168" alt=""></p><blockquote><p>而在打包出来的<code>index.html</code>中也可以发现这个<code>css</code>文件被引入了</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9525da2e2b" alt=""></p><blockquote><p>最后我们再在打包路径中将打包出来的<code>js</code>文件用<code>js</code>文件夹包裹起来即可</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9525f9c958" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f952c7c1a74" alt=""></p><h2 id="4-3-修改html-webpack-plugin配置项"><a href="#4-3-修改html-webpack-plugin配置项" class="headerlink" title="4.3 修改html-webpack-plugin配置项"></a>4.3 修改<code>html-webpack-plugin</code>配置项</h2><blockquote><p>这一步主要用于压缩打包出来的<code>index.html</code>文件，但是单页面应用的话<code>html</code>内容其实不多，所以做不做也差不多，在本文章中也只是做个介绍:</p></blockquote><ol><li>首先在<code>html-webpack-plugin</code>中利用的是<code>html-minifier</code>来做压缩工作的，所以详细配置点击进去看即可，常用的如下</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95327fdfb4" alt=""></p><ol start="2"><li>第二个需要提一下则是<code>inject</code>这个配置项，该项指定资源如何注入，我们直接使用默认的<code>true</code>即可，他会将<code>js</code>资源注入到<code>&lt;body&gt;</code>标签的底部，如果要注入到头部填写<code>head</code>即可</li></ol><h2 id="4-4-代码分离和按需加载"><a href="#4-4-代码分离和按需加载" class="headerlink" title="4.4 代码分离和按需加载"></a>4.4 代码分离和按需加载</h2><blockquote><p>这一步和下一步都是在进行代码的拆分，考虑的是如果所有文件都塞进一个<code>js</code>文件中，会导致这个<code>js</code>文件体积臃肿，而单页面应用的所有构建又是依赖于这个<code>js</code>文件，所以需要进行代码分离，只加载当前页面需要构建的<code>js</code>文件。通常来说，我们会根据<code>react-router</code>分的页面来进行代码分离，再用<code>react-loadable</code>进行分割出来的代码的异步加载(当然你也可以将所有组件都进行代码分离然后异步加载)。所以在这里我们先利用<code>react-router</code>分两个页面home和page出来</p></blockquote><ol><li>首先我们安装<code>react-router: npm install -S react-router-dom</code>，然后在<code>src/containers/views</code>中新建<code>Home</code>和<code>Page</code>组件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f955223fdb1" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f955498f237" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f955a218dfa" alt=""></p><ol start="2"><li>接着安装<code>react-loadable: npm install -S react-loadable</code>, 然后在<code>src/containers/shared</code>中新建<code>App</code>组件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f956605e8a3" alt=""></p><blockquote><p>之后在里面的<code>index.tsx</code>中引用<code>react-router</code>和<code>react-loadable</code>进行组件按需加载: 当然不要忘了使用<code>react-hot-loader</code></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f957819d10f" alt=""></p><blockquote><p>这一步需要注意的是，<code>Loadable</code>这个函数中的<code>loading</code>参数是必须有的，至于如何使用可以自行参考<code>react-loadable</code>的<code>github</code>链接</p></blockquote><ol start="3"><li>这个时候去到页面看一下：在<code>/</code>路径下，没有加载<code>page.js</code>这个文件，而切换到<code>/page</code>路径则会加载<code>page.js</code>文件，这个时候按需加载就完成了:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95831e4bd4" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f958db827e0" alt=""></p><ol start="4"><li>最后我们观察一下打包后的<code>js</code>文件可以发现已经进行了分离</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9592077596" alt=""></p><h2 id="4-5-添加optimization"><a href="#4-5-添加optimization" class="headerlink" title="4.5 添加optimization"></a>4.5 添加<code>optimization</code></h2><blockquote><p><code>optimization</code>是<code>webpack4+</code>版本中新出的配置项，这个配置项的功能主要是进行代码压缩，优化。在本节中，我们需要将用到的处于<code>node_modules</code>中的第三方代码进行分离，在这里主要用到的是两个配置项<code>optimization.runtimeChunk</code>和<code>optimization.splitChunks</code>，其中<code>runtimeChunk</code>用于生成维系各各代码块关系的代码，<code>splitChunks</code>则用于指定需要进行分块的代码，和分块后文件名</p></blockquote><ol><li>我们去到<code>build</code>目录下，新建<code>optimization.js</code>，并添加如下代码</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95b234dd4b" alt=""></p><blockquote><p>然后在<code>webpack.config.js</code>中引入这个配置</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95bd023c85" alt=""></p><ol start="2"><li>最后我们打包试试看可以发现第三方代码都被打包进<code>vendor.js</code>文件中了</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95bd4ac283" alt=""></p><blockquote><p>你可以通过比对在添加<code>optimization</code>之前和之后打包出来的<code>app.js</code>文件来看出效果</p></blockquote><h2 id="4-6-代码压缩"><a href="#4-6-代码压缩" class="headerlink" title="4.6 代码压缩"></a>4.6 代码压缩</h2><blockquote><p>我们主要是做<code>js</code>和<code>css</code>的代码压缩和优化</p></blockquote><ol><li>在上面阶段中，我们打包出来的<code>js</code>代码是已经经过压缩的</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95dad8cc4a" alt=""></p><blockquote><p>所以在这个阶段我们可以利用<code>uglifyjs-webpack-plugin</code>进行一些压缩优化:<br>首先我们需要安装<code>npm install -D uglifyjs-webpack-plugin</code>，然后去到<code>build/optimization.js</code>中添加如下代码即可，具体的优化见代码</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95e8adf639" alt=""></p><blockquote><p>PS: 这里有一个点需要注意，在<code>uglifyjs-webpack-plugin</code>这个插件中，如果是<code>2.x</code>版本的话是不支持<code>es6</code>规范的，所以建议安装<code>1.x</code>版本，而我这里的版本是:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f95f0555484" alt=""></p><ol start="2"><li>然后我们进行<code>css</code>代码的压缩，这里需要使用到<code>optimize-css-assets-webpack-plugin</code>插件:<code>npm install -D optimize-css-assets-webpack-plugin</code>。<br>我们先去<code>Home</code>组件中随意添加一个样式并使用它</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f960309fb62" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f961b48fbd1" alt=""></p><blockquote><p>然后再去到<code>build/optimization.js</code>添加如下代码:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f96298993ed" alt=""></p><blockquote><p>具体的插件使用方式可以自行上<code>github</code>查看该插件。 最后查看打包出来后的<code>css</code>代码:</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f962dc1fe47" alt=""></p><blockquote><p>到现在压缩代码步骤也做完了，最后将介绍一下<code>webpack.externals</code>这个选项</p></blockquote><h2 id="4-7-关于externals"><a href="#4-7-关于externals" class="headerlink" title="4.7 关于externals"></a>4.7 关于<code>externals</code></h2><blockquote><p><code>webpack.externals</code>配置项用于在构建过程中忽略一些常用包的集成，从而降低构建时间和打包后的包大小，它的配置也很简单，在本章中只做简单介绍:在本项目中，我们可以将<code>react</code>和<code>react-dom</code>添加进<code>externals</code>中，然后在<code>html</code>模板中引入它们的外部链接:</p></blockquote><ol><li>我们先去到<code>webpack.config.js</code>中，添加<code>externals</code>选项，并且把<code>react</code>和<code>react-dom</code>添加进去</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9644d33821" alt=""></p><blockquote><p>这个配置项接收的是一个对象(其他形式请自行查阅<code>webpack</code>文档)，对象的键是指<code>webapck</code>在获取这个模块时候<code>require</code>时候的参数，而对应的值则是标明你打算将这个模块挂载的变量名，这里是挂载在<code>window</code>对象中的</p></blockquote><ol start="2"><li>去到<code>build/tpl/index.html</code>中，引入<code>cdn</code>中<code>react</code>和<code>react-dom</code>的链接</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9658bd182f" alt=""></p><ol start="3"><li>重启项目，可以发现在<code>npm run dev</code>中能够正常使用，并且也已经引入了两者的外部资源</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9661413f04" alt=""></p><ol start="4"><li>最后我们来对比一下打包后模块占用情况</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f966474b96f" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9686f0e243" alt=""></p><blockquote><p>再来对比一下两者打包出来的包体积大小</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f969e86d5c4" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f96a92a2402" alt=""></p><h1 id="五、团队规范"><a href="#五、团队规范" class="headerlink" title="五、团队规范"></a>五、团队规范</h1><blockquote><p>这篇文章的每一步都基于<code>vscode</code>这款编辑器，如果你使用的不是<code>vscode</code>，那么就需要自行集成相关插件及其配置。该文章只是简单介绍各各代码检测的流程，至于配置项则需要读者自行前往对应的<code>lint</code>官网自己查看、配置需要的。</p></blockquote><p><strong>在这块中我们需要做的如下</strong>:</p><ul><li>使用<code>tslint</code>做代码检测</li><li>使用<code>stylelint</code>做代码检测</li><li>添加<code>npm script</code>进行检测</li><li>使用<code>prettier</code>进行代码格式化</li><li>使用<code>pre-commit</code></li></ul><h2 id="5-1-使用tslint进行代码检测"><a href="#5-1-使用tslint进行代码检测" class="headerlink" title="5.1 使用tslint进行代码检测"></a>5.1 使用tslint进行代码检测</h2><blockquote><p>我们的项目因为大量使用<code>typescript</code>，所以使用的是<code>tslint</code>检测工具，如果在你的项目中没有用到<code>typescript</code>，那么请使用<code>eslint</code></p></blockquote><ol><li>首先我们需要在<code>vscode</code>中安装插件:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9dff505830" alt=""></p><blockquote><p>然后在项目中安装<code>npm install -D tslint</code>。此外，因为我们有大量的<code>.tsx</code>文件，所以还需要<code>npm install -D tslint-react</code>来指定针对<code>.tsx</code>语法的限制</p></blockquote><ol start="2"><li>接着在根目录下新建<code>tsling.json</code>文件，该文件用于写<code>tslint</code>配置文件:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9dffb7feb2" alt=""></p><ol start="3"><li>在<code>tslint.json</code>中写入配置，配置项参考请<a href="https://palantir.github.io/tslint/rules/" target="_blank" rel="noopener">点击这里</a></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9dffa72149" alt=""></p><blockquote><p>这份配置项中，上面的<code>extends</code>是指<code>tslint</code>的扩展，第一个扩展是稳定且常规的<code>tsling</code>检测标准，第二个则是针对<code>.tsx</code>文件做的检测</p></blockquote><ol start="4"><li>测试一下是否生效: 我们将<code>no-console</code>改为<code>true</code>测试一下</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9dff914b71" alt=""></p><blockquote><p>然后在组件中写一个<code>console.log</code>就可以知道这份配置表已经生效</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e0040ce6a" alt=""></p><h2 id="5-2-使用stylelint做代码检测"><a href="#5-2-使用stylelint做代码检测" class="headerlink" title="5.2 使用stylelint做代码检测"></a>5.2 使用<code>stylelint</code>做代码检测</h2><ol><li>首先，在<code>vscode</code>安装<code>stylelint</code>这个插件，该插件可以对<code>css</code>、<code>less</code>、<code>scss</code>等类型的样式表代码进行格式和样式书写顺序上的检测:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D stylelint</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e005118f4" alt=""></p><ol start="2"><li>我们在根目录下创建<code>.stylelintrc.js</code>文件，然后安装官方推荐的配置<code>stylelint-config-standard</code>以及针对<code>scss</code>代码类型检测的插件<code>stylelint-scss</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D stylelint-config-standard stylelint-scss</span><br></pre></td></tr></table></figure><ol start="3"><li>然后在<code>.stylelintrc.js</code>文件中写入配置项</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e37e5534d" alt=""></p><ol start="4"><li>但是这时候针对<code>scss</code>代码的检测还是有问题的，它不能识别<code>scss</code>中例如<code>@mixin</code>、<code>@include</code>之类的语法:</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e37d61834" alt=""></p><p>所以还需要手动写一些规则覆盖掉针对这类语法的检测使其不报错:</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e3eaf28fa" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e4c7fee18" alt=""></p><h2 id="5-3-添加npm-script进行检测"><a href="#5-3-添加npm-script进行检测" class="headerlink" title="5.3 添加npm script进行检测"></a>5.3 添加<code>npm script</code>进行检测</h2><blockquote><p>这一步主要利用<code>tslint</code>和<code>stylelint</code>附带的命令行命令检测项目中存在的代码规范问题，然后输出到终端查看</p></blockquote><ol><li>去到<code>package.json</code>中，在<code>scripts</code>中添加如下命令</li></ol><blockquote><p>这条命令既检查<code>.tsx</code>文件也检查<code>.scss</code>文件</p></blockquote><ol start="2"><li>然后再终端中输入一次，就能看到报错如下</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e60035ebb" alt=""></p><p>然后定位到文件中去修改即可</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e61e4d27e" alt=""></p><h2 id="5-4-使用prettier进行代码格式化"><a href="#5-4-使用prettier进行代码格式化" class="headerlink" title="5.4 使用prettier进行代码格式化"></a>5.4 使用<code>prettier</code>进行代码格式化</h2><blockquote><p>除了上一节中手动定位并修改不规范的代码外，我们还可以依赖于<code>vscode</code>的插件来进行符合我们规范的代码格式化，这个插件推荐使用<code>prettier</code></p></blockquote><ol><li>首先在<code>vscode</code>中安装这个插件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e6ad151e7" alt=""></p><ol start="2"><li>然后去到用户设置表中,进到工作区设置进行配置，下图是该模板的配置，当然你也可以自行配置需要的设置</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e6eae3e6f" alt=""></p><ol start="3"><li>回到刚才错误的地方，只要我们一保存就会自动格式化成正确的</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e7581ebae" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e8cf71d5d" alt=""></p><h2 id="5-5-使用pre-commit"><a href="#5-5-使用pre-commit" class="headerlink" title="5.5 使用pre-commit"></a>5.5 使用<code>pre-commit</code></h2><blockquote><p>在前面的篇幅中，我们有将<code>lint</code>命令添加进<code>npm script</code>中，但是这个命令如果要自己去运行我想很多人都会忘记，结果就会导致可能有不符合规范的代码被上传到远端代码仓库中。这种情况下我们可以做<code>pre-commit</code>进行代码强制检测，也就是在<code>git commit</code>之前进行一次代码检测，不符合规范不让<code>commit</code>。<br>实现这个功能我们可以安装<code>husky</code>这个插件<code>npm install -D husky</code>，然后在<code>npm script</code>中添加命令就好了</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/27/16619f9e9472379a" alt=""></p><h1 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h1><blockquote><p>完整代码示例  <a href="https://github.com/poetries/ts-react-tpl" target="_blank" rel="noopener">https://github.com/poetries/ts-react-tpl</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、项目初始化&quot;&gt;&lt;a href=&quot;#一、项目初始化&quot; class=&quot;headerlink&quot; title=&quot;一、项目初始化&quot;&gt;&lt;/a&gt;一、项目初始化&lt;/h1&gt;&lt;h2 id=&quot;1-1-创
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="React" scheme="http://blog.poetries.top/tags/React/"/>
    
      <category term="Typescript" scheme="http://blog.poetries.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript总结篇（二）</title>
    <link href="http://blog.poetries.top/2018/12/30/ts-summary/"/>
    <id>http://blog.poetries.top/2018/12/30/ts-summary/</id>
    <published>2018-12-30T04:30:14.000Z</published>
    <updated>2019-01-25T09:06:54.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-1-什么是-TypeScript"><a href="#1-1-什么是-TypeScript" class="headerlink" title="1.1 什么是 TypeScript"></a>1.1 什么是 TypeScript</h2><ul><li><code>TypeScript</code> 是 <code>JavaScript</code> 的一个超集，主要提供了类型系统和对 <code>ES6</code>的支持</li><li><code>TypeScript</code> 是由微软开发的一款开源的编程语言</li><li><code>TypeScript</code> 是 <code>Javascript</code> 的超级，遵循最新的 <code>ES6</code>、<code>Es5</code> 规范。<code>TypeScript</code> 扩展了 <code>JavaScript</code> 的语法</li><li><code>TypeScript</code> 更像后端 <code>java</code>、<code>C#</code>这样的面向对象语言可以让 <code>js</code> 开发大型企业项目</li></ul><h2 id="1-2-为什么选择-TypeScript"><a href="#1-2-为什么选择-TypeScript" class="headerlink" title="1.2 为什么选择 TypeScript"></a>1.2 为什么选择 TypeScript</h2><blockquote><p><code>Typescript</code>和<code>es6</code>、<code>es5</code>关系</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-167f327f2876c608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>TypeScript 增加了代码的可读性和可维护性</strong></p><ul><li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li><li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li><li>增强了编辑器和 <code>IDE</code> 的功能，包括代码补全、接口提示、跳转到定义、重构等</li></ul><p><strong>TypeScript 非常包容</strong></p><ul><li><code>TypeScript</code> 是 <code>JavaScript</code> 的超集，<code>.js</code> 文件可以直接重命名为 <code>.ts</code> 即可</li><li>即使不显式的定义类型，也能够自动做出类型推论</li><li>可以定义从简单到复杂的几乎一切类型</li><li>即使 <code>TypeScript</code> 编译报错，也可以生成 <code>JavaScript</code> 文件</li><li>兼容第三方库，即使第三方库不是用 <code>TypeScript</code> 写的，也可以编写单独的类型文件供 <code>TypeScript</code> 读取</li></ul><p><strong>TypeScript 拥有活跃的社区</strong></p><ul><li>大部分第三方库都有提供给 <code>TypeScript</code> 的类型定义文件</li><li><code>Google</code> 开发的<code>Angular2</code> 就是使用 <code>TypeScript</code> 编写的</li><li><code>TypeScript</code> 拥抱了 <code>ES6</code> 规范，也支持部分 <code>ESNext</code> 草案的规范</li><li>最新的 <code>Vue</code> 、<code>React</code> 也可以集成 <code>TypeScript</code></li></ul><p><strong>TypeScript 的缺点</strong></p><ul><li>有一定的学习成本，需要理解接口（<code>Interfaces</code>）、泛型（<code>Generics</code>）、类（<code>Classes</code>）、枚举类型（<code>Enums</code>）等前端工程师可能不是很熟悉的概念</li><li>短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，<code>TypeScript</code> 能够减少其维护成本</li><li>集成到构建流程需要一些工作量</li><li>可能和一些库结合的不是很完美</li></ul><h2 id="1-3-安装-TypeScript"><a href="#1-3-安装-TypeScript" class="headerlink" title="1.3 安装 TypeScript"></a>1.3 安装 TypeScript</h2><p><strong>typescript 安装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br></pre></td></tr></table></figure><blockquote><p>全局安装完成后，我们新建一个<code>hello.ts</code>的<code>ts</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.ts内容</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"poet"</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来我们在命令行输入<code>tsc hello.ts</code>来编译这个<code>ts</code>文件，然后会在同级目录生成一个编译好了的<code>hello.js</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js内容</span></span><br><span class="line"><span class="keyword">var</span> = <span class="string">"poet"</span></span><br></pre></td></tr></table></figure><blockquote><p>那么我们每次都要输<code>tsc hello.ts</code>命令来编译，这样很麻烦，能否让它自动编译？答案是可以的，使用<code>vscode</code>来开发，需要配置一下<code>vscode</code>就可以。</p></blockquote><blockquote><p>首先我们在命令行执行<code>tsc --init</code>来生成配置文件，然后我们在目录下看到生成了一个<code>tsconfig.json</code>文件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-064a181236aedb92.png" alt="image.png"></p><blockquote><p>这个<code>json</code>文件里有很多选项</p></blockquote><ul><li><code>target</code>是选择编译到什么语法</li><li><code>module</code>则是模块类型</li><li><code>outDir</code>则是输出目录，可以指定这个参数到指定目录</li></ul><blockquote><p>更多细节 <a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html</a></p></blockquote><blockquote><p>接下来我们需要开启监控了，在<code>vscode</code>任务栏中</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-da2ea080476546f2.png" alt="image.png"></p><h2 id="1-4-Hello-TypeScript"><a href="#1-4-Hello-TypeScript" class="headerlink" title="1.4 Hello TypeScript"></a>1.4 Hello TypeScript</h2><blockquote><p>将以下代码复制到 <code>hello.ts</code> 中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">'poetries'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sayHello(user));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这时候会生成一个编译好的文件 hello.js：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="string">'poetries'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sayHello(user));</span><br></pre></td></tr></table></figure><blockquote><p><code>TypeScript</code> 中，使用 <code>:</code> 指定变量的类型，<code>:</code> 的前后有没有空格都可以</p></blockquote><ul><li><code>TypeScript</code> 只会进行静态检查，如果发现有错误，编译的时候就会报错</li><li><code>TypeScript</code> 编译的时候即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件</li></ul><h1 id="二、基础"><a href="#二、基础" class="headerlink" title="二、基础"></a>二、基础</h1><h2 id="2-1-原始数据类型"><a href="#2-1-原始数据类型" class="headerlink" title="2.1 原始数据类型"></a>2.1 原始数据类型</h2><blockquote><p><code>JavaScript</code> 的类型分为两种：原始数据类型（<code>Primitive data types</code>）和对象类型（<code>Object types</code>）。</p></blockquote><ul><li>原始数据类型包括：<code>布尔值</code>、<code>数值</code>、<code>字符串</code>、<code>null</code>、<code>undefined</code> 以及 <code>ES6</code>中的新类型 <code>Symbol</code>。</li></ul><blockquote><p>本节主要介绍前五种原始数据类型在 <code>TypeScript</code> 中的应用</p></blockquote><h3 id="2-1-1-布尔值"><a href="#2-1-1-布尔值" class="headerlink" title="2.1.1 布尔值"></a>2.1.1 布尔值</h3><blockquote><p>布尔值是最基础的数据类型，在 <code>TypeScript</code> 中，使用 <code>boolean</code> 定义布尔值类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译通过</span></span><br><span class="line"><span class="comment">// 后面约定，未强调编译错误的代码片段，默认为编译通过</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，使用构造函数 <code>Boolean</code> 创造的对象不是布尔值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createdByNewBoolean: boolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,5): error TS2322: Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="comment">// 后面约定，注释中标出了编译报错的代码片段，表示编译未通过</span></span><br></pre></td></tr></table></figure><ul><li>事实上 <code>new Boolean()</code> 返回的是一个 <code>Boolean</code> 对象：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let createdByNewBoolean: Boolean = new Boolean(1);</span><br></pre></td></tr></table></figure><ul><li>直接调用 <code>Boolean</code> 也可以返回一个 <code>boolean</code> 类型：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let createdByBoolean: boolean = Boolean(1);</span><br></pre></td></tr></table></figure><ul><li>在 <code>TypeScript</code> 中，<code>boolean</code>是 <code>JavaScript</code> 中的基本类型，而 <code>Boolean</code> 是 <code>JavaScript</code>中的构造函数。其他基本类型（除了 <code>null</code> 和 <code>undefined</code>）一样</li></ul><h3 id="2-1-2-数值"><a href="#2-1-2-数值" class="headerlink" title="2.1.2 数值"></a>2.1.2 数值</h3><blockquote><p>使用 <code>number</code> 定义数值类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: number = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: number = <span class="number">0xf00d</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: number = <span class="number">0b1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: number = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> notANumber: number = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: number = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译结果：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> decLiteral = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> hexLiteral = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">var</span> binaryLiteral = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">var</span> octalLiteral = <span class="number">484</span>;</span><br><span class="line"><span class="keyword">var</span> notANumber = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> infinityNumber = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>0b101</code>0 和 <code>0o744</code>是 <code>ES6</code> 中的二进制和八进制表示法，它们会被编译为十进制数字</p></blockquote><h3 id="2-1-3-字符串"><a href="#2-1-3-字符串" class="headerlink" title="2.1.3 字符串"></a>2.1.3 字符串</h3><blockquote><p>使用 <code>string</code> 定义字符串类型：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: string = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> myAge: number = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> sentence: string = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123;myAge + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-空值"><a href="#2-1-4-空值" class="headerlink" title="2.1.4 空值"></a>2.1.4 空值</h3><blockquote><p><code>JavaScript</code> 没有空值（<code>Void</code>）的概念，在 <code>TypeScript</code> 中，可以用 <code>void</code> 表示没有任何返回值的函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code>和 <code>null</code>：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let unusable: void = undefined;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-Null-和-Undefined"><a href="#2-1-5-Null-和-Undefined" class="headerlink" title="2.1.5 Null 和 Undefined"></a>2.1.5 Null 和 Undefined</h3><blockquote><p>在 <code>TypeScript</code> 中，可以使用 <code>null</code> 和 <code>undefined</code>来定义这两个原始数据类型：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>undefined</code> 类型的变量只能被赋值为 <code>undefined</code>，<code>null</code> 类型的变量只能被赋值为 <code>null</code></p></blockquote><ul><li>与 <code>void</code> 的区别是，<code>undefined</code>和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> num: number = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样也不会报错</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br></pre></td></tr></table></figure><blockquote><p>而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="keyword">void</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><h2 id="2-2-任意值Any"><a href="#2-2-任意值Any" class="headerlink" title="2.2 任意值Any"></a>2.2 任意值Any</h2><blockquote><p>如果是一个普通类型，在赋值过程中改变类型是不被允许的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><blockquote><p>但如果是 <code>any</code> 类型，则允许被赋值为任意类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: any = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p><strong>任意值的属性和方法</strong></p><p>在任意值上访问任何属性都是允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName.firstName);</span><br></pre></td></tr></table></figure><p><strong>也允许调用任何方法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'Tom'</span>;</span><br><span class="line"></span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>);</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>).sayHello();</span><br><span class="line">anyThing.myName.setFirstName(<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>可以认为，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值</p></blockquote><p><strong>未声明类型的变量</strong></p><blockquote><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> something;</span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> something: any;</span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h2 id="2-3-类型推论"><a href="#2-3-类型推论" class="headerlink" title="2.3 类型推论"></a>2.3 类型推论</h2><blockquote><p>如果没有明确的指定类型，那么 <code>TypeScript</code> 会依照类型推论（<code>Type Inference</code>）的规则推断出一个类型</p></blockquote><p><strong>什么是类型推论</strong></p><p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let myFavoriteNumber = &apos;seven&apos;;</span><br><span class="line">myFavoriteNumber = 7;</span><br><span class="line"></span><br><span class="line">// index.ts(2,1): error TS2322: Type &apos;number&apos; is not assignable to type &apos;string&apos;.</span><br></pre></td></tr></table></figure><p>事实上，它等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let myFavoriteNumber: string = &apos;seven&apos;;</span><br><span class="line">myFavoriteNumber = 7;</span><br><span class="line"></span><br><span class="line">// index.ts(2,1): error TS2322: Type &apos;number&apos; is not assignable to type &apos;string&apos;.</span><br></pre></td></tr></table></figure><p><code>TypeScript</code> 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论</p><p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line"></span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-联合类型"><a href="#2-4-联合类型" class="headerlink" title="2.4 联合类型"></a>2.4 联合类型</h2><blockquote><p>联合类型（<code>Union Types</code>）表示取值可以为多种类型中的一种</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: string | number;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string | number;</span><br><span class="line">myFavoriteNumber = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'boolean' is not assignable to type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Type 'boolean' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><ul><li>联合类型使用 <code>|</code> 分隔每个类型。</li><li>这里的 <code>let myFavoriteNumber: string | number</code> 的含义是，允许 <code>myFavoriteNumber</code> 的类型是 <code>string</code> 或者 <code>number</code>，但是不能是其他类型</li></ul><p><strong>访问联合类型的属性或方法</strong></p><blockquote><p>当 <code>TypeScript</code> 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: string | number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// length 不是 string 和 number 的共有属性，所以会报错</span></span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure><blockquote><p>访问 <code>string</code> 和 <code>number</code> 的共有属性是没问题的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">something: string | number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string | number;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 编译时报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure><ul><li>上例中，第二行的 <code>myFavoriteNumber</code> 被推断成了 <code>string</code>，访问它的 <code>length</code> 属性不会报错。</li><li>而第四行的 <code>myFavoriteNumber</code> 被推断成了 <code>number</code>，访问它的 <code>length</code> 属性时就报错了</li></ul><h2 id="2-5-对象的类型——接口"><a href="#2-5-对象的类型——接口" class="headerlink" title="2.5 对象的类型——接口"></a>2.5 对象的类型——接口</h2><h3 id="2-5-1-简单例子"><a href="#2-5-1-简单例子" class="headerlink" title="2.5.1 简单例子"></a>2.5.1 简单例子</h3><blockquote><p>在 <code>TypeScript</code> 中，我们使用接口（<code>Interfaces</code>）来定义对象的类型</p></blockquote><p><strong>什么是接口</strong></p><ul><li>在面向对象语言中，接口（<code>Interfaces</code>）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（<code>classes</code>）去实现（<code>implements</code>）。</li><li><code>TypeScript</code> 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（<code>Shape</code>）」进行描述。</li></ul><p>接口一般首字母大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，我们定义了一个接口 <code>Person</code>，接着定义了一个变量 <code>tom</code>，它的类型是 <code>Person</code>。这样，我们就约束了 <code>tom</code> 的形状必须和接口 <code>Person</code> 一致</p></blockquote><p><strong>定义的变量比接口少了一些属性是不允许的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span></span><br></pre></td></tr></table></figure><p><strong>多一些属性也是不允许的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span></span><br></pre></td></tr></table></figure><blockquote><p>可见，赋值的时候，变量的形状必须和接口的形状保持一致。</p></blockquote><h3 id="2-5-2-可选属性"><a href="#2-5-2-可选属性" class="headerlink" title="2.5.2 可选属性"></a>2.5.2 可选属性</h3><blockquote><p>有时我们希望不要完全匹配一个形状，那么可以用可选属性</p></blockquote><p>可选属性的含义是该属性可以不存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-任意属性"><a href="#2-5-3-任意属性" class="headerlink" title="2.5.3 任意属性"></a>2.5.3 任意属性</h3><blockquote><p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">    [propName: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值</li><li>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">    [propName: string]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span></span><br><span class="line"><span class="comment">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Index signatures are incompatible.</span></span><br><span class="line"><span class="comment">//     Type 'string | number' is not assignable to type 'string'.</span></span><br><span class="line"><span class="comment">//       Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><ul><li>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code>不是 <code>string</code> 的子属性，所以报错了。</li><li>另外，在报错信息中可以看出，此时 <code>{ name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; }</code>的类型被推断成了 <code>{ [x: string]: string | number; name: string; age: number; gender: string; }</code>，这是联合类型和接口的结合</li></ul><h3 id="2-5-4-只读属性"><a href="#2-5-4-只读属性" class="headerlink" title="2.5.4 只读属性"></a>2.5.4 只读属性</h3><blockquote><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code>定义只读属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    readonly id: number;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">    [propName: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了</p></blockquote><p><strong>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    readonly id: number;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number;</span><br><span class="line">    [propName: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">89757</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span></span><br><span class="line"><span class="comment">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure><ul><li>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</li><li>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了</li></ul><h2 id="2-6-数组的类型"><a href="#2-6-数组的类型" class="headerlink" title="2.6 数组的类型"></a>2.6 数组的类型</h2><blockquote><p>在 <code>TypeScript</code> 中，数组类型有多种定义方式，比较灵活。</p></blockquote><h3 id="2-6-1「类型-方括号」表示法"><a href="#2-6-1「类型-方括号」表示法" class="headerlink" title="2.6.1「类型 + 方括号」表示法"></a>2.6.1「类型 + 方括号」表示法</h3><blockquote><p>最简单的方法是使用「类型 + 方括号」来表示数组：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p>数组的项中不允许出现其他的类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,5): error TS2322: Type '(number | string)[]' is not assignable to type 'number[]'.</span></span><br><span class="line"><span class="comment">//   Type 'number | string' is not assignable to type 'number'.</span></span><br><span class="line"><span class="comment">//     Type 'string' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><ul><li>上例中，<code>[1, &#39;1&#39;, 2, 3, 5]</code> 的类型被推断为 <code>(number | string)[]</code>，这是联合类型和数组的结合。</li><li>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.push(<span class="string">'8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,16): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>string</code> 类型的参数，所以报错了</p></blockquote><h3 id="2-6-2-数组泛型"><a href="#2-6-2-数组泛型" class="headerlink" title="2.6.2 数组泛型"></a>2.6.2 数组泛型</h3><blockquote><p>也可以使用数组泛型（<code>Array Generic</code>）<code>Array&lt;elemType&gt;</code>来表示数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="2-6-3-用接口表示数组"><a href="#2-6-3-用接口表示数组" class="headerlink" title="2.6.3 用接口表示数组"></a>2.6.3 用接口表示数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface NumberArray &#123;</span><br><span class="line">    [index: number]: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p><code>NumberArray</code> 表示：只要 <code>index</code> 的类型是 <code>number</code>，那么值的类型必须是 <code>number</code></p></blockquote><h3 id="2-6-4-any-在数组中的应用"><a href="#2-6-4-any-在数组中的应用" class="headerlink" title="2.6.4 any 在数组中的应用"></a>2.6.4 any 在数组中的应用</h3><blockquote><p>一个比较常见的做法是，用 <code>any</code> 表示数组中允许出现任意类型：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: any[] = [<span class="string">'poetries'</span>, <span class="number">22</span>, &#123; <span class="attr">website</span>: <span class="string">'http://blog.poetries.top'</span> &#125;];</span><br></pre></td></tr></table></figure><h3 id="2-6-5-类数组"><a href="#2-6-5-类数组" class="headerlink" title="2.6.5 类数组"></a>2.6.5 类数组</h3><blockquote><p>类数组（<code>Array-like Object</code>）不是数组类型，比如 <code>arguments</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: number[] = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,7): error TS2322: Type 'IArguments' is not assignable to type 'number[]'.</span></span><br><span class="line"><span class="comment">//   Property 'push' is missing in type 'IArguments'.</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上常见的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-函数的类型"><a href="#2-7-函数的类型" class="headerlink" title="2.7 函数的类型"></a>2.7 函数的类型</h2><h3 id="2-7-1-函数声明"><a href="#2-7-1-函数声明" class="headerlink" title="2.7.1 函数声明"></a>2.7.1 函数声明</h3><blockquote><p>在 <code>JavaScript</code> 中，有两种常见的定义函数的方式——函数声明（<code>Function Declaration</code>）和函数表达式（<code>Function Expression</code>）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>一个函数有输入和输出，要在 <code>TypeScript</code> 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，输入多余的（或者少于要求的）参数，是不被允许的：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure><h3 id="2-7-2-函数表达式"><a href="#2-7-2-函数表达式" class="headerlink" title="2.7.2 函数表达式"></a>2.7.2 函数表达式</h3><blockquote><p>如果要我们现在写一个对函数表达式（<code>Function Expression</code>）的定义，可能会写成这样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 <code>mySum</code> 添加类型，则应该是这样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt;左边 (x: number, y: number) 是输入类型 </span></span><br><span class="line"><span class="comment">// =&gt;右边number是输出类型</span></span><br><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;</strong></p><blockquote><p>在 <code>TypeScript</code> 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p></blockquote><h3 id="2-7-3-用接口定义函数的形状"><a href="#2-7-3-用接口定义函数的形状" class="headerlink" title="2.7.3 用接口定义函数的形状"></a>2.7.3 用接口定义函数的形状</h3><blockquote><p>我们也可以使用接口的方式来定义一个函数需要符合的形状</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName?: string, lastName: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (firstName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="literal">undefined</span>, <span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span></span><br></pre></td></tr></table></figure><h3 id="2-7-4-参数默认值"><a href="#2-7-4-参数默认值" class="headerlink" title="2.7.4 参数默认值"></a>2.7.4 参数默认值</h3><blockquote><p>在 <code>ES6</code>中，我们允许给函数的参数添加默认值，<code>TypeScript</code> 会将添加了默认值的参数识别为可选参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string, lastName: string = <span class="string">'Cat'</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p><strong>此时就不受「可选参数必须接在必需参数后面」的限制了</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string = <span class="string">'Tom'</span>, lastName: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> cat = buildName(<span class="literal">undefined</span>, <span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-7-5-剩余参数"><a href="#2-7-5-剩余参数" class="headerlink" title="2.7.5 剩余参数"></a>2.7.5 剩余参数</h3><blockquote><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（<code>rest</code> 参数）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>事实上，items 是一个数组。所以我们可以用数组的类型来定义它</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array: any[], ...items: any[]</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意，rest 参数只能是最后一个参数</p></blockquote><h3 id="2-7-6-函数重载"><a href="#2-7-6-函数重载" class="headerlink" title="2.7.6 函数重载"></a>2.7.6 函数重载</h3><ul><li>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</li></ul><blockquote><p>比如，我们需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code></p></blockquote><p><strong>利用联合类型，我们可以这么实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串</p></blockquote><p><strong>这时，我们可以使用重载定义多个 reverse 的函数类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上例中，我们重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</li></ul><blockquote><p><strong>注意</strong>，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面</p></blockquote><h2 id="2-8-类型断言"><a href="#2-8-类型断言" class="headerlink" title="2.8 类型断言"></a>2.8 类型断言</h2><blockquote><p>类型断言（<code>Type Assertion</code>）可以用来手动指定一个值的类型。</p></blockquote><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;值</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line"></span><br><span class="line">值 as 类型</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>tsx</code> 语法（<code>React</code> 的 <code>jsx</code> 语法的 <code>ts</code> 版）中必须用后一种</p></blockquote><p><strong>例子：将一个联合类型的变量指定为一个更加具体的类型</strong></p><blockquote><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: string | number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure><blockquote><p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: string | number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (something.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> something.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br><span class="line"><span class="comment">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，获取 <code>something.length</code>的时候会报错</p></blockquote><p><strong>此时可以使用类型断言，将 something 断言成 string</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: string | number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="xml"><span class="tag">&lt;<span class="name">string</span>&gt;</span>something).length) &#123;</span></span><br><span class="line">        return (&lt;string&gt;something).length;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可</p></blockquote><p><strong>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBoolean</span>(<span class="params">something: string | number</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">boolean</span>&gt;</span>something;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span></span><br><span class="line"><span class="xml">//   Type 'number' is not comparable to type 'boolean'.</span></span><br></pre></td></tr></table></figure><h2 id="2-9-声明文件"><a href="#2-9-声明文件" class="headerlink" title="2.9 声明文件"></a>2.9 声明文件</h2><blockquote><p>当使用第三方库时，我们需要引用它的声明文件</p></blockquote><h3 id="2-9-1-声明-declare-语句"><a href="#2-9-1-声明-declare-语句" class="headerlink" title="2.9.1 声明(declare)语句"></a>2.9.1 声明(declare)语句</h3><blockquote><p>假如我们想使用第三方库，比如 <code>jQuery</code>，我们通常这样获取一个 <code>id</code> 是 <code>foo</code> 的元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#foo'</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>但是在 <code>TypeScript</code> 中，我们并不知道 <code>$</code> 或 <code>jQuery</code>是什么东西</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,1): error TS2304: Cannot find name 'jQuery'.</span></span><br></pre></td></tr></table></figure><blockquote><p>这时，我们需要使用 <code>declare</code> 关键字来定义它的类型，帮助<code>TypeScript</code> 判断我们传入的参数类型对不对</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">var</span> jQuery: <span class="function">(<span class="params">selector: string</span>) =&gt;</span> any;</span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上例的编译结果是：</span></span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-9-2-声明文件-约定-d-ts后缀"><a href="#2-9-2-声明文件-约定-d-ts后缀" class="headerlink" title="2.9.2 声明文件(约定.d.ts后缀)"></a>2.9.2 声明文件(约定.d.ts后缀)</h3><blockquote><p>通常我们会把类型声明放到一个单独的文件中，这就是声明文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery.d.ts</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> jQuery: <span class="function">(<span class="params">string</span>) =&gt;</span> any;</span><br></pre></td></tr></table></figure><ul><li>我们约定声明文件以 <code>.d.ts</code> 为后缀。</li><li>然后在使用到的文件的开头，用<code>「三斜线指令」///</code>表示引用了声明文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path="./jQuery.d.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-9-3-第三方声明文件"><a href="#2-9-3-第三方声明文件" class="headerlink" title="2.9.3 第三方声明文件"></a>2.9.3 第三方声明文件</h3><blockquote><p>当然，<code>jQuery</code> 的声明文件不需要我们定义了，已经有人帮我们定义好了：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/index.d.ts" target="_blank" rel="noopener">jQuery in DefinitelyTyped</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type definitions for jquery 3.3</span></span><br><span class="line"><span class="comment">// Project: https://jquery.com</span></span><br><span class="line"><span class="comment">// Definitions by: Leonard Thieu &lt;https://github.com/leonard-thieu&gt;</span></span><br><span class="line"><span class="comment">//                 Boris Yankov &lt;https://github.com/borisyankov&gt;</span></span><br><span class="line"><span class="comment">//                 Christian Hoffmeister &lt;https://github.com/choffmeister&gt;</span></span><br><span class="line"><span class="comment">//                 Steve Fenton &lt;https://github.com/Steve-Fenton&gt;</span></span><br><span class="line"><span class="comment">//                 Diullei Gomes &lt;https://github.com/Diullei&gt;</span></span><br><span class="line"><span class="comment">//                 Tass Iliopoulos &lt;https://github.com/tasoili&gt;</span></span><br><span class="line"><span class="comment">//                 Jason Swearingen &lt;https://github.com/jasons-novaleaf&gt;</span></span><br><span class="line"><span class="comment">//                 Sean Hill &lt;https://github.com/seanski&gt;</span></span><br><span class="line"><span class="comment">//                 Guus Goossens &lt;https://github.com/Guuz&gt;</span></span><br><span class="line"><span class="comment">//                 Kelly Summerlin &lt;https://github.com/ksummerlin&gt;</span></span><br><span class="line"><span class="comment">//                 Basarat Ali Syed &lt;https://github.com/basarat&gt;</span></span><br><span class="line"><span class="comment">//                 Nicholas Wolverson &lt;https://github.com/nwolverson&gt;</span></span><br><span class="line"><span class="comment">//                 Derek Cicerone &lt;https://github.com/derekcicerone&gt;</span></span><br><span class="line"><span class="comment">//                 Andrew Gaspar &lt;https://github.com/AndrewGaspar&gt;</span></span><br><span class="line"><span class="comment">//                 Seikichi Kondo &lt;https://github.com/seikichi&gt;</span></span><br><span class="line"><span class="comment">//                 Benjamin Jackman &lt;https://github.com/benjaminjackman&gt;</span></span><br><span class="line"><span class="comment">//                 Poul Sorensen &lt;https://github.com/s093294&gt;</span></span><br><span class="line"><span class="comment">//                 Josh Strobl &lt;https://github.com/JoshStrobl&gt;</span></span><br><span class="line"><span class="comment">//                 John Reilly &lt;https://github.com/johnnyreilly&gt;</span></span><br><span class="line"><span class="comment">//                 Dick van den Brink &lt;https://github.com/DickvdBrink&gt;</span></span><br><span class="line"><span class="comment">//                 Thomas Schulz &lt;https://github.com/King2500&gt;</span></span><br><span class="line"><span class="comment">//                 Terry Mun &lt;https://github.com/terrymun&gt;</span></span><br><span class="line"><span class="comment">// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped</span></span><br><span class="line"><span class="comment">// TypeScript Version: 2.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入声明文件</span></span><br><span class="line"><span class="comment">/// &lt;reference types="sizzle" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="JQueryStatic.d.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="JQuery.d.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="misc.d.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="legacy.d.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = jQuery;</span><br></pre></td></tr></table></figure><ul><li>我们可以直接下载下来使用，但是更推荐的是使用工具统一管理第三方库的声明文件- 社区已经有多种方式引入声明文件，不过 <code>TypeScript 2.0</code>推荐使用 <code>@types</code> 来管理。</li><li><code>@types</code> 的使用方式很简单，直接用 <code>npm</code> 安装对应的声明模块即可，以 <code>jQuery</code> 举例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/jquery --save-dev</span><br></pre></td></tr></table></figure><p><strong>可以在这个页面搜索你需要的声明文件</strong></p><blockquote><p><a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">http://microsoft.github.io/TypeSearch/</a></p></blockquote><h2 id="2-10-内置对象"><a href="#2-10-内置对象" class="headerlink" title="2.10 内置对象"></a>2.10 内置对象</h2><blockquote><p><code>JavaScript</code> 中有很多内置对象，它们可以直接在 <code>TypeScript</code> 中当做定义好了的类型</p></blockquote><blockquote><p>内置对象是指根据标准在全局作用域（<code>Global</code>）上存在的对象。这里的标准是指 <code>ECMAScript</code> 和其他环境（比如 <code>DOM</code>）的标准</p></blockquote><h3 id="2-10-1-ECMAScript-的内置对象"><a href="#2-10-1-ECMAScript-的内置对象" class="headerlink" title="2.10.1 ECMAScript 的内置对象"></a>2.10.1 ECMAScript 的内置对象</h3><p><strong>ECMAScript 标准提供的内置对象有</strong></p><blockquote><p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等</p></blockquote><p>我们可以在 <code>TypeScript</code> 中将变量定义为这些类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error occurred'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br></pre></td></tr></table></figure><blockquote><p>更多的内置对象，可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">MDN 的文档</a></p></blockquote><blockquote><p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库的定义文件中</a></p></blockquote><h3 id="2-10-2-DOM-和-BOM-的内置对象"><a href="#2-10-2-DOM-和-BOM-的内置对象" class="headerlink" title="2.10.2 DOM 和 BOM 的内置对象"></a>2.10.2 DOM 和 BOM 的内置对象</h3><p><strong>DOM 和 BOM 提供的内置对象有</strong></p><blockquote><p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p></blockquote><blockquote><p>TypeScript 中会经常用到这些类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>它们的定义文件同样在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库的定义文件中</a></p></blockquote><h3 id="2-10-3-TypeScript-核心库的定义文件"><a href="#2-10-3-TypeScript-核心库的定义文件" class="headerlink" title="2.10.3 TypeScript 核心库的定义文件"></a>2.10.3 TypeScript 核心库的定义文件</h3><blockquote><p><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库</a>的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的</p></blockquote><blockquote><p>当你在使用一些常用的方法的时候，<code>TypeScript</code> 实际上已经帮你做了很多类型判断的工作了，比如</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code>的类型定义如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="built_in">Math</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value of a base expression taken to a specified power.</span></span><br><span class="line"><span class="comment">     * @param x The base value of the expression.</span></span><br><span class="line"><span class="comment">     * @param y The exponent value of the expression.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pow(x: number, <span class="attr">y</span>: number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再举一个 <code>DOM</code> 中的例子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.targetCurrent);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type 'MouseEvent'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，<code>addEventListener</code> 方法是在 <code>TypeScript</code> 核心库中定义的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent &#123;</span><br><span class="line">    addEventListener(type: string, <span class="attr">listener</span>: <span class="function">(<span class="params">ev: MouseEvent</span>) =&gt;</span> any, useCapture?: boolean): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了</p></blockquote><p><strong>注意，TypeScript 核心库的定义中不包含 Node.js 部分</strong></p><h3 id="2-10-4-用-TypeScript-写-Node-js"><a href="#2-10-4-用-TypeScript-写-Node-js" class="headerlink" title="2.10.4 用 TypeScript 写 Node.js"></a>2.10.4 用 TypeScript 写 Node.js</h3><blockquote><p><code>Node.js</code> 不是内置对象的一部分，如果想用 <code>TypeScript</code> 写 <code>Node.js</code>，则需要引入第三方声明文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure><h1 id="三、进阶"><a href="#三、进阶" class="headerlink" title="三、进阶"></a>三、进阶</h1><h2 id="3-1-类型别名"><a href="#3-1-类型别名" class="headerlink" title="3.1 类型别名"></a>3.1 类型别名</h2><blockquote><p>类型别名用来给一个类型起个新名字</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Name = string;</span><br><span class="line"></span><br><span class="line">type NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> string;</span><br><span class="line"></span><br><span class="line">type NameOrResolver = Name | NameResolver; <span class="comment">// 联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们使用 <code>type</code> 创建类型别名。</p><blockquote><p>类型别名常用于联合类型</p></blockquote><h2 id="3-2-字符串字面量类型"><a href="#3-2-字符串字面量类型" class="headerlink" title="3.2 字符串字面量类型"></a>3.2 字符串字面量类型</h2><blockquote><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(7,47): error TS2345: Argument of type '"dbclick"' is not assignable to parameter of type 'EventNames'.</span></span><br></pre></td></tr></table></figure><ul><li>上例中，我们使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>，它只能取三种字符串中的一种。</li></ul><p><strong>注意，类型别名与字符串字面量类型都是使用 type 进行定</strong></p><h2 id="3-3-元组"><a href="#3-3-元组" class="headerlink" title="3.3 元组"></a>3.3 元组</h2><ul><li>数组合并了相同类型的对象，而元组（<code>Tuple</code>）合并了不同类型的对象。</li><li>元组起源于函数编程语言,在这些语言中频繁使用元组。</li></ul><h3 id="3-3-1-简单的例子"><a href="#3-3-1-简单的例子" class="headerlink" title="3.3.1 简单的例子"></a>3.3.1 简单的例子</h3><blockquote><p>定义一对值分别为 <code>string</code> 和 <code>number</code>的元组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let user: [string, number] = [&apos;poetries&apos;, 22];</span><br></pre></td></tr></table></figure><blockquote><p>当赋值或访问一个已知索引的元素时，会得到正确的类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [string, number];</span><br><span class="line">user[<span class="number">0</span>] = <span class="string">'poetries'</span>;</span><br><span class="line">user[<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">user[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">user[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>也可以只赋值其中一项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [string, number];</span><br><span class="line">user[<span class="number">0</span>] = <span class="string">'poetries'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-越界的元素"><a href="#3-3-2-越界的元素" class="headerlink" title="3.3.2 越界的元素"></a>3.3.2 越界的元素</h3><blockquote><p>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [string, number];</span><br><span class="line">user = [<span class="string">'poetries'</span>, <span class="number">22</span>];</span><br><span class="line">user.push(<span class="string">'http://blog.poetries.top'</span>);</span><br><span class="line">user.push(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,14): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Type 'boolean' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><h2 id="3-4-枚举"><a href="#3-4-枚举" class="headerlink" title="3.4 枚举"></a>3.4 枚举</h2><blockquote><p>枚举（<code>Enum</code>）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等</p></blockquote><h3 id="3-4-1-简单的例子"><a href="#3-4-1-简单的例子" class="headerlink" title="3.4.1 简单的例子"></a>3.4.1 简单的例子</h3><blockquote><p>枚举使用 <code>enum</code> 关键字来定义：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">"Sun"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">1</span>] === <span class="string">"Mon"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">2</span>] === <span class="string">"Tue"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">6</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>事实上，上面的例子会被编译为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Days;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Days</span>) </span>&#123;</span><br><span class="line">    Days[Days[<span class="string">"Sun"</span>] = <span class="number">0</span>] = <span class="string">"Sun"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Mon"</span>] = <span class="number">1</span>] = <span class="string">"Mon"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Tue"</span>] = <span class="number">2</span>] = <span class="string">"Tue"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Wed"</span>] = <span class="number">3</span>] = <span class="string">"Wed"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Thu"</span>] = <span class="number">4</span>] = <span class="string">"Thu"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Fri"</span>] = <span class="number">5</span>] = <span class="string">"Fri"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Sat"</span>] = <span class="number">6</span>] = <span class="string">"Sat"</span>;</span><br><span class="line">&#125;)(Days || (Days = &#123;&#125;));</span><br></pre></td></tr></table></figure><h3 id="3-4-2-手动赋值"><a href="#3-4-2-手动赋值" class="headerlink" title="3.4.2 手动赋值"></a>3.4.2 手动赋值</h3><blockquote><p>我们也可以给枚举项手动赋值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun = <span class="number">7</span>, Mon = <span class="number">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">7</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，未手动赋值的枚举项会接着上一个枚举项递增</p></blockquote><p>如果未手动赋值的枚举项与手动赋值的重复了，<code>TypeScript</code> 是不会察觉到这一点的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun = <span class="number">3</span>, Mon = <span class="number">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Wed"</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">3</span>] === <span class="string">"Sun"</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">3</span>] === <span class="string">"Wed"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 <code>TypeScript</code> 并没有报错，导致 <code>Days[3]</code>的值先是 <code>&quot;Sun&quot;</code>，而后又被 <code>&quot;Wed&quot;</code> 覆盖了。编译的结果是</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Days;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Days</span>) </span>&#123;</span><br><span class="line">    Days[Days[<span class="string">"Sun"</span>] = <span class="number">3</span>] = <span class="string">"Sun"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Mon"</span>] = <span class="number">1</span>] = <span class="string">"Mon"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Tue"</span>] = <span class="number">2</span>] = <span class="string">"Tue"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Wed"</span>] = <span class="number">3</span>] = <span class="string">"Wed"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Thu"</span>] = <span class="number">4</span>] = <span class="string">"Thu"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Fri"</span>] = <span class="number">5</span>] = <span class="string">"Fri"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Sat"</span>] = <span class="number">6</span>] = <span class="string">"Sat"</span>;</span><br><span class="line">&#125;)(Days || (Days = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>所以使用的时候需要注意，最好不要出现这种覆盖的情况。</p><blockquote><p>手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 <code>tsc</code> 无视类型检查 (编译出的 <code>js</code> 仍然是可用的)：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun = <span class="number">7</span>, Mon, Tue, Wed, Thu, Fri, Sat = <span class="xml"><span class="tag">&lt;<span class="name">any</span>&gt;</span>"S"&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Days;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Days</span>) </span>&#123;</span><br><span class="line">    Days[Days[<span class="string">"Sun"</span>] = <span class="number">7</span>] = <span class="string">"Sun"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Mon"</span>] = <span class="number">8</span>] = <span class="string">"Mon"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Tue"</span>] = <span class="number">9</span>] = <span class="string">"Tue"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Wed"</span>] = <span class="number">10</span>] = <span class="string">"Wed"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Thu"</span>] = <span class="number">11</span>] = <span class="string">"Thu"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Fri"</span>] = <span class="number">12</span>] = <span class="string">"Fri"</span>;</span><br><span class="line">    Days[Days[<span class="string">"Sat"</span>] = <span class="string">"S"</span>] = <span class="string">"Sat"</span>;</span><br><span class="line">&#125;)(Days || (Days = &#123;&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 <code>1</code>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Days &#123;Sun = <span class="number">7</span>, Mon = <span class="number">1.5</span>, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">7</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1.5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2.5</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6.5</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-常数项和计算所得项"><a href="#3-4-3-常数项和计算所得项" class="headerlink" title="3.4.3 常数项和计算所得项"></a>3.4.3 常数项和计算所得项</h3><blockquote><p>枚举项有两种类型：常数项（<code>constant member</code>）和计算所得项（<code>computed member</code>）</p></blockquote><p>前面我们所举的例子都是常数项，一个典型的计算所得项的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue = <span class="string">"blue"</span>.length&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，<code>&quot;blue&quot;.length</code> 就是一个计算所得项。</p></blockquote><p>上面的例子不会报错，但是如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red = <span class="string">"red"</span>.length, Green, Blue&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,33): error TS1061: Enum member must have initializer.</span></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1061: Enum member must have initializer.</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4-常数枚举"><a href="#3-4-4-常数枚举" class="headerlink" title="3.4.4 常数枚举"></a>3.4.4 常数枚举</h3><blockquote><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enum Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure><blockquote><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上例的编译结果是：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如包含了计算成员，则会在编译阶段报错：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enum Color &#123;Red, Green, Blue = <span class="string">"blue"</span>.length&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,38): error TS2474: In 'const' enum declarations member initializer must be constant expression.</span></span><br></pre></td></tr></table></figure><h3 id="3-4-5-外部枚举"><a href="#3-4-5-外部枚举" class="headerlink" title="3.4.5 外部枚举"></a>3.4.5 外部枚举</h3><blockquote><p>外部枚举（<code>Ambient Enums</code>）是使用 <code>declare enum</code> 定义的枚举类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare enum Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure><ul><li>之前提到过，<code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</li></ul><p>上例的编译结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure><ul><li>外部枚举与声明语句一样，常出现在声明文件中。</li><li>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">const</span> enum Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译结果：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure><h2 id="3-5-类"><a href="#3-5-类" class="headerlink" title="3.5 类"></a>3.5 类</h2><h3 id="3-5-1-类的概念"><a href="#3-5-1-类的概念" class="headerlink" title="3.5.1 类的概念"></a>3.5.1 类的概念</h3><blockquote><p>类相关的概念做一个简单的介绍</p></blockquote><ul><li>类(<code>Class</code>)：定义了一件事物的抽象特点，包含它的属性和方法</li><li>对象（<code>Object</code>）：类的实例，通过 <code>new</code> 生成</li><li>面向对象（<code>OOP</code>）的三大特性：封装、继承、多态</li><li>封装（<code>Encapsulation</code>）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li><li>继承（<code>Inheritance</code>）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li><li>多态（<code>Polymorphism</code>）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code> 和 <code>Dog</code> 都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code> 方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code>还是 <code>Dog</code>，就可以直接调用 <code>eat</code>方法，程序会自动判断出来应该如何执行 <code>eat</code></li><li>存取器（<code>getter &amp; setter</code>）：用以改变属性的读取和赋值行为</li><li>修饰符（<code>Modifiers</code>）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code> 表示公有属性或方法</li><li>抽象类（<code>Abstract Class</code>）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li><li>接口（<code>Interfaces</code>）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（<code>implements</code>）。一个类只能继承自另一个类，但是可以实现多个接口</li></ul><h3 id="3-5-2-public-private-和-protected"><a href="#3-5-2-public-private-和-protected" class="headerlink" title="3.5.2 public private 和 protected"></a>3.5.2 public private 和 protected</h3><blockquote><p><code>TypeScript</code> 可以使用三种访问修饰符（<code>Access Modifiers</code>），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code></p></blockquote><ul><li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li><li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，<code>name</code> 被设置为了 <code>public</code>，所以直接访问实例的 <code>name</code> 属性是允许的。</p></blockquote><p>很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 <code>private</code> 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lass Animal &#123;</span><br><span class="line">    private name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></span><br><span class="line"><span class="comment">// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子编译后的代码是：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Animal;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name);</span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>private</code> 修饰的属性或方法，在子类中也是不允许访问的：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    private name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(11,17): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></span><br></pre></td></tr></table></figure><blockquote><p>而如果是用 <code>protected</code> 修饰，则允许在子类中访问</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    protected name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-抽象类"><a href="#3-5-3-抽象类" class="headerlink" title="3.5.3 抽象类"></a>3.5.3 抽象类</h3><blockquote><p><code>abstract</code> 用于定义抽象类和其中的抽象方法。</p></blockquote><p><strong>什么是抽象类？</strong></p><blockquote><p>首先，抽象类是不允许被实例化的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,11): error TS2511: Cannot create an instance of the abstract class 'Animal'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，我们定义了一个抽象类 <code>Animal</code>，并且定义了一个抽象方法 <code>sayHi</code>。在实例化抽象类的时候报错了。</p></blockquote><p>其次，抽象类中的抽象方法必须被子类实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is eating.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,7): error TS2515: Non-abstract class 'Cat' does not implement inherited abstract member 'sayHi' from class 'Animal'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，我们定义了一个类 <code>Cat</code> 继承了抽象类 <code>Animal</code>，但是没有实现抽象方法 <code>sayHi</code>，所以编译报错了。</p></blockquote><p>下面是一个正确使用抽象类的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name;</span><br><span class="line">    public <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public abstract sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p>上面的例子中，我们实现了抽象方法 <code>sayHi</code>，编译通过了。</p><blockquote><p>需要注意的是，即使是抽象方法，<code>TypeScript</code> 的编译结果中，仍然会存在这个类，上面的代码的编译结果是：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">    d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Animal = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Animal;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> Cat = (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(Cat, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Cat.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Meow, My name is '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Cat;</span><br><span class="line">&#125;(Animal));</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h3 id="3-5-4-类的类型"><a href="#3-5-4-类的类型" class="headerlink" title="3.5.4 类的类型"></a>3.5.4 类的类型</h3><blockquote><p>给类加上 <code>TypeScript</code> 的类型很简单，与接口类似：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi(): string &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: Animal = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><h2 id="3-6-类与接口"><a href="#3-6-类与接口" class="headerlink" title="3.6 类与接口"></a>3.6 类与接口</h2><h3 id="3-6-1-类实现接口"><a href="#3-6-1-类实现接口" class="headerlink" title="3.6.1 类实现接口"></a>3.6.1 类实现接口</h3><blockquote><p>实现（<code>implements</code>）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（<code>interfaces</code>），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性</p></blockquote><p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="title">implements</span> <span class="title">Alarm</span> </span>&#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">Alarm</span> </span>&#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个类可以实现多个接口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">Alarm</span>, <span class="title">Light</span> </span>&#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上例中，<code>Car</code> 实现了 <code>Alarm</code> 和 <code>Light</code>接口，既能报警，也能开关车灯</p></blockquote><h3 id="3-6-2-接口继承接口"><a href="#3-6-2-接口继承接口" class="headerlink" title="3.6.2 接口继承接口"></a>3.6.2 接口继承接口</h3><blockquote><p>接口与接口之间可以是继承关系</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface LightableAlarm extends Alarm &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上例中，我们使用 <code>extends</code> 使 <code>LightableAlarm</code> 继承 <code>Alarm</code></p></blockquote><h3 id="3-6-3-接口继承类"><a href="#3-6-3-接口继承类" class="headerlink" title="3.6.3 接口继承类"></a>3.6.3 接口继承类</h3><blockquote><p>接口也可以继承类：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x: number;</span><br><span class="line">    y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Point3d extends Point &#123;</span><br><span class="line">    z: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-6-4-混合类型"><a href="#3-6-4-混合类型" class="headerlink" title="3.6.4 混合类型"></a>3.6.4 混合类型</h3><blockquote><p>可以使用接口的方式来定义一个函数需要符合的形状</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有时候，一个函数还可以有自己的属性和方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Counter &#123;</span><br><span class="line">    (start: number): string;</span><br><span class="line">    interval: number;</span><br><span class="line">    reset(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="xml"><span class="tag">&lt;<span class="name">Counter</span>&gt;</span>function (start: number) &#123; &#125;;</span></span><br><span class="line"><span class="xml">    counter.interval = 123;</span></span><br><span class="line"><span class="xml">    counter.reset = function () &#123; &#125;;</span></span><br><span class="line"><span class="xml">    return counter;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">let c = getCounter();</span></span><br><span class="line"><span class="xml">c(10);</span></span><br><span class="line"><span class="xml">c.reset();</span></span><br><span class="line"><span class="xml">c.interval = 5.0;</span></span><br></pre></td></tr></table></figure><h2 id="3-7-泛型"><a href="#3-7-泛型" class="headerlink" title="3.7 泛型"></a>3.7 泛型</h2><blockquote><p>泛型（<code>Generics</code>）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性</p></blockquote><h3 id="3-7-1-简单的例子"><a href="#3-7-1-简单的例子" class="headerlink" title="3.7.1 简单的例子"></a>3.7.1 简单的例子</h3><blockquote><p>首先，我们来实现一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">length: number, value: any</span>): <span class="title">Array</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><ul><li>上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。</li><li>这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：<code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的<code>value</code> 的类型。</li></ul><blockquote><p>这时候，泛型就派上用场了：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: number, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray&lt;string&gt;(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，我们在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code>Array&lt;T&gt;</code>中即可使用了</p></blockquote><p>接着在调用的时候，可以指定它具体的类型为 <code>string</code>。当然，也可以不手动指定，而让类型推论自动推算出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: number, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><h3 id="3-7-2-多个类型参数"><a href="#3-7-2-多个类型参数" class="headerlink" title="3.7.2 多个类型参数"></a>3.7.2 多个类型参数</h3><blockquote><p>定义泛型的时候，可以一次定义多个类型参数：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function swap&lt;T, U&gt;(tuple: [T, U]): [U, T] &#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap([<span class="number">7</span>, <span class="string">'seven'</span>]); <span class="comment">// ['seven', 7]</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组</p></blockquote><h3 id="3-7-3-泛型约束"><a href="#3-7-3-泛型约束" class="headerlink" title="3.7.3 泛型约束"></a>3.7.3 泛型约束</h3><blockquote><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'T'.</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code>，所以编译的时候报错了。</p></blockquote><blockquote><p>这时，我们可以对泛型进行约束，只允许这个函数传入那些包含<code>length</code> 属性的变量。这就是泛型约束</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Lengthwise &#123;</span><br><span class="line">    length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上例中，我们使用了 <code>extends</code>约束了泛型 <code>T</code> 必须符合接口 <code>Lengthwise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p></blockquote><blockquote><p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code>不包含 <code>length</code>，那么在编译阶段就会报错了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Lengthwise &#123;</span><br><span class="line">    length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(10,17): error TS2345: Argument of type '7' is not assignable to parameter of type 'Lengthwise'.</span></span><br></pre></td></tr></table></figure><p><strong>多个类型参数之间也可以互相约束：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyFields</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">U</span>, <span class="title">U</span>&gt;(<span class="params">target: T, source: U</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[id] = (<span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>source)[id];</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return target;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">let x = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">copyFields(x, &#123; b: 10, d: 20 &#125;);</span></span><br></pre></td></tr></table></figure><blockquote><p>上例中，我们使用了两个类型参数，其中要求 <code>T</code> 继承 <code>U</code>，这样就保证了<code>U</code> 上不会出现 <code>T</code> 中不存在的字段</p></blockquote><h3 id="3-7-4-泛型接口"><a href="#3-7-4-泛型接口" class="headerlink" title="3.7.4 泛型接口"></a>3.7.4 泛型接口</h3><blockquote><p>可以使用接口的方式来定义一个函数需要符合的形状</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然也可以使用含有泛型的接口来定义函数的形状</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface CreateArrayFunc &#123;</span><br><span class="line">    &lt;T&gt;(length: number, <span class="attr">value</span>: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: number, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><blockquote><p>进一步，我们可以把泛型参数提前到接口名上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface CreateArrayFunc&lt;T&gt; &#123;</span><br><span class="line">    (length: number, <span class="attr">value</span>: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc&lt;any&gt;;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: number, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，此时在使用泛型接口的时候，需要定义泛型的类型</p></blockquote><h3 id="3-7-5-泛型类"><a href="#3-7-5-泛型类" class="headerlink" title="3.7.5 泛型类"></a>3.7.5 泛型类</h3><blockquote><p>与泛型接口类似，泛型也可以用于类的类型定义中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h3 id="3-7-6-泛型参数的默认类型"><a href="#3-7-6-泛型参数的默认类型" class="headerlink" title="3.7.6 泛型参数的默认类型"></a>3.7.6 泛型参数的默认类型</h3><blockquote><p>在 <code>TypeScript 2.3</code>以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">length: number, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-声明合并"><a href="#3-8-声明合并" class="headerlink" title="3.8 声明合并"></a>3.8 声明合并</h2><blockquote><p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型</p></blockquote><h3 id="3-8-1-函数的合并"><a href="#3-8-1-函数的合并" class="headerlink" title="3.8.1 函数的合并"></a>3.8.1 函数的合并</h3><blockquote><p>我们可以使用重载定义多个函数类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-接口的合并"><a href="#3-8-2-接口的合并" class="headerlink" title="3.8.2 接口的合并"></a>3.8.2 接口的合并</h3><blockquote><p>接口中的属性在合并时会简单的合并到一个接口中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Alarm &#123;</span><br><span class="line">    weight: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相当于：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">    weight: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，合并的属性的类型必须是唯一的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;  <span class="comment">// 虽然重复了，但是类型都是 `number`，所以不会报错</span></span><br><span class="line">    weight: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Alarm &#123;</span><br><span class="line">    price: string;  <span class="comment">// 类型不一致，会报错</span></span><br><span class="line">    weight: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable 'price' must be of type 'number', but here has type 'string'.</span></span><br></pre></td></tr></table></figure><p><strong>接口中方法的合并，与函数的合并一样</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">    alert(s: string): string;</span><br><span class="line">&#125;</span><br><span class="line">interface Alarm &#123;</span><br><span class="line">    weight: number;</span><br><span class="line">    alert(s: string, <span class="attr">n</span>: number): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Alarm &#123;</span><br><span class="line">    price: number;</span><br><span class="line">    weight: number;</span><br><span class="line">    alert(s: string): string;</span><br><span class="line">    alert(s: string, <span class="attr">n</span>: number): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-3-类的合并"><a href="#3-8-3-类的合并" class="headerlink" title="3.8.3 类的合并"></a>3.8.3 类的合并</h3><blockquote><p>类的合并与接口的合并规则一致</p></blockquote><h1 id="四、工程"><a href="#四、工程" class="headerlink" title="四、工程"></a>四、工程</h1><h2 id="4-1-tsconfig-json"><a href="#4-1-tsconfig-json" class="headerlink" title="4.1 tsconfig.json"></a>4.1 tsconfig.json</h2><p><strong>编译选项</strong></p><blockquote><p>你可以通过 <code>compilerOptions</code> 来定制你的编译选项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                       <span class="comment">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                  <span class="comment">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class="line">    <span class="string">"lib"</span>: [],                             <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="string">"checkJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"preserve"</span>,                     <span class="comment">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span></span><br><span class="line">    <span class="string">"declaration"</span>: <span class="literal">true</span>,                   <span class="comment">// 生成相应的 '.d.ts' 文件</span></span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,                     <span class="comment">// 生成相应的 '.map' 文件</span></span><br><span class="line">    <span class="string">"outFile"</span>: <span class="string">"./"</span>,                       <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./"</span>,                        <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">true</span>,                <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="string">"noEmit"</span>: <span class="literal">true</span>,                        <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="string">"importHelpers"</span>: <span class="literal">true</span>,                 <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="string">"isolatedModules"</span>: <span class="literal">true</span>,               <span class="comment">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                        <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="string">"strictNullChecks"</span>: <span class="literal">true</span>,              <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="string">"noImplicitThis"</span>: <span class="literal">true</span>,                <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="string">"alwaysStrict"</span>: <span class="literal">true</span>,                  <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="string">"noUnusedLocals"</span>: <span class="literal">true</span>,                <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="string">"noUnusedParameters"</span>: <span class="literal">true</span>,            <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="string">"noImplicitReturns"</span>: <span class="literal">true</span>,             <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="string">"noFallthroughCasesInSwitch"</span>: <span class="literal">true</span>,    <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,            <span class="comment">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="string">"paths"</span>: &#123;&#125;,                           <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="string">"rootDirs"</span>: [],                        <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="string">"typeRoots"</span>: [],                       <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="string">"types"</span>: [],                           <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="string">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,  <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="string">"sourceRoot"</span>: <span class="string">"./"</span>,                    <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="string">"mapRoot"</span>: <span class="string">"./"</span>,                       <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="string">"inlineSourceMap"</span>: <span class="literal">true</span>,               <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="string">"inlineSources"</span>: <span class="literal">true</span>,                 <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,        <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>          <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-TypeScript-编译"><a href="#4-2-TypeScript-编译" class="headerlink" title="4.2 TypeScript 编译"></a>4.2 TypeScript 编译</h2><blockquote><p>运行 <code>tsc -p ./path-to-project-directory</code> 。<code>tsc -w</code>来启用 <code>TypeScript</code>编译器的观测模式，在检测到文件改动之后，它将重新编译</p></blockquote><p><strong>指定需要编译的文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"./some/file.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 include 和 exclude 选项来指定需要包含的文件，和排除的文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"./folder"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"./folder/**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"./folder/someSubFolder"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、一些例子演示"><a href="#五、一些例子演示" class="headerlink" title="五、一些例子演示"></a>五、一些例子演示</h1><h2 id="5-1-定义ajax请求数据接口"><a href="#5-1-定义ajax请求数据接口" class="headerlink" title="5.1 定义ajax请求数据接口"></a>5.1 定义ajax请求数据接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">interface Config&#123;</span><br><span class="line">    type:string;</span><br><span class="line">    url:string;</span><br><span class="line">    data?:string;</span><br><span class="line">    dataType:string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原生js封装的ajax </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config:Config</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">   xhr.open(config.type,config.url,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">   xhr.send(config.data);</span><br><span class="line"></span><br><span class="line">   xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'chengong'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(config.dataType==<span class="string">'json'</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    type:<span class="string">'get'</span>,</span><br><span class="line">    data:<span class="string">'name=zhangsan'</span>,</span><br><span class="line">    url:<span class="string">'http://a.itying.com/api/productlist'</span>, <span class="comment">//api</span></span><br><span class="line">    dataType:<span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-2-函数类型接口-对方法约束"><a href="#5-2-函数类型接口-对方法约束" class="headerlink" title="5.2 函数类型接口-对方法约束"></a>5.2 函数类型接口-对方法约束</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型接口:对方法传入的参数 以及返回值进行约束   批量约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密的函数类型接口</span></span><br><span class="line"></span><br><span class="line">interface encrypt&#123;</span><br><span class="line">    (key:string,<span class="attr">value</span>:string):string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> md5:encrypt=<span class="function"><span class="keyword">function</span>(<span class="params">key:string,value:string</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟操作</span></span><br><span class="line">        <span class="keyword">return</span> key+value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(md5(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sha1:encrypt=<span class="function"><span class="keyword">function</span>(<span class="params">key:string,value:string</span>):<span class="title">string</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟操作</span></span><br><span class="line">    <span class="keyword">return</span> key+<span class="string">'----'</span>+value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sha1(<span class="string">'name'</span>,<span class="string">'lisi'</span>));</span><br></pre></td></tr></table></figure><h2 id="5-3-可索引接口：数组、对象的约束（不常用）"><a href="#5-3-可索引接口：数组、对象的约束（不常用）" class="headerlink" title="5.3 可索引接口：数组、对象的约束（不常用）"></a>5.3 可索引接口：数组、对象的约束（不常用）</h2><h3 id="5-3-1-可索引接口-对数组的约束"><a href="#5-3-1-可索引接口-对数组的约束" class="headerlink" title="5.3.1 可索引接口-对数组的约束"></a>5.3.1 可索引接口-对数组的约束</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface UserArr&#123;</span><br><span class="line">    [index:number]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr:UserArr=[<span class="string">'aaa'</span>,<span class="string">'bbb'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="5-3-2-可索引接口-对对象的约束"><a href="#5-3-2-可索引接口-对对象的约束" class="headerlink" title="5.3.2 可索引接口-对对象的约束"></a>5.3.2 可索引接口-对对象的约束</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface UserObj&#123;</span><br><span class="line">    [index:string]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr:UserObj=&#123;<span class="attr">name</span>:<span class="string">'张三'</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-类类型接口-对类的约束"><a href="#5-3-3-类类型接口-对类的约束" class="headerlink" title="5.3.3 类类型接口:对类的约束"></a>5.3.3 类类型接口:对类的约束</h3><ul><li>抽象类抽象有点相似    </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">interface Animal&#123;</span><br><span class="line">    name:string;</span><br><span class="line">    eat(str:string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    name:string;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'吃粮食'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> Dog(<span class="string">'小黑'</span>);</span><br><span class="line">d.eat();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name:string;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    eat(food:string)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'吃'</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c=<span class="keyword">new</span> Cat(<span class="string">'小花'</span>);</span><br><span class="line">c.eat(<span class="string">'老鼠'</span>);</span><br></pre></td></tr></table></figure><h2 id="5-4-接口的扩展"><a href="#5-4-接口的扩展" class="headerlink" title="5.4 接口的扩展"></a>5.4 接口的扩展</h2><blockquote><p>接口继承接口 类实现接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">interface Animal&#123;</span><br><span class="line">    eat():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    work():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    public name:string;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    coding(code:string)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+code)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Programmer</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">       <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'喜欢吃馒头'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    work()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'写代码'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w=<span class="keyword">new</span> Web(<span class="string">'小李'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// w.eat();</span></span><br><span class="line"></span><br><span class="line">w.coding(<span class="string">'写ts代码'</span>);</span><br></pre></td></tr></table></figure><h2 id="5-5-泛型类接口"><a href="#5-5-泛型类接口" class="headerlink" title="5.5 泛型类接口"></a>5.5 泛型类接口</h2><h3 id="5-5-1-泛型类-泛型方法"><a href="#5-5-1-泛型类-泛型方法" class="headerlink" title="5.5.1 泛型类 泛型方法"></a>5.5.1 泛型类 泛型方法</h3><ul><li>泛型：软件工程中，我们不仅要创建一致的定义良好的<code>API</code>，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>在像<code>C#</code>和<code>Java</code>这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</li><li>通俗理解：泛型就是解决类接口方法的复用性、以及对不特定数据类型的支持(类型校验)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能返回string类型的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value:string</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时返回 string类型 和number类型  （代码冗余）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData1</span>(<span class="params">value:string</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData2</span>(<span class="params">value:number</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时返回 string类型 和number类型  any可以解决这个问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'哈哈哈'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getData(<span class="number">123</span>);</span><br><span class="line">getData(<span class="string">'str'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//any放弃了类型检查,传入什么 返回什么。比如:传入number 类型必须返回number类型  传入 string类型必须返回string类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的参数类型和返回的参数类型可以不一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'哈哈哈'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>T</code>表示泛型，具体什么类型是调用这个方法的时候决定的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T表示泛型，具体什么类型是调用这个方法的时候决定的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;number&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">getData&lt;string&gt;(<span class="string">'1214231'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getData&lt;number&gt;(<span class="string">'2112'</span>);       <span class="comment">/*错误的写法*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'2145214214'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;number&gt;(<span class="number">123</span>);  <span class="comment">//参数必须是number</span></span><br><span class="line"></span><br><span class="line">getData&lt;string&gt;(<span class="string">'这是一个泛型'</span>);</span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><blockquote><p>泛型类：比如有个最小堆算法，需要同时支持返回数字和字符串 <code>a  -  z</code>两种类型。  通过类的泛型来实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本写法 但是不能传入字符串</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClass</span></span>&#123;</span><br><span class="line">    public list:number[]=[];</span><br><span class="line">    add(num:number)&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.push(num)</span><br><span class="line">    &#125;</span><br><span class="line">    min():number&#123;</span><br><span class="line">        <span class="keyword">var</span> minNum=<span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(minNum&gt;<span class="keyword">this</span>.list[i])&#123;</span><br><span class="line">                minNum=<span class="keyword">this</span>.list[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> MinClass();</span><br><span class="line"></span><br><span class="line">m.add(<span class="number">3</span>);</span><br><span class="line">m.add(<span class="number">22</span>);</span><br><span class="line">m.add(<span class="number">23</span>);</span><br><span class="line">m.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">m.add(<span class="number">7</span>);</span><br><span class="line">alert(m.min());</span><br></pre></td></tr></table></figure><p><strong>类的泛型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过泛型改写 可以同时传入number 字符串等</span></span><br><span class="line"><span class="comment">//类的泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClas</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    public list:T[]=[];</span><br><span class="line"></span><br><span class="line">    add(value:T):<span class="keyword">void</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.list.push(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    min():T&#123;        </span><br><span class="line">        <span class="keyword">var</span> minNum=<span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.list.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(minNum&gt;<span class="keyword">this</span>.list[i])&#123;</span><br><span class="line">                minNum=<span class="keyword">this</span>.list[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m1=<span class="keyword">new</span> MinClas&lt;number&gt;();   <span class="comment">/*实例化类 并且制定了类的T代表的类型是number*/</span></span><br><span class="line">m1.add(<span class="number">11</span>);</span><br><span class="line">m1.add(<span class="number">3</span>);</span><br><span class="line">m1.add(<span class="number">2</span>);</span><br><span class="line">alert(m1.min())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2=<span class="keyword">new</span> MinClas&lt;string&gt;();   <span class="comment">/*实例化类 并且制定了类的T代表的类型是string*/</span></span><br><span class="line"></span><br><span class="line">m2.add(<span class="string">'c'</span>);</span><br><span class="line">m2.add(<span class="string">'a'</span>);</span><br><span class="line">m2.add(<span class="string">'v'</span>);</span><br><span class="line">alert(m2.min())</span><br></pre></td></tr></table></figure><h3 id="5-5-2-泛型接口"><a href="#5-5-2-泛型接口" class="headerlink" title="5.5.2 泛型接口"></a>5.5.2 泛型接口</h3><p><strong>1. 方式1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface ConfigFn&#123;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt;(value:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getData:ConfigFn=<span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getData&lt;string&gt;(<span class="string">'张三'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// getData&lt;string&gt;(1243);  //错误</span></span><br></pre></td></tr></table></figure><p><strong>2. 方式2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface ConfigFn&lt;T&gt;&#123;</span><br><span class="line">    (value:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myGetData:ConfigFn&lt;string&gt;=getData;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myGetData(<span class="string">'20'</span>);  <span class="comment">/*正确*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// myGetData(20)  //错误</span></span><br></pre></td></tr></table></figure><h1 id="六、更多参考"><a href="#六、更多参考" class="headerlink" title="六、更多参考"></a>六、更多参考</h1><ul><li><a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">Typescript中文网</a></li><li><a href="http://jspang.com/post/typescript.html#toc-a39" target="_blank" rel="noopener">技术胖Typescript视频学习入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是-TypeScript&quot;&gt;&lt;a href=&quot;#1-1-什么是-TypeScript&quot; class=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Javascript" scheme="http://blog.poetries.top/tags/Javascript/"/>
    
      <category term="Typescript" scheme="http://blog.poetries.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础及结合React实践(一)</title>
    <link href="http://blog.poetries.top/2018/12/29/ts-intro-and-use-in-react/"/>
    <id>http://blog.poetries.top/2018/12/29/ts-intro-and-use-in-react/</id>
    <published>2018-12-29T08:30:24.000Z</published>
    <updated>2019-01-25T09:06:54.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-Typescript基础"><a href="#第一部分-Typescript基础" class="headerlink" title="第一部分 Typescript基础"></a>第一部分 Typescript基础</h1><h2 id="一、typescript-安装"><a href="#一、typescript-安装" class="headerlink" title="一、typescript 安装"></a>一、typescript 安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br></pre></td></tr></table></figure><blockquote><p>全局安装完成后，我们新建一个<code>hello.ts</code>的<code>ts</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.ts内容</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"poet"</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来我们在命令行输入<code>tsc hello.ts</code>来编译这个<code>ts</code>文件，然后会在同级目录生成一个编译好了的<code>hello.js</code>文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js内容</span></span><br><span class="line"><span class="keyword">var</span> = <span class="string">"poet"</span></span><br></pre></td></tr></table></figure><blockquote><p>那么我们每次都要输<code>tsc hello.ts</code>命令来编译，这样很麻烦，能否让它自动编译？答案是可以的，使用<code>vscode</code>来开发，需要配置一下<code>vscode</code>就可以。</p></blockquote><blockquote><p>首先我们在命令行执行<code>tsc --init</code>来生成配置文件，然后我们在目录下看到生成了一个<code>tsconfig.json</code>文件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-064a181236aedb92.png" alt="image.png"></p><blockquote><p>这个<code>json</code>文件里有很多选项</p></blockquote><ul><li><code>target</code>是选择编译到什么语法</li><li><code>module</code>则是模块类型</li><li><code>outDir</code>则是输出目录，可以指定这个参数到指定目录</li></ul><blockquote><p>更多细节 <a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html</a></p></blockquote><blockquote><p>接下来我们需要开启监控了，在<code>vscode</code>任务栏中</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-da2ea080476546f2.png" alt="image.png"></p><p><strong>Typescript在线编辑器</strong></p><blockquote><p>建议使用在线编辑器练习 <a href="http://www.typescriptlang.org/play/index.html" target="_blank" rel="noopener">http://www.typescriptlang.org/play/index.html</a></p></blockquote><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><blockquote><p><code>js</code>是弱类型语言，强弱类语言有什么区别呢？<code>typescript</code>最大的优点就是类型检查，可以帮你检查你定义的类型和赋值的类型。</p></blockquote><h3 id="2-1-布尔类型boolean"><a href="#2-1-布尔类型boolean" class="headerlink" title="2.1 布尔类型boolean"></a>2.1 布尔类型boolean</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在js中，定义isFlag为true，为布尔类型boolean</span></span><br><span class="line"><span class="keyword">let</span> isFlag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 但是我们也可以重新给它赋值为字符串</span></span><br><span class="line">isFlag = <span class="string">"hello swr"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在ts中，定义isFlag为true，为布尔类型boolean</span></span><br><span class="line"><span class="comment">// 在变量名后加冒号和类型，如  :boolean</span></span><br><span class="line"><span class="keyword">let</span> isFlag:boolean = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 重新赋值到字符串类型会报错</span></span><br><span class="line">isFlag = <span class="string">"hello swr"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在java中，一般是这样定义，要写变量名也要写类型名</span></span><br><span class="line"><span class="comment">// int a = 10; </span></span><br><span class="line"><span class="comment">// string name = "poetries"</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数字类型number"><a href="#2-2-数字类型number" class="headerlink" title="2.2 数字类型number"></a>2.2 数字类型number</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age:number = <span class="number">28</span>;</span><br><span class="line">age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-字符串类型string"><a href="#2-3-字符串类型string" class="headerlink" title="2.3 字符串类型string"></a>2.3 字符串类型string</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name:string = <span class="string">"poetries"</span></span><br><span class="line">name = <span class="string">"iamswr"</span></span><br></pre></td></tr></table></figure><blockquote><p>以上<code>boolean</code>、<code>number</code>、<code>string</code>类型有个共性，就是可以通过<code>typeof</code>来获取到是什么类型，是基本数据类型</p></blockquote><p>那么复杂的数据类型是怎么处理的呢？</p><h3 id="2-4-数组-Array"><a href="#2-4-数组-Array" class="headerlink" title="2.4 数组 Array"></a>2.4 数组 Array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="comment">// 这是一个字符串数组，只能往里面放字符串，写别的类型会报错</span></span><br><span class="line"><span class="keyword">let</span> persion:string[] = [<span class="string">'poetries'</span>, <span class="string">'jing'</span>]</span><br><span class="line"><span class="comment">// 另一个写法 </span></span><br><span class="line"><span class="keyword">let</span> persions:<span class="built_in">Array</span>&lt;string&gt; = [<span class="string">'poetries'</span>, <span class="string">'jing'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组里放对象呢</span></span><br><span class="line"><span class="keyword">let</span> persionObject:<span class="built_in">Array</span>&lt;object&gt; = [&#123;<span class="attr">name</span>:<span class="string">'poetries'</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> persionObjects:object[] = [&#123;<span class="attr">name</span>:<span class="string">'poetries'</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组中放string、number、boolean、object</span></span><br><span class="line"><span class="keyword">let</span> arr:<span class="built_in">Array</span>&lt;number|object|string|boolean&gt; = [<span class="number">22</span>, <span class="string">'test'</span>, <span class="literal">true</span>, &#123;<span class="attr">name</span>:<span class="string">'poetries'</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中放什么都可以</span></span><br><span class="line"><span class="keyword">let</span> arrAny:<span class="built_in">Array</span>&lt;any&gt; = [<span class="string">'test'</span>,<span class="number">12</span>,<span class="literal">false</span>]</span><br></pre></td></tr></table></figure><h3 id="2-5-元组类型tuple"><a href="#2-5-元组类型tuple" class="headerlink" title="2.5 元组类型tuple"></a>2.5 元组类型tuple</h3><ul><li>什么是元组类型？其实元组是数组的一种。</li><li>有点类似解构赋值，但是又不完全是解构赋值，比如元组类型必须一一对应上</li><li>元组类型是一个不可变的数组，长度、类型是不可变的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组类型tuple</span></span><br><span class="line"><span class="comment">// 什么是元组类型？其实元组是数组的一种</span></span><br><span class="line"><span class="keyword">let</span> per :[string,number,object] = [<span class="string">'poetries'</span>,<span class="number">22</span>,&#123;<span class="attr">love</span>: <span class="string">'coding'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-6-枚举类型enum"><a href="#2-6-枚举类型enum" class="headerlink" title="2.6 枚举类型enum"></a>2.6 枚举类型enum</h3><blockquote><p>什么是枚举？枚举有点类似一一列举，一个一个数出来。一般用于值是某几个固定的值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举类型enum</span></span><br><span class="line"></span><br><span class="line">enum sex &#123;</span><br><span class="line">    BOY=<span class="string">'男孩'</span>,</span><br><span class="line">    GIRL=<span class="string">'女孩'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sex)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转化为es5语法</span></span><br><span class="line"><span class="comment">// 我们顺便看看实现的原理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sex;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 首先这里是一个自执行函数</span></span><br><span class="line"><span class="comment">// 并且把sex定义为对象，传参进给自执行函数</span></span><br><span class="line"><span class="comment">// 然后给sex对象添加属性并且赋值</span></span><br><span class="line">    sex[<span class="string">"BOY"</span>] = <span class="string">"\u7537\u5B69"</span>;</span><br><span class="line">    sex[<span class="string">"GIRL"</span>] = <span class="string">"\u5973\u5B69"</span>;</span><br><span class="line">&#125;)(sex || (sex = &#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(sex);</span><br></pre></td></tr></table></figure><blockquote><p>比如我们实际项目中，特别是商城类，订单会存在很多状态流转，那么非常适合用枚举</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum orderStatus &#123;</span><br><span class="line">    WAIT_FOR_PAY = <span class="string">"待支付"</span>,</span><br><span class="line">    UNDELIVERED = <span class="string">"完成支付，待发货"</span>,</span><br><span class="line">    DELIVERED = <span class="string">"已发货"</span>,</span><br><span class="line">    COMPLETED = <span class="string">"已确认收货"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里，我们会有一个疑虑，为什么我们不这样写呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orderStatus2 = &#123;</span><br><span class="line">    WAIT_FOR_PAY : <span class="string">"待支付"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果我们直接写对象的键值对方式，是可以在外部修改这个值的，而我们通过<code>enum</code>则不能修改定义好的值了</p></blockquote><h3 id="2-7-任意类型-any"><a href="#2-7-任意类型-any" class="headerlink" title="2.7 任意类型 any"></a>2.7 任意类型 any</h3><blockquote><p><code>any</code>有好处也有坏处，特别是前端，很多时候写类型的时候，几乎分不清楚类型，任意去写，写起来很爽，但是对于后续的重构、迭代等是非常不友好的，会暴露出很多问题，某种程度来说，<code>any</code>类型就是放弃了类型检查了</p></blockquote><p>比如我们有这样一个场景，就是需要获取某一个dom节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.style.color = <span class="string">"blue"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>此时我们发现在<code>ts</code>中会报错</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f87a912f9aa9eb0a.png" alt="image.png"></p><ul><li>因为我们取这个<code>dom</code>节点，有可能取到，也有可能没取到，当没取到的时候，相当于是<code>null</code>，是没有<code>style</code>这个属性的。</li><li>那么我们可以给它添加一个类型为<code>any</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一个any类型，此时就不会报错了，但是也相当于放弃了类型检查了</span></span><br><span class="line"><span class="keyword">let</span> btn:any = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.style.color = <span class="string">"blue"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以赋值任何类型的值</span></span><br><span class="line"><span class="comment">// 跟以前我们var let声明的一模一样的</span></span><br><span class="line"><span class="keyword">let</span> person:any = <span class="string">"poetries"</span></span><br><span class="line">person = <span class="number">22</span></span><br></pre></td></tr></table></figure><h3 id="2-8-null-undefined类型"><a href="#2-8-null-undefined类型" class="headerlink" title="2.8 null undefined类型"></a>2.8 null undefined类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (string | number | null | undefined) 相当于这几种类型</span></span><br><span class="line"><span class="comment">// 是 string 或 number 或 null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str:(string | number | <span class="literal">null</span> | <span class="literal">undefined</span>)</span><br><span class="line"></span><br><span class="line">str = <span class="string">'poetries'</span></span><br><span class="line">str = <span class="number">28</span></span><br><span class="line">str = <span class="literal">null</span> </span><br><span class="line">str = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-9-void类型"><a href="#2-9-void类型" class="headerlink" title="2.9 void类型"></a>2.9 void类型</h3><blockquote><p><code>void</code>表示没有任何类型，一般是定义函数没有返回值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void 不能再函数里写return</span></span><br><span class="line"><span class="comment">// 怎么理解叫没有返回值呢？此时我们给函数return一个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">name:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello:'</span>, name)</span><br><span class="line">    <span class="comment">// return "ok" 会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">//不会报错</span></span><br><span class="line">&#125;</span><br><span class="line">say(<span class="string">'poetries'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say1</span>(<span class="params">name:string</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-never类型"><a href="#2-10-never类型" class="headerlink" title="2.10 never类型"></a>2.10 never类型</h3><blockquote><p>这个用得很少，一般是用于抛出异常</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message:string</span>):<span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line">error(<span class="string">'errorMsg'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-11-我们要搞明白any、never、void"><a href="#2-11-我们要搞明白any、never、void" class="headerlink" title="2.11 我们要搞明白any、never、void"></a>2.11 我们要搞明白any、never、void</h3><ul><li><code>any</code>是任意的值</li><li><code>void</code>是不能有任何值</li><li><code>never</code>永远不会有返回值</li></ul><blockquote><p><code>any</code>比较好理解，就是任何值都可以</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:any = <span class="string">"hello poetries"</span></span><br><span class="line">str = <span class="number">28</span></span><br><span class="line">str = <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p><code>void</code>不能有任何值(返回值)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>never</code>则不好理解，什么叫永远不会有返回值？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除了上面举例的抛出异常以外，我们看一下这个例子</span></span><br><span class="line"><span class="comment">// 这个loop函数，一旦开始执行，就永远不会结束</span></span><br><span class="line"><span class="comment">// 可以看出在while中，是死循环，永远都不会有返回值，包括undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>):<span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"陷入死循环啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包括比如JSON.parse也是使用这种 never | any</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str:string</span>):(<span class="params">never | any</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首先在正常情况下，我们传一个JSON格式的字符串，是可以正常得到一个JSON对象的</span></span><br><span class="line"><span class="keyword">let</span> json = parse(<span class="string">'&#123;"name":"poetries"&#125;'</span>)</span><br><span class="line"><span class="comment">// 但是有时候，传进去的不一定是JSON格式的字符串，那么就会抛出异常</span></span><br><span class="line"><span class="comment">// 此时就需要never了</span></span><br><span class="line"><span class="keyword">let</span> json = parse(<span class="string">"iamswr"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>也就是说，当一个函数执行的时候，被抛出异常打断了，导致没有返回值或者该函数是一个死循环，永远没有返回值，这样叫做永远不会有返回值。</p></blockquote><p>实际开发中，是<code>never</code>和联合类型来一起用，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>):(<span class="params">never | string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><h3 id="3-1-函数定义"><a href="#3-1-函数定义" class="headerlink" title="3.1 函数定义"></a>3.1 函数定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name:string</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-函数参数处理"><a href="#3-2-函数参数处理" class="headerlink" title="3.2 函数参数处理"></a>3.2 函数参数处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数是这样定义的</span></span><br><span class="line"><span class="comment">// 形参和实参一一对应，完全一样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name:string,age:number</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line">sayHello(<span class="string">'poetries'</span>,<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参和实参要完全一样，如想不一样，则需要配置可选参数，可选参数放在后面</span></span><br><span class="line"><span class="comment">// 可选参数，用 ？ 处理，只能放在后面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHelloToYou</span>(<span class="params">name:string,age?:number</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line">sayHelloToYou(<span class="string">'poetries'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么如何设置默认参数呢？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url:string,method:string = <span class="string">'GET'</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(url, method)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么如何设置剩余参数呢？可以利用扩展运算符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args:Array&lt;number&gt;</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(args.join(<span class="string">"+"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total:number = sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(total)</span><br></pre></td></tr></table></figure><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 那么如何实现函数重载呢？函数重载是java中非常有名的，在java中函数的重载，是指两个或者两个以上的同名函数，参数的个数和类型不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如我们现在有两个同名函数</span></span><br><span class="line"><span class="comment">// function eating(name:string) &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// function eating(name:string,age:number) &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 那么我想达到一个效果</span></span><br><span class="line"><span class="comment">// 当我传参数name时，执行name:string这个函数</span></span><br><span class="line"><span class="comment">// 当我传参数name和age时，执行name:string,age:number这个函数</span></span><br><span class="line"><span class="comment">// 此时该怎么办？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来看一下typescript中的函数重载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先声明两个函数名一样的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eating</span>(<span class="params">name: string</span>):<span class="title">void</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">eating</span>(<span class="params">name: number</span>):<span class="title">void</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">eating</span>(<span class="params">name:any</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eating(<span class="string">"hello poetries"</span>)</span><br><span class="line">eating(<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在typescript中主要体现是同一个同名函数提供多个函数类型定义，函数实际上就只有一个，就是拥有函数体那个，如果想根据传入值类型的不一样执行不同逻辑，则需要在这个函数里面进行一个类型判断。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么这个函数重载有什么作用呢？其实在ts中，函数重载只是用来限制参数的个数和类型，用来检查类型的，而且重载不能拆开几个函数，这一点和java的处理是不一样的，需要注意。</span></span><br></pre></td></tr></table></figure><h2 id="四、类"><a href="#四、类" class="headerlink" title="四、类"></a>四、类</h2><h3 id="4-1-定义一个类"><a href="#4-1-定义一个类" class="headerlink" title="4.1 定义一个类"></a>4.1 定义一个类</h3><blockquote><p>如何定义一个类？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts 写法</span></span><br><span class="line"><span class="comment">// 跟es6非常像 没有太大区别</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里声明的变量 是实例上的属性</span></span><br><span class="line">    name: string;</span><br><span class="line">    age:number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: string, age: number)&#123;</span><br><span class="line">        <span class="comment">// this.name和this.age 必须先在前面声明好类型</span></span><br><span class="line">        <span class="comment">// name: string</span></span><br><span class="line">        <span class="comment">// age: number</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    say():string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello poetries'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Persion(<span class="string">'poetries'</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 那么转为es5呢？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Persion = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this.name和this.age 必须先在前面声明好类型</span></span><br><span class="line">        <span class="comment">// name: string</span></span><br><span class="line">        <span class="comment">// age: number</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    Persion.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello poetries'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Persion;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Persion(<span class="string">'poetries'</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-类的继承"><a href="#4-2-类的继承" class="headerlink" title="4.2 类的继承"></a>4.2 类的继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 和es6也是差不多</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string, age: number)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    say():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello poetries'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    childName: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string,age:number,childName:string) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.childName = childName</span><br><span class="line">    &#125;</span><br><span class="line">    childSay():string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.childName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'poetries'</span>, <span class="number">22</span>, <span class="string">'静观流叶'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child)</span><br></pre></td></tr></table></figure><h3 id="4-3-类的修饰符"><a href="#4-3-类的修饰符" class="headerlink" title="4.3 类的修饰符"></a>4.3 类的修饰符</h3><ul><li><code>public</code>公开的，可以供自己、子类以及其它类访问</li><li><code>protected</code>受保护的，可以供自己、子类访问，但是其他就访问不了</li><li><code>private</code>私有的，只有自己访问，而子类、其他都访问不了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;</span><br><span class="line">    public name:string;</span><br><span class="line">    protected age:number;</span><br><span class="line">    private money:number;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 简写</span></span><br><span class="line">   <span class="comment">// constructor(public name:string,protected age:number,private money:number)</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(name: string, age:number,money:number) &#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.age = age;</span><br><span class="line">       <span class="keyword">this</span>.money = money;</span><br><span class="line">   &#125;</span><br><span class="line">   getName():string &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">   &#125;</span><br><span class="line">   getAge():number&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">   &#125;</span><br><span class="line">   getMoney():number&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.money</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pare = <span class="keyword">new</span> Parents(<span class="string">'poetries'</span>, <span class="number">22</span>, <span class="number">3000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(pare.name)</span><br><span class="line"><span class="comment">// console.log(pare.age)  报错</span></span><br><span class="line"><span class="comment">// console.log(pare.money) 报错</span></span><br></pre></td></tr></table></figure><h3 id="4-4-静态属性、静态方法"><a href="#4-4-静态属性、静态方法" class="headerlink" title="4.4 静态属性、静态方法"></a>4.4 静态属性、静态方法</h3><p>跟<code>es6</code>差不多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类的静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name1 = <span class="string">'poetries'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的静态方法</span></span><br><span class="line">    <span class="keyword">static</span> say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello poetries'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per2 = <span class="keyword">new</span> Person2()</span><br><span class="line">Person2.say() <span class="comment">// hello poetries</span></span><br><span class="line"><span class="comment">// per2.say() 报错</span></span><br></pre></td></tr></table></figure><h3 id="4-5-抽象类"><a href="#4-5-抽象类" class="headerlink" title="4.5 抽象类"></a>4.5 抽象类</h3><ul><li>抽象类和方法，有点类似抽取共性出来，但是又不是具体化，比如说，世界上的动物都需要吃东西，那么会把吃东西这个行为，抽象出来</li><li>如果子类继承的是一个抽象类，子类必须实现父类里的抽象方法，不然的话不能实例化，会报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/ 关键字 abstract抽象</span><br><span class="line"><span class="comment">// 定义抽象类</span></span><br><span class="line"></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实际上是使用了public修饰符</span></span><br><span class="line">    <span class="comment">// 如果添加private修饰符会报错</span></span><br><span class="line">    abstract eat():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是这个Animal是不能实例化的</span></span><br><span class="line"><span class="comment">// let animal = new Animal() // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 抽象类的抽象方法，意思就是，需要在继承这个抽象类的子类中</span></span><br><span class="line"><span class="comment">// 实现这个抽象方法，不然会报错</span></span><br><span class="line"><span class="comment">// 报错，因为在子类中没有实现eat抽象方法</span></span><br><span class="line"><span class="comment">// class Person4 extends Animal&#123;</span></span><br><span class="line"><span class="comment">//     test()&#123;</span></span><br><span class="line"><span class="comment">//         console.log("吃米饭")</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog类继承Animal类后并且实现了抽象方法eat，所以不会报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"吃骨头"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、接口"><a href="#五、接口" class="headerlink" title="五、接口"></a>五、接口</h2><blockquote><p>这里的接口，主要是一种规范，规范某些类必须遵守规范，和抽象类有点类似，但是不局限于类，还有属性、函数等</p></blockquote><h3 id="5-1-接口规范对象"><a href="#5-1-接口规范对象" class="headerlink" title="5.1 接口规范对象"></a>5.1 接口规范对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//假设我们需要获取用户信息</span></span><br><span class="line"><span class="comment">// 我们通过这样的方式 规范必须传name和age的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">user:&#123;name:string,age:number&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.name,user.age)</span><br><span class="line">&#125;</span><br><span class="line">getUserInfo(&#123;<span class="attr">name</span>: <span class="string">'poetries'</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样看挺完美的， 那么问题就出现了，如果我另外还有一个方法，也是需要这个规范呢？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo1</span>(<span class="params">user:&#123;name:string,age:number&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.name&#125;</span> <span class="subst">$&#123;user.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">user:&#123;name:string,age:number&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.name&#125;</span> <span class="subst">$&#123;user.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">getUserInfo1(&#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br><span class="line">getInfo(&#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看出，函数getUserInfo和getInfo都遵循同一个规范，那么我们有办法对这个规范复用吗？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先把需要复用的规范，写到接口 关键字interface</span></span><br><span class="line">interface infoInterface &#123;</span><br><span class="line">    name: string,</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后把这个接口 替换到我们需要复用的地方</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo2</span>(<span class="params">user:infoInterface</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.name,user.age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo2</span>(<span class="params">user:infoInterface</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.name,user.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInfo2(&#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br><span class="line">getInfo2(&#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么有些参数可传可不传，该怎么处理呢？</span></span><br><span class="line"></span><br><span class="line">interface infoInterface2&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">    city?:string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo3</span>(<span class="params">user:infoInterface2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.name&#125;</span> <span class="subst">$&#123;user.age&#125;</span> <span class="subst">$&#123;user.city&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo3</span>(<span class="params">user:infoInterface</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.name&#125;</span> <span class="subst">$&#123;user.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">getUserInfo3(&#123;<span class="attr">name</span>:<span class="string">"poetries"</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">city</span>:<span class="string">"深圳"</span>&#125;)</span><br><span class="line">getInfo3(&#123;<span class="attr">name</span>:<span class="string">"iamswr"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-2-接口规范函数"><a href="#5-2-接口规范函数" class="headerlink" title="5.2 接口规范函数"></a>5.2 接口规范函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对一个函数的参数和返回值进行规范</span></span><br><span class="line">interface mytotal &#123;</span><br><span class="line">    <span class="comment">// 左侧是函数的参数，右侧是函数的返回类型</span></span><br><span class="line">    (a:number,<span class="attr">b</span>:number):number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalSum:mytotal = <span class="function"><span class="keyword">function</span>(<span class="params">a:number,b:number</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalSum(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="5-3-接口规范数组"><a href="#5-3-接口规范数组" class="headerlink" title="5.3 接口规范数组"></a>5.3 接口规范数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface userInterface &#123;</span><br><span class="line">    <span class="comment">// index为数组索引 类型是number</span></span><br><span class="line">    <span class="comment">// 右边是数组里为字符串的数组成员</span></span><br><span class="line">    [index: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arrTest: userInterface = [<span class="string">'poetries'</span>, <span class="string">'静观流叶'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrTest)</span><br></pre></td></tr></table></figure><h3 id="5-4-接口规范类"><a href="#5-4-接口规范类" class="headerlink" title="5.4 接口规范类"></a>5.4 接口规范类</h3><blockquote><p>这个比较重要，因为写<code>react</code>的时候会经常使用到类</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先实现一个接口</span></span><br><span class="line">interface Animal2 &#123;</span><br><span class="line">    <span class="comment">// 这个类必须有name</span></span><br><span class="line">    name:string;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个类必须有eat方法</span></span><br><span class="line">    eat(any:string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字implements实现</span></span><br><span class="line"><span class="comment">// 因为接口是抽象的，需要通过子类是实现它</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person6</span> <span class="title">implements</span> <span class="title">Animal2</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(any:string):<span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`吃`</span>+any)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想遵循多个接口</span></span><br><span class="line"></span><br><span class="line">interface Animal3 &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    eat(any: string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增一个接口</span></span><br><span class="line">interface Animal4 &#123;</span><br><span class="line">    sleep():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以在implements后面通过逗号添加和java一样</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person7</span> <span class="title">implements</span> <span class="title">Animal3</span>,<span class="title">Animal4</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(any:string) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`吃`</span>+any)</span><br><span class="line">    &#125;</span><br><span class="line">    sleep() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-接口继承接口"><a href="#5-5-接口继承接口" class="headerlink" title="5.5 接口继承接口"></a>5.5 接口继承接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Animal5&#123;</span><br><span class="line">    name:string;</span><br><span class="line">    eat(any:string):<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 像类一样 通过extends继承</span></span><br><span class="line">interface Animal6 extends Animal5 &#123;</span><br><span class="line">    sleep():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为Animal6类继承了Animal5</span></span><br><span class="line"><span class="comment">// 所以这里遵循Animal6就相当于把Animal5也继承了</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person8</span> <span class="title">implements</span> <span class="title">Animal2</span> </span>&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(any:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`吃<span class="subst">$&#123;any&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    sleep()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h2><h3 id="6-1-函数的泛型"><a href="#6-1-函数的泛型" class="headerlink" title="6.1 函数的泛型"></a>6.1 函数的泛型</h3><blockquote><p>泛型可以支持不特定的数据类型，什么叫不特定呢？比如我们有一个方法，里面接收参数，但是参数类型我们是不知道，但是这个类型在方法里面很多地方会用到，参数和返回值要保持一致性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们有一个需求，我们不知道函数接收什么类型的参数，也不知道返回值的类型</span></span><br><span class="line"><span class="comment">// 而我们又需要传进去的参数类型和返回值的类型保持一致，那么我们就需要用到泛型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;T&gt;的意思是泛型，即generic type</span></span><br><span class="line"><span class="comment">// 可以看出value的类型也为T，返回值的类型也为T</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deal</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面的&lt;string&gt;、&lt;number&gt;实际上用的时候再传给上面的&lt;T&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(deal&lt;string&gt;(<span class="string">"poetries"</span>))</span><br><span class="line"><span class="built_in">console</span>.log(deal&lt;number&gt;(<span class="number">22</span>))</span><br></pre></td></tr></table></figure><blockquote><p>实际上，泛型用得还是比较少，主要是看类的泛型是如何使用的</p></blockquote><h3 id="6-2-类的泛型"><a href="#6-2-类的泛型" class="headerlink" title="6.2 类的泛型"></a>6.2 类的泛型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个私有属性</span></span><br><span class="line"></span><br><span class="line">    private arr: T[] = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 规定传参类型</span></span><br><span class="line">    add(value: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里规定了类型为number</span></span><br><span class="line"><span class="comment">// 相当于把T替换为number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mymath = <span class="keyword">new</span> MyMath&lt;number&gt;()</span><br><span class="line">mymath.add(<span class="number">1</span>)</span><br><span class="line">mymath.add(<span class="number">2</span>)</span><br><span class="line">mymath.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>有了接口为什么还需要抽象类？</strong></p><blockquote><p>接口里面只能放定义，抽象类里面可以放普通类、普通类的方法、定义抽象的东西。</p></blockquote><h1 id="第二部分-结合React实践"><a href="#第二部分-结合React实践" class="headerlink" title="第二部分 结合React实践"></a>第二部分 结合React实践</h1><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><h3 id="1-1-初始化项目"><a href="#1-1-初始化项目" class="headerlink" title="1.1 初始化项目"></a>1.1 初始化项目</h3><ul><li>生成一个目录<code>ts_react_demo</code>，输入<code>npm init -y</code>初始化项目</li><li>然后在项目里我们需要一个<code>.gitignore</code>来忽略指定目录不传到<code>git</code>上</li><li>进入<code>.gitignore</code>输入我们需要忽略的目录，一般是<code>node_modules</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// .gitignore</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><h3 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2 安装依赖"></a>1.2 安装依赖</h3><blockquote><p>接下来我们准备下载相应的依赖包，这里需要了解一个概念，就是类型定义文件</p></blockquote><h4 id="1-2-1-类型定义文件"><a href="#1-2-1-类型定义文件" class="headerlink" title="1.2.1 类型定义文件"></a>1.2.1 类型定义文件</h4><blockquote><p>因为目前主流的第三方库都是以<code>javascript</code>编写的，如果用<code>typescript</code>开发，会导致在编译的时候会出现很多找不到类型的提示，那么如果让这些库也能在<code>ts</code>中使用呢？</p></blockquote><ul><li>类型定义文件(<code>*.d.ts</code>)就是能够让编辑器或者插件来检测到第三方库中<code>js</code>的静态类型，这个文件是以<code>.d.ts</code>结尾- 比如说<code>react</code>的类型定义文件：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react" target="_blank" rel="noopener">https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react</a></li><li>在<code>typescript2.0</code>中，是使用<code>@type</code>来进行类型定义，当我们使用<code>@type</code>进行类型定义，<code>typescript</code>会默认查看<code>./node_modules/@types</code>文件夹，可以通过这样来安装这个库的定义库<code>npm install @types/react --save</code></li></ul><h4 id="1-2-2-相关依赖包"><a href="#1-2-2-相关依赖包" class="headerlink" title="1.2.2 相关依赖包"></a>1.2.2 相关依赖包</h4><p><strong>React相关</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- react // react的核心文件</span><br><span class="line">- @types/react // 声明文件</span><br><span class="line">- react-dom // react dom的操作包</span><br><span class="line">- @types/react-dom </span><br><span class="line">- react-router-dom // react路由包</span><br><span class="line">- @types/react-router-dom</span><br><span class="line">- react-redux</span><br><span class="line">- @types/react-redux</span><br><span class="line">- redux-thunk  // 中间件</span><br><span class="line">- @types/redux-logger</span><br><span class="line">- redux-logger // 中间件</span><br><span class="line">- connected-react-router</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 执行安装依赖包</span></span><br><span class="line"></span><br><span class="line">npm i react react-dom @types/react @types/react-dom react-router-dom @types/react-router-dom react-redux @types/react-redux redux-thunk redux-logger @types/redux-logger connected-react-router -S</span><br></pre></td></tr></table></figure><p><strong>webpack相关</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- webpack // webpack的核心包</span><br><span class="line">- webpack-cli // webapck的工具包</span><br><span class="line">- webpack-dev-server // webpack的开发服务</span><br><span class="line">- html-webpack-plugin // webpack的插件，可以生成index.html文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli webpack-dev-server html-webpack-plugin -D</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>-D</code>相当于<code>--save-dev</code>的缩写，下载开发环境的依赖包</p></blockquote><p><strong>typescript相关</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- typescript // ts的核心包</span><br><span class="line">- ts-loader // 把ts编译成指定语法比如es5 es6等的工具，有了它，基本不需要babel了，因为它会把我们的代码编译成es5</span><br><span class="line">- source-map-loader // 用于开发环境中调试ts代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript ts-loader source-map-loader -D</span><br></pre></td></tr></table></figure><ul><li>从上面可以看出，基本都是模块和声明文件都是一对对出现的，有一些不是一对对出现，就是因为都集成到一起去了</li><li>声明文件可以在<code>node_modules/@types/xx/xx</code>中找到</li></ul><h3 id="1-3-Typescript-config配置"><a href="#1-3-Typescript-config配置" class="headerlink" title="1.3 Typescript config配置"></a>1.3 Typescript config配置</h3><blockquote><p>首先我们要生成一个<code>tsconfig.json</code>来告诉<code>ts-loader</code>怎样去编译这个<code>ts</code>代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><blockquote><p>会在项目中生成了一个<code>tsconfig.json</code>文件，接下来进入这个文件，来修改相关配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 编译选项</span></span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>, <span class="comment">// 编译成es5语法</span></span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>, <span class="comment">// 模块的类型</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./dist"</span>, <span class="comment">// 编译后的文件目录</span></span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>, <span class="comment">// 生成sourceMap方便我们在开发过程中调试</span></span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>, <span class="comment">// 每个变量都要标明类型</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"react"</span>, <span class="comment">// jsx的版本,使用这个就不需要额外使用babel了，会编译成React.createElement</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 为了加快整个编译过程，我们指定相应的路径</span></span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-webpack配置"><a href="#1-4-webpack配置" class="headerlink" title="1.4 webpack配置"></a>1.4 webpack配置</h3><blockquote><p>在<code>./src/</code>下创建一个<code>index.html</code>文件，并且添加<code>&lt;div id=&#39;app&#39;&gt;&lt;/div&gt;</code>标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>./</code>下创建一个<code>webpack</code>配置文件<code>webpack.config.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./webpack.config.js</span></span><br><span class="line"><span class="comment">// 引入webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="comment">// 引入webpack插件 生成index.html文件</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把模块导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 以前是jsx，因为我们用typescript写，所以这里后缀是tsx</span></span><br><span class="line">  entry:<span class="string">"./src/index.tsx"</span>,</span><br><span class="line">  <span class="comment">// 指定模式为开发模式</span></span><br><span class="line">  mode:<span class="string">"development"</span>,</span><br><span class="line">  <span class="comment">// 输出配置</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    <span class="comment">// 输出目录为当前目录下的dist目录</span></span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    filename:<span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 为了方便调试，还要配置一下调试工具</span></span><br><span class="line">  devtool:<span class="string">"source-map"</span>,</span><br><span class="line">  <span class="comment">// 解析路径，查找模块的时候使用</span></span><br><span class="line">  resolve:&#123;</span><br><span class="line">    <span class="comment">// 一般写模块不会写后缀，在这里配置好相应的后缀，那么当我们不写后缀时，会按照这个后缀优先查找</span></span><br><span class="line">    extensions:[<span class="string">".ts"</span>,<span class="string">'.tsx'</span>,<span class="string">'.js'</span>,<span class="string">'.json'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解析处理模块的转化</span></span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    <span class="comment">// 遵循的规则</span></span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 如果这个模块是.ts或者.tsx，则会使用ts-loader把代码转成es5</span></span><br><span class="line">        test:<span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        loader:<span class="string">"ts-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 使用sourcemap调试</span></span><br><span class="line">        <span class="comment">// enforce:pre表示这个loader要在别的loader执行前执行</span></span><br><span class="line">        enforce:<span class="string">"pre"</span>,</span><br><span class="line">        test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader:<span class="string">"source-map-loader"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件的配置</span></span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="comment">// 这个插件是生成index.html</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 以哪个文件为模板，模板路径</span></span><br><span class="line">      template:<span class="string">"./src/index.html"</span>,</span><br><span class="line">      <span class="comment">// 编译后的文件名</span></span><br><span class="line">      filename:<span class="string">"index.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 开发环境服务配置</span></span><br><span class="line">  devServer:&#123;</span><br><span class="line">    <span class="comment">// 启动热更新,当模块、组件有变化，不会刷新整个页面，而是局部刷新</span></span><br><span class="line">    <span class="comment">// 需要和插件webpack.HotModuleReplacementPlugin配合使用</span></span><br><span class="line">    hot:<span class="literal">true</span>, </span><br><span class="line">    <span class="comment">// 静态资源目录</span></span><br><span class="line">    contentBase:path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么我们怎么运行这个<code>webpack.config.js</code>呢？这就需要我们在<code>package.json</code>配置一下脚本</p></blockquote><ul><li>在<code>package.json</code>里的<code>script</code>，添加<code>build</code>和<code>dev</code>的配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ts_react_demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>:<span class="string">"webpack-dev-server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.7.13"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.0.11"</span>,</span><br><span class="line">    <span class="attr">"@types/react-redux"</span>: <span class="string">"^6.0.10"</span>,</span><br><span class="line">    <span class="attr">"@types/react-router-dom"</span>: <span class="string">"^4.3.1"</span>,</span><br><span class="line">    <span class="attr">"connected-react-router"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.6.3"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.6.3"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">    <span class="attr">"react-router-dom"</span>: <span class="string">"^4.3.1"</span>,</span><br><span class="line">    <span class="attr">"redux-logger"</span>: <span class="string">"^3.0.6"</span>,</span><br><span class="line">    <span class="attr">"redux-thunk"</span>: <span class="string">"^2.3.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"source-map-loader"</span>: <span class="string">"^0.2.4"</span>,</span><br><span class="line">    <span class="attr">"ts-loader"</span>: <span class="string">"^5.3.1"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.27.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.1.2"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.1.10"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为入口文件是<code>index.tsx</code>，那么我们在<code>./src/</code>下创建一个<code>index.tsx</code>，并且在里面写入一段代码，看看<code>webpack</code>是否能够正常编译</li><li>因为我们在<code>webpack.config.js</code>中<code>entry</code>设置的入口文件是<code>index.tsx</code>，并且在<code>module</code>中的<code>rules</code>会识别到<code>.tsx</code>格式的文件，然后执行相应的<code>ts-loader</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ./src/index.tsx</span><br><span class="line">console.log(&quot;hello poetries&quot;)</span><br></pre></td></tr></table></figure><ul><li>接下来我们<code>npm run build</code>一下，看看能不能正常编译</li><li>编译成功，我们可以看看<code>./dist/</code>下生成了<code>index.html index.js index.js.map</code>三个文件</li><li>那么我们在开发过程中，不会每次都<code>npm run build</code>来看修改的结果，那么我们平时开发过程中可以使用<code>npm run dev</code>。这样就启动成功了一个<code>http://localhost:8080/</code>的服务了。</li><li>接下来我们看看热更新是否配置正常，在<code>./src/index.tsx</code>中新增一个<code>console.log(&#39;hello poetries&#39;)</code>，我们发现浏览器的控制台会自动打印出这一个输出，说明配置正常了</li></ul><h2 id="二、React组件"><a href="#二、React组件" class="headerlink" title="二、React组件"></a>二、React组件</h2><h3 id="2-1-写一个计数器组件"><a href="#2-1-写一个计数器组件" class="headerlink" title="2.1 写一个计数器组件"></a>2.1 写一个计数器组件</h3><blockquote><p>首先我们在<code>./src/</code>下创建一个文件夹<code>components</code>，然后在<code>./src/components/</code>下创建文件<code>Counter.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/components/Counter.tsx</span></span><br><span class="line"><span class="comment">// import React from "react"; // 之前的写法</span></span><br><span class="line"><span class="comment">// 在ts中引入的写法</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="comment">// 状态state</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    number:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="keyword">this</span>.state.number&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;()=&gt;this.setState(&#123;number:this.state.number + 1&#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们发现，其实除了引入<code>import * as React from &quot;react&quot;</code>以外，其余的和之前的写法没什么不同。</p></blockquote><ul><li>接下来我们到<code>./src/index.tsx</code>中把这个组件导进来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDom <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> CounterComponent <span class="keyword">from</span> <span class="string">"./components/Counter"</span>;</span><br><span class="line"><span class="comment">// 把我们的CounterComponent组件渲染到id为app的标签内</span></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">CounterComponent</span> /&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><blockquote><p>这样我们就把这个组件引进来了，接下来我们看下是否能够成功跑起来</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-86ad083c5149a72e.png" alt="image.png"></p><blockquote><p>到目前为止，感觉用<code>ts</code>写<code>react</code>还是跟以前差不多，没什么区别，要记住，<code>ts</code>最大的特点就是类型检查，可以检验属性的状态类型</p></blockquote><p>假设我们需要在<code>./src/index.tsx</code>中给<code>&lt;CounterComponent /&gt;</code>传一个属性<code>name</code>，而<code>CounterComponent</code>组件需要对这个传入的<code>name</code>进行类型校验，比如说只允许传字符串</p><ul><li><code>./src/index.tsx</code>中修改一下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDom.render(&lt;CounterComponent name=&quot;poetries&quot; /&gt;,document.getElementById(&quot;app&quot;))</span><br></pre></td></tr></table></figure><blockquote><p>然后需要在<code>./src/components/Counter.tsx</code>中写一个接口来对这个<code>name</code>进行类型校验</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import React from "react"; // 之前的写法</span></span><br><span class="line"><span class="comment">// 在ts中引入的写法</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个接口对name进行类型校验</span></span><br><span class="line"><span class="comment">// 如果我们不写校验的话，在外部传name进来会报错的</span></span><br><span class="line">interface IProps&#123;</span><br><span class="line">    name:string,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们还可以用接口约束state的状态</span></span><br><span class="line">interface IState&#123;</span><br><span class="line">    number: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把接口约束的规则写在这里</span></span><br><span class="line"><span class="comment">// 如果传入的name不符合类型会报错</span></span><br><span class="line"><span class="comment">// 如果state的number属性不符合类型也会报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>,<span class="title">IState</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 状态state</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    number:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="keyword">this</span>.state.number&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;this.props.name&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;button onClick=&#123;()=&gt;<span class="keyword">this</span>.setState(&#123;<span class="attr">number</span>:<span class="keyword">this</span>.state.number + <span class="number">1</span>&#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-结合Redux使用"><a href="#2-2-结合Redux使用" class="headerlink" title="2.2 结合Redux使用"></a>2.2 结合Redux使用</h3><h4 id="2-2-1-基础使用"><a href="#2-2-1-基础使用" class="headerlink" title="2.2.1 基础使用"></a>2.2.1 基础使用</h4><ul><li>上面<code>state</code>中的<code>number</code>就不放在组件里了，我们放到<code>redux</code>中，接下来我们使用<code>redux</code></li><li>首先在<code>./src/</code>创建<code>store</code>目录，然后在<code>./src/store/</code>创建一个文件<code>index.tsx</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .src/store/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入reducers</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着创建仓库</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ul><li>然后我们需要创建一个<code>reducers</code>，在<code>./src/store/</code>创建一个目录<code>reducers</code>，该目录下再创建一个文件<code>index.tsx</code>。</li><li>但是我们还需要对<code>reducers</code>中的函数参数进行类型校验，而且这个类型校验很多地方需要复用，那么我们需要把这个类型校验单独抽离出一个文件。</li><li>那么我们需要在<code>./src/</code>下创建一个<code>types</code>目录，该目录下创建一个文件<code>index.tsx</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/types/index.tsx</span></span><br><span class="line"><span class="comment">// 导出一个接口</span></span><br><span class="line"><span class="keyword">export</span> interface Store&#123;</span><br><span class="line">  <span class="comment">// 我们需要约束的属性和类型</span></span><br><span class="line">  number:number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>回到<code>./src/store/reducers/index.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入类型校验的接口</span></span><br><span class="line"><span class="comment">// 用来约束state的</span></span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">"../../types/index"</span></span><br><span class="line"><span class="comment">// 我们需要给number赋予默认值</span></span><br><span class="line"><span class="keyword">let</span> initState:Store = &#123; <span class="attr">number</span>:<span class="number">0</span> &#125;</span><br><span class="line"><span class="comment">// 把接口写在state:Store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">state:Store=initState,action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到老的状态state和新的状态action</span></span><br><span class="line">  <span class="comment">// action是一个动作行为，而这个动作行为，在计数器中是具备 加 或 减 两个功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面这段代码暂时先这样，因为需要用到<code>action</code>，我们现在去配置一下<code>action</code>相关的，首先我们在<code>./src/store</code>下创建一个<code>actions</code>目录，并且在该目录下创建文件<code>counter.tsx</code></li><li>因为配置<code>./src/store/actions/counter.tsx</code>会用到动作类型，而这个动作类型是属于常量，为了更加规范我们的代码，我们在<code>./src/store/</code>下创建一个<code>action-types.tsx</code>，里面写相应常量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/action-types.tsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD = <span class="string">"ADD"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SUBTRACT = <span class="string">"SUBTRACT"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>回到<code>./src/store/actions/counter.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/actions/counter.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">"../action-types"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  add()&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.ADD&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  subtract()&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.SUBTRACT&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以想一下，上面<code>return { type:types.ADD }</code>实际上是返回一个<code>action</code>对象，将来使用的时候，是会传到<code>./src/store/reducers/index.tsx</code>的<code>action</code>中，那么我们怎么定义这个<code>action</code>的结构呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/actions/counter.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">"../action-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，分别约束add和subtract的type类型</span></span><br><span class="line"><span class="keyword">export</span> interface Add&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.ADD</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> interface Subtract&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.SUBTRACT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再导出一个type</span></span><br><span class="line"><span class="comment">// type是用来给类型起别名的</span></span><br><span class="line"><span class="comment">// 这个actions里是一个对象，会有很多函数，每个函数都会返回一个action</span></span><br><span class="line"><span class="comment">// 而 ./store/reducers/index.tsx中的action会是下面某一个函数的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Action = Add | Subtract</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上面定义好的接口作用于下面</span></span><br><span class="line"><span class="comment">// 约束返回值的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  add():Add&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.ADD&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  subtract():Subtract&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.SUBTRACT&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接着我们回到<code>./store/reducers/index.tsx</code></p></blockquote><p>经过上面一系列的配置，我们可以给<code>action</code>使用相应的接口约束了并且根据不同的<code>action</code>动作行为来进行不同的处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/reducers/index.tsx</span></span><br><span class="line"><span class="comment">// 导入类型校验的接口</span></span><br><span class="line"><span class="comment">// 用来约束state的</span></span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">"../../types/index"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入约束action的接口</span></span><br><span class="line"><span class="keyword">import</span> &#123; Action &#125; <span class="keyword">from</span> <span class="string">"../actions/counter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入action动作行为的常量</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">"../action-types"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需要给number赋予默认值</span></span><br><span class="line"><span class="keyword">let</span> initState:Store = &#123; <span class="attr">number</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把接口写在state:Store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">state:Store=initState,action:Action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到老的状态state和新的状态action</span></span><br><span class="line">  <span class="comment">// action是一个动作行为，而这个动作行为，在计数器中是具备 加 或 减 两个功能</span></span><br><span class="line">  <span class="comment">// 判断action的行为类型</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> types.ADD:</span><br><span class="line">        <span class="comment">// 当action动作行为是ADD的时候，给number加1</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">number</span>:state.number + <span class="number">1</span> &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> types.SUBTRACT:</span><br><span class="line">        <span class="comment">// 当action动作行为是SUBTRACT的时候，给number减1</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">number</span>:state.number - <span class="number">1</span> &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 当没有匹配到则返回原本的state</span></span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接下来，我们怎么样把组件和仓库建立起关系呢</p></blockquote><p>首先进入<code>./src/index.tsx</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDom <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux这个库的Provider组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入仓库</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CounterComponent <span class="keyword">from</span> <span class="string">"./components/Counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用Provider包裹CounterComponent组件</span></span><br><span class="line"><span class="comment">// 并且把store传给Provider</span></span><br><span class="line"><span class="comment">// 这样Provider可以向它的子组件提供store</span></span><br><span class="line">ReactDom.render((</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;CounterComponent name=<span class="string">"poetries"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">),document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><blockquote><p>我们到组件内部建立连接，<code>./src/components/Counter.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import React from "react"; // 之前的写法</span></span><br><span class="line"><span class="comment">// 在ts中引入的写法</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入connect，让组件和仓库建立连接</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入actions，用于传给connect</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">"../store/actions/counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入接口约束</span></span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">"../types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口约束</span></span><br><span class="line">interface IProps&#123;</span><br><span class="line">  number:number,</span><br><span class="line"></span><br><span class="line">  name:string, <span class="comment">//如果我们不写校验的话，在外部传name进来会报错的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// add是一个函数</span></span><br><span class="line">  add:any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subtract是一个函数</span></span><br><span class="line">  subtract:any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们还可以用接口约束state的状态</span></span><br><span class="line">interface IState&#123;</span><br><span class="line">    number: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把接口约束的规则写在这里</span></span><br><span class="line"><span class="comment">// 如果传入的name不符合类型会报错</span></span><br><span class="line"><span class="comment">// 如果state的number属性不符合类型也会报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IProps</span>,<span class="title">IState</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 状态state</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    number:<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="comment">// 利用解构赋值取出</span></span><br><span class="line">    <span class="comment">// 这里比如和IProps保持一致，不对应则会报错，因为接口约束了必须这样</span></span><br><span class="line">    <span class="keyword">let</span> &#123; number,add,subtract &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;add&#125;&gt;+&lt;/</span>button&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;subtract&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个connect需要执行两次，第二次需要我们把这个组件CounterComponent传进去</span></span><br><span class="line"><span class="comment">// connect第一次执行，需要两个参数，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要传给connect的函数</span></span><br><span class="line"><span class="keyword">let</span> mapStateToProps = <span class="function"><span class="keyword">function</span> (<span class="params">state:Store</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    actions</span><br><span class="line">)(CounterComponent);</span><br></pre></td></tr></table></figure><p>这时候看到成功执行了</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-32fc82d43dadb063.png" alt="image.png"></p><ul><li>其实搞来搞去，跟原来的写法差不多，主要就是<code>ts</code>会进行类型检查。</li><li>如果对<code>number</code>进行异步修改，该怎么处理？这就需要我们用到<code>redux-thunk</code></li></ul><blockquote><p>接着我们回到<code>./src/store/index.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要使用到thunk，所以引入中间件applyMiddleware</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入reducers</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux-thunk，处理异步</span></span><br><span class="line"><span class="comment">// 现在主流处理异步的是saga和thunk</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入日志</span></span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">"redux-logger"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着创建仓库和中间件</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducers, applyMiddleware(thunk,logger));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><blockquote><p>接着我们回来<code>./src/store/actions</code>，新增一个异步的动作行为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/actions/counter.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">"../action-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，分别约束add和subtract的type类型</span></span><br><span class="line"><span class="keyword">export</span> interface Add&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.ADD</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface Subtract&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.SUBTRACT</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再导出一个type</span></span><br><span class="line"><span class="comment">// type是用来给类型起别名的</span></span><br><span class="line"><span class="comment">// 这个actions里是一个对象，会有很多函数，每个函数都会返回一个action</span></span><br><span class="line"><span class="comment">// 而 ./store/reducers/index.tsx中的action会是下面某一个函数的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Action = Add | Subtract</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上面定义好的接口作用于下面</span></span><br><span class="line"><span class="comment">// 约束返回值的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  add():Add&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.ADD&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  subtract():Subtract&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.SUBTRACT&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 一秒后才执行这个行为</span></span><br><span class="line">  <span class="comment">// ++</span></span><br><span class="line">  addAsync():any&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch:any,getState:any</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 当1秒过后，会执行dispatch，派发出去，然后改变仓库的状态</span></span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>:types.ADD&#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>到<code>./src/components/Counter.tsx</code>组件内，使用这个异步</p></blockquote><h4 id="2-2-2-合并reducers"><a href="#2-2-2-合并reducers" class="headerlink" title="2.2.2 合并reducers"></a>2.2.2 合并reducers</h4><blockquote><p>假如我们的项目里面，有两个计数器，而且它俩是完全没有关系的，状态也是完全独立的，这个时候就需要用到合并<code>reducers</code>了</p></blockquote><ul><li>首先我们新增<code>action</code>的动作行为类型，在<code>./src/store/action-types.tsx</code></li><li>然后修改接口文件，<code>./src/types/index.tsx</code></li><li>然后把<code>./src/store/actions/counter.tsx</code>文件拷贝在当前目录并且修改名称为<code>counter2.tsx</code></li><li>然后把<code>./src/store/reduces/index.tsx</code>拷贝并且改名为<code>counter.tsx</code>和<code>counter2.tsx</code></li></ul><blockquote><p>我们多个<code>reducer</code>是通过<code>combineReducers</code>方法，进行合并的，因为我们一个项目当中肯定是存在非常多个<code>reducer</code>，所以统一在这里处理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/reducers/index.tsc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入合并方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要合并的reducer</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">"./counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要合并的reducer</span></span><br><span class="line"><span class="keyword">import</span> counter2 <span class="keyword">from</span> <span class="string">"./counter2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">let</span> reducers = combineReducers(&#123;</span><br><span class="line">  counter,</span><br><span class="line">  counter2,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducers;</span><br></pre></td></tr></table></figure><blockquote><p>最后修改组件，进入<code>./src/components/</code>,其中</p></blockquote><p>到目前为止，我们完成了<code>reducers</code>的合并了，那么我们看看效果如何，首先我们给<code>./src/index.tsc</code>添加<code>Counter2</code>组件，这样的目的是与<code>Counter</code>组件完全独立，互不影响，但是又能够最终合并到<code>readucers</code></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-b1980706114cbe84.png" alt="image.png"></p><h3 id="2-3-路由"><a href="#2-3-路由" class="headerlink" title="2.3 路由"></a>2.3 路由</h3><h4 id="2-3-1-基本用法"><a href="#2-3-1-基本用法" class="headerlink" title="2.3.1 基本用法"></a>2.3.1 基本用法</h4><blockquote><p>首先进入<code>./src/index.tsx</code>导入我们的路由所需要的依赖包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDom <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux这个库的Provider组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="comment">// 路由的容器:HashRouter as Router</span></span><br><span class="line"><span class="comment">// 路由的规格:Route</span></span><br><span class="line"><span class="comment">// Link组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router,Route,Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入仓库</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> CounterComponent <span class="keyword">from</span> <span class="string">"./components/Counter"</span>;</span><br><span class="line"><span class="keyword">import</span> CounterComponent2 <span class="keyword">from</span> <span class="string">"./components/Counter2"</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">"./components/Counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用Provider包裹CounterComponent组件</span></span><br><span class="line"><span class="comment">// 并且把store传给Provider</span></span><br><span class="line"><span class="comment">// 这样Provider可以向它的子组件提供store</span></span><br><span class="line">ReactDom.render((</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &#123;<span class="comment">/* 路由组件 */</span>&#125;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &#123;<span class="comment">/*  放两个路由规则需要在外层套个React.Fragment */</span>&#125;</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">            &#123;<span class="comment">/* 增加导航 */</span>&#125;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/counter"</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/counter2"</span>&gt;</span>Counter2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>* 当路径为 / 时是home组件 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>* 为了避免home组件一直渲染，我们可以添加属性exact *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            &lt;Route exact path="/</span><span class="string">" component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path="</span>/counter<span class="string">" component=&#123;CounterComponent&#125;/&gt;</span></span><br><span class="line"><span class="string">            &lt;Route path="</span>/counter2<span class="string">" component=&#123;CounterComponent2&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/React.Fragment&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  &lt;/Provider&gt;</span></span><br><span class="line"><span class="string">),document.getElementById("</span>app<span class="string">"))</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-df85174da722a448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>但是有个很大的问题，就是我们直接访问<code>http://localhost:8080/counter</code>会找不到路由</p></blockquote><ul><li>因为我们的是单页面应用，不管路由怎么变更，实际上都是访问<code>index.html</code>这个文件，所以当我们访问根路径的时候，能够正常访问，因为<code>index.html</code>文件就放在这个目录下，但是当我们通过非根路径的路由访问，则出错了，是因为我们在相应的路径没有这个文件，所以出错了</li><li>从这一点也可以衍生出一个实战经验，我们平时项目部署上线的时候，会出现这个问题，一般我们都是用<code>nginx</code>来把访问的路径都是指向<code>index.html</code>文件，这样就能够正常访问了。</li><li>那么针对目前我们这个情况，我们可以通过修改<code>webpack</code>配置，让路由不管怎么访问，都是指向我们制定的<code>index.html</code>文件。</li></ul><blockquote><p>进入<code>./webpack.config.js</code>，在<code>devServer</code>的配置对象下新增一些配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发环境服务配置</span></span><br><span class="line">  devServer:&#123;</span><br><span class="line">    <span class="comment">// 启动热更新,当模块、组件有变化，不会刷新整个页面，而是局部刷新</span></span><br><span class="line">    <span class="comment">// 需要和插件webpack.HotModuleReplacementPlugin配合使用</span></span><br><span class="line">    hot:<span class="literal">true</span>, </span><br><span class="line">    <span class="comment">// 静态资源目录</span></span><br><span class="line">    contentBase:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// 不管访问什么路径，都重定向到index.html</span></span><br><span class="line">    historyApiFallback:&#123;</span><br><span class="line">      index:<span class="string">"./index.html"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>webpack</code>配置需要重启服务，然后重启服务，看看浏览器能否正常访问<code>http://localhost:8080/counter</code></p></blockquote><h4 id="2-3-2-同步路由到redux"><a href="#2-3-2-同步路由到redux" class="headerlink" title="2.3.2 同步路由到redux"></a>2.3.2 同步路由到redux</h4><blockquote><p>路由的路径，如何同步到仓库当中。以前是用一个叫<code>react-router-redux</code>的库，把路由和<code>redux</code>结合到一起的，<code>react-router-redux</code>挺好用的，但是这个库不再维护了，被废弃了，所以现在推荐使用<code>connected-react-router</code>这个库，可以把路由状态映射到仓库当中</p></blockquote><blockquote><p>首先我们在<code>./src</code>下创建文件<code>history.tsx</code></p></blockquote><p>假设我有一个需求，就是我不通过<code>Link</code>跳转页面，而是通过编程式导航，触发一个动作，然后这个动作会派发出去，而且把路由信息放到<code>redux</code>中，供我以后查看。</p><blockquote><p>我们进入<code>./src/store/reducers/index.tsx</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入合并方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要合并的reducer</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">"./counter"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要合并的reducer</span></span><br><span class="line"><span class="keyword">import</span> counter2 <span class="keyword">from</span> <span class="string">"./counter2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入connectRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; connectRouter &#125; <span class="keyword">from</span> <span class="string">"connected-react-router"</span>;</span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">"../../history"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">let</span> reducers = combineReducers(&#123;</span><br><span class="line">  counter,</span><br><span class="line">  counter2,</span><br><span class="line">  <span class="comment">// 把history传到connectRouter函数中</span></span><br><span class="line">  router: connectRouter(history)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducers;</span><br></pre></td></tr></table></figure><blockquote><p>我们进入<code>./src/store/index.tsx</code>来添加中间件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要使用到thunk，所以引入中间件applyMiddleware</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入reducers</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux-thunk，处理异步</span></span><br><span class="line"><span class="comment">// 现在主流处理异步的是saga和thunk</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入日志</span></span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">"redux-logger"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入中间件</span></span><br><span class="line"><span class="keyword">import</span> &#123; routerMiddleware &#125; <span class="keyword">from</span> <span class="string">"connected-react-router"</span>;</span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">"../history"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着创建仓库和中间件</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducers, applyMiddleware(routerMiddleware(history),thunk,logger));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><blockquote><p>我们进入<code>./src/store/actions/counter.tsx</code>加个<code>goto</code>方法用来跳转</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/store/actions/counter.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">"../action-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入push方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; push &#125; <span class="keyword">from</span> <span class="string">"connected-react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个接口，分别约束add和subtract的type类型</span></span><br><span class="line"><span class="keyword">export</span> interface Add&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.ADD</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface Subtract&#123;</span><br><span class="line">  type:<span class="keyword">typeof</span> types.SUBTRACT</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再导出一个type</span></span><br><span class="line"><span class="comment">// type是用来给类型起别名的</span></span><br><span class="line"><span class="comment">// 这个actions里是一个对象，会有很多函数，每个函数都会返回一个action</span></span><br><span class="line"><span class="comment">// 而 ./store/reducers/index.tsx中的action会是下面某一个函数的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Action = Add | Subtract</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上面定义好的接口作用于下面</span></span><br><span class="line"><span class="comment">// 约束返回值的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  add():Add&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.ADD&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  subtract():Subtract&#123;</span><br><span class="line">    <span class="comment">// 需要返回一个action对象</span></span><br><span class="line">    <span class="comment">// type为动作的类型</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: types.SUBTRACT&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 一秒后才执行这个行为</span></span><br><span class="line">  addAsync():any&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch:any,getState:any</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 当1秒过后，会执行dispatch，派发出去，然后改变仓库的状态</span></span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>:types.ADD&#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  goto(path:string)&#123;</span><br><span class="line">    <span class="comment">// 派发一个动作</span></span><br><span class="line">    <span class="comment">// 这个push是connected-react-router里的一个方法</span></span><br><span class="line">    <span class="comment">// 返回一个跳转路径的action</span></span><br><span class="line">    <span class="keyword">return</span> push(path)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们进入<code>./src/components/Counter.tsx</code>中加个按钮，当我点击按钮的时候，会向仓库派发<code>action</code>，仓库的<code>action</code>里有中间件，会把我们这个请求拦截到，然后跳转</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分-Typescript基础&quot;&gt;&lt;a href=&quot;#第一部分-Typescript基础&quot; class=&quot;headerlink&quot; title=&quot;第一部分 Typescript基础&quot;&gt;&lt;/a&gt;第一部分 Typescript基础&lt;/h1&gt;&lt;h2 id=&quot;一、typ
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="React" scheme="http://blog.poetries.top/tags/React/"/>
    
      <category term="Typescript" scheme="http://blog.poetries.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>shell入门</title>
    <link href="http://blog.poetries.top/2018/12/24/shell/"/>
    <id>http://blog.poetries.top/2018/12/24/shell/</id>
    <published>2018-12-24T02:32:41.000Z</published>
    <updated>2019-01-25T09:06:54.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近使用<code>shell</code>比较多，这里记录一下</p></blockquote><h2 id="一、初识shell"><a href="#一、初识shell" class="headerlink" title="一、初识shell"></a>一、初识shell</h2><h3 id="1-1-Shell-环境"><a href="#1-1-Shell-环境" class="headerlink" title="1.1 Shell 环境"></a>1.1 Shell 环境</h3><blockquote><p><code>Linux</code> 的 <code>Shell</code> 种类众多，常见的有</p></blockquote><ul><li><code>/usr/bin/sh</code>或<code>/bin/sh</code></li><li><code>/bin/bash</code></li><li><code>C Shell（/usr/bin/csh）</code></li><li><code>K Shell（/usr/bin/ksh）</code></li><li><code>Shell for Root（/sbin/sh）</code></li></ul><blockquote><p><code>Bash</code> 在日常工作中被广泛使用。同时，<code>Bash</code> 也是大多数<code>Linux</code> 系统默认的 <code>Shell</code></p></blockquote><ul><li>打开文本编辑器(可以使用 <code>vi/vim</code> 命令来创建文件)，新建一个文件 <code>test.sh</code>，扩展名为 <code>sh</code>（<code>sh</code>代表<code>shell</code>），扩展名并不影响脚本执行，见名知意就好</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World !"</span></span><br></pre></td></tr></table></figure><ul><li><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 <code>Shell</code></li><li><code>echo</code> 命令用于向窗口输出文本</li></ul><h3 id="1-2-运行-Shell-脚本有两种方法"><a href="#1-2-运行-Shell-脚本有两种方法" class="headerlink" title="1.2 运行 Shell 脚本有两种方法"></a>1.2 运行 Shell 脚本有两种方法</h3><p><strong>作为可执行程序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要写成 <code>./test.sh</code>，而不是 <code>test.sh</code>，运行其它二进制的程序也一样，直接写 <code>test.sh</code>，<code>linux</code> 系统会去 <code>PATH</code> 里寻找有没有叫 <code>test.sh</code> 的，而只有 <code>/bin</code>, <code>/sbin,</code> <code>/usr/bin</code>，<code>/usr/sbin</code> 等在 <code>PATH</code> 里，你的当前目录通常不在 <code>PATH</code> 里，所以写成 <code>test.sh</code> 是会找不到命令的，<strong>要用 ./test.sh 告诉系统说，就在当前目录找</strong></p></blockquote><p><strong>作为解释器参数</strong></p><ul><li>这种运行方式是，直接运行解释器，其参数就是 <code>shell</code> 脚本的文件名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure><ul><li>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用</li></ul><h2 id="二、shell变量"><a href="#二、shell变量" class="headerlink" title="二、shell变量"></a>二、shell变量</h2><ul><li>定义变量时，变量名不加美元符号</li><li>注意，变量名和等号之间不能有空格</li><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li><li><code>中间不能有空格</code>，可以使用下划线（<code>_</code>）</li><li>不能使用标点符号</li><li>不能使用<code>bash</code>里的关键字（可用<code>help</code>命令查看保留关键字）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"poetries"</span> <span class="comment">#中间不能有空格</span></span><br></pre></td></tr></table></figure><ul><li>有效的 <code>Shell</code> 变量名示例如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUNOOB</span><br><span class="line">LD_LIBRARY_PATH</span><br><span class="line">_var</span><br><span class="line">var2</span><br></pre></td></tr></table></figure><h3 id="2-1-使用变量"><a href="#2-1-使用变量" class="headerlink" title="2.1 使用变量"></a>2.1 使用变量</h3><ul><li>使用一个定义过的变量，只要在变量名前面加美元符号即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"poetries"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><ul><li>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况</li><li>如果不给<code>skill</code>变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了</li><li>推荐给所有变量加上花括号，这是个好的编程习惯</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>已定义的变量，可以被重新定义，如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"tom"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line">your_name=<span class="string">"alibaba"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br></pre></td></tr></table></figure><h3 id="2-2-只读变量"><a href="#2-2-只读变量" class="headerlink" title="2.2 只读变量"></a>2.2 只读变量</h3><ul><li>使用 <code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变</li><li>下面的例子尝试更改只读变量，结果报错</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">myUrl=<span class="string">"http://www.w3cschool.cc"</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br><span class="line">myUrl=<span class="string">"http://www.runoob.com"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh: NAME: This variable is read only.</span><br></pre></td></tr></table></figure><h3 id="2-3-删除变量"><a href="#2-3-删除变量" class="headerlink" title="2.3 删除变量"></a>2.3 删除变量</h3><ul><li>使用 <code>unset</code> 命令可以删除变量。</li><li>语法 <code>unset variable_name</code></li><li>变量被删除后不能再次使用。<code>unset</code> 命令不能删除只读变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myUrl=<span class="string">"http://www.runoob.com"</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure><h3 id="2-4-变量类型"><a href="#2-4-变量类型" class="headerlink" title="2.4 变量类型"></a>2.4 变量类型</h3><p><strong>运行shell时，会同时存在三种变量</strong></p><ul><li><strong>局部变</strong>量 局部变量在脚本或命令中定义，仅在当前<code>shell</code>实例中有效，其他<code>shell</code>启动的程序不能访问局部变量</li><li><strong>环境变量</strong> 所有的程序，包括<code>shell</code>启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候<code>shell</code>脚本也可以定义环境变量</li><li><strong><code>shell</code>变量</strong> <code>shell</code>变量是由<code>shell</code>程序设置的特殊变量。<code>shell</code>变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了<code>shell</code>的正常运行</li></ul><h3 id="2-5-Shell-字符串"><a href="#2-5-Shell-字符串" class="headerlink" title="2.5 Shell 字符串"></a>2.5 Shell 字符串</h3><ul><li>字符串是<code>shell</code>编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟<code>PHP</code>类似。</li></ul><p><strong>单引号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&apos;this is a string&apos;</span><br></pre></td></tr></table></figure><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><p><strong>双引号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author=<span class="string">'poetries'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello,I'm <span class="variable">$&#123;author&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="2-6-拼接字符串"><a href="#2-6-拼接字符串" class="headerlink" title="2.6 拼接字符串"></a>2.6 拼接字符串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"poetries"</span></span><br><span class="line">greeting=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br></pre></td></tr></table></figure><h3 id="2-7-获取字符串长度"><a href="#2-7-获取字符串长度" class="headerlink" title="2.7 获取字符串长度"></a>2.7 获取字符串长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author=<span class="string">'poetries'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"length:<span class="variable">$&#123;#author&#125;</span>"</span> <span class="comment"># length:8</span></span><br></pre></td></tr></table></figure><h3 id="2-8-提取子字符串"><a href="#2-8-提取子字符串" class="headerlink" title="2.8 提取子字符串"></a>2.8 提取子字符串</h3><ul><li>以下实例从字符串第 <code>2</code> 个字符开始截取 <code>4</code> 个字符：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author=<span class="string">'poetries'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"提取字符串：<span class="variable">$&#123;author:1:4&#125;</span>"</span> <span class="comment"># oetr</span></span><br></pre></td></tr></table></figure><h3 id="2-9-Shell-数组"><a href="#2-9-Shell-数组" class="headerlink" title="2.9 Shell 数组"></a>2.9 Shell 数组</h3><ul><li><code>bash</code>支持一维数组（不支持多维数组），并且没有限定数组的大小</li><li>类似与<code>C</code>语言，数组元素的下标由<code>0</code>开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0</li></ul><h3 id="2-10-定义数组"><a href="#2-10-定义数组" class="headerlink" title="2.10 定义数组"></a>2.10 定义数组</h3><ul><li>在<code>Shell</code>中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure><h3 id="2-11-读取数组"><a href="#2-11-读取数组" class="headerlink" title="2.11 读取数组"></a>2.11 读取数组</h3><ul><li>读取数组元素值的一般格式是</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;数组名[下标]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuen=$&#123;array_name[n]&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>@</code>符号可以获取数组中的所有元素，例如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><h3 id="2-12-获取数组的长度"><a href="#2-12-获取数组的长度" class="headerlink" title="2.12 获取数组的长度"></a>2.12 获取数组的长度</h3><ul><li>获取数组长度的方法与获取字符串长度的方法相同，例如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取得数组元素的个数</span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"># 或者</span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"># 取得数组单个元素的长度</span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">like=(</span><br><span class="line">  <span class="string">'running'</span></span><br><span class="line">  <span class="string">'reading'</span></span><br><span class="line">  <span class="string">'play'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"读取数组元素：<span class="variable">$&#123;like[@]&#125;</span>"</span> <span class="comment"># @读取数组所有长度</span></span><br></pre></td></tr></table></figure><h3 id="2-13-Shell-注释"><a href="#2-13-Shell-注释" class="headerlink" title="2.13 Shell 注释"></a>2.13 Shell 注释</h3><ul><li>以<code>&quot;#&quot;</code>开头的行就是注释，会被解释器忽略</li><li><code>sh</code>里没有多行注释，只能每一行加一个#号。只能像这样</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="comment"># author：poetry</span></span><br><span class="line"><span class="comment"># site：www.poetries.top！</span></span><br><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##### 用户配置区 结束  #####</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 学习记录</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'====学习变量===='</span></span><br><span class="line">author=<span class="string">'poetries'</span></span><br><span class="line">like=(</span><br><span class="line">  <span class="string">'running'</span></span><br><span class="line">  <span class="string">'reading'</span></span><br><span class="line">  <span class="string">'playing'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"读取数组元素：<span class="variable">$&#123;like[@]&#125;</span>"</span> <span class="comment"># @读取数组所有长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"提取字符串：<span class="variable">$&#123;author:1:4&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"字符串length:<span class="variable">$&#123;#author&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello,I'm <span class="variable">$&#123;author&#125;</span>"</span></span><br></pre></td></tr></table></figure><h2 id="三、shell传递参数"><a href="#三、shell传递参数" class="headerlink" title="三、shell传递参数"></a>三、shell传递参数</h2><ul><li>我们可以在执行 <code>Shell</code> 脚本时，向脚本传递参数，脚本内获取参数的格式为：<code>$n</code>。<code>n</code> 代表一个数字，<code>1</code> 为执行脚本的第一个参数，<code>2</code> 为执行脚本的第二个参数，以此类推</li><li>以下实例我们向脚本传递三个参数，并分别输出，其中 <code>$0</code> 为执行的文件名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sh test.sh 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:poetries</span></span><br><span class="line"><span class="comment"># url:blog.poetries.top</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Shell 传递参数实例！"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行的文件名：<span class="variable">$0</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数为：<span class="variable">$1</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个参数为：<span class="variable">$2</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三个参数为：<span class="variable">$3</span>"</span>;</span><br></pre></td></tr></table></figure><ul><li>为脚本设置可执行权限，并执行脚本，输出结果如下所示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><ul><li>数组中可以存放多个值。<code>Bash Shell</code> 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小</li><li>与大部分编程语言类似，数组元素的下标由<code>0</code>开始</li><li><code>Shell</code> 数组用括号来表示，元素用”空格”符号分割开，语法格式如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:poetry</span></span><br><span class="line"><span class="comment"># url:blog.poetries.top</span></span><br><span class="line"></span><br><span class="line">my_array=(A B <span class="string">"C"</span> D)</span><br></pre></td></tr></table></figure><ul><li>我们也可以使用下标来定义数组:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br></pre></td></tr></table></figure><h3 id="4-1-读取数组"><a href="#4-1-读取数组" class="headerlink" title="4.1 读取数组"></a>4.1 读取数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array_name[index]&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:poetry</span></span><br><span class="line"><span class="comment"># url:www.poetries.top</span></span><br><span class="line"></span><br><span class="line">my_array=(A B <span class="string">"C"</span> D)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">第一个元素为: A</span><br><span class="line">第二个元素为: B</span><br><span class="line">第三个元素为: C</span><br><span class="line">第四个元素为: D</span><br></pre></td></tr></table></figure><h3 id="4-2-获取数组中的所有元素"><a href="#4-2-获取数组中的所有元素" class="headerlink" title="4.2 获取数组中的所有元素"></a>4.2 获取数组中的所有元素</h3><ul><li>使用<code>@</code> 或 <code>*</code> 可以获取数组中的所有元素，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:poetries</span></span><br><span class="line"><span class="comment"># url:www.poetries.top</span></span><br><span class="line"></span><br><span class="line">my_array[0]=A</span><br><span class="line">my_array[1]=B</span><br><span class="line">my_array[2]=C</span><br><span class="line">my_array[3]=D</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组的元素为: <span class="variable">$&#123;my_array[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组的元素为: <span class="variable">$&#123;my_array[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">数组的元素为: A B C D</span><br><span class="line">数组的元素为: A B C D</span><br></pre></td></tr></table></figure><h3 id="4-3-获取数组的长度"><a href="#4-3-获取数组的长度" class="headerlink" title="4.3 获取数组的长度"></a>4.3 获取数组的长度</h3><ul><li>获取数组长度的方法与获取字符串长度的方法相同，例如</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:poetries</span></span><br><span class="line"><span class="comment"># url:www.poetries.top</span></span><br><span class="line"></span><br><span class="line">my_array[0]=A</span><br><span class="line">my_array[1]=B</span><br><span class="line">my_array[2]=C</span><br><span class="line">my_array[3]=D</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组元素个数为: <span class="variable">$&#123;#my_array[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"数组元素个数为: <span class="variable">$&#123;#my_array[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">数组元素个数为: 4</span><br><span class="line">数组元素个数为: 4</span><br></pre></td></tr></table></figure><h2 id="五、基本运算符"><a href="#五、基本运算符" class="headerlink" title="五、基本运算符"></a>五、基本运算符</h2><ul><li>原生<code>bash</code>不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，<code>expr</code> 最常用</li><li><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作</li><li>例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ‘)：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2` <span class="comment"># 注意 表达式和运算符之间要有空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"两数之和为 : <span class="variable">$val</span>"</span></span><br></pre></td></tr></table></figure><ul><li>表达式和运算符之间要有空格，例如 <code>2+2</code> 是不对的，必须写成 <code>2 + 2</code>，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <code></code> 包含，注意这个字符不是常用的单引号</li></ul><h3 id="5-1-算术运算符"><a href="#5-1-算术运算符" class="headerlink" title="5.1 算术运算符"></a>5.1 算术运算符</h3><ul><li>下表列出了常用的算术运算符，假定变量 <code>a</code> 为 <code>10</code>，变量 <code>b</code> 为 <code>20</code>：</li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>expr $a + $b</code> 结果为 <code>30</code>。</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>expr $a - $b</code> 结果为 <code>-10</code>。</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  <code>200</code>。</td></tr><tr><td><code>/</code></td><td>除法</td><td><code>expr $b / $a</code> 结果为 <code>2</code>。</td></tr><tr><td><code>%</code></td><td>取余</td><td><code>expr $b % $a</code> 结果为 <code>0</code>。</td></tr><tr><td><code>=</code></td><td>赋值</td><td><code>a=$b</code> 将把变量 b 的值赋给 a。</td></tr><tr><td><code>==</code></td><td>相等。用于比较两个数字，相同则返回 <code>true</code>。</td><td><code>[ $a == $b ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>!=</code></td><td>不相等。用于比较两个数字，不相同则返回 <code>true</code>。</td><td><code>[ $a != $b ]</code> 返回 <code>true</code>。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'shell运算符学习===='</span></span><br><span class="line">value=`expr 2 + 3`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"两数之和:<span class="variable">$&#123;value&#125;</span>"</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">add=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line">reduce=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line">cheng=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line">chu=`expr <span class="variable">$a</span> / <span class="variable">$b</span>`</span><br><span class="line">quyu=`expr <span class="variable">$a</span> % <span class="variable">$b</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+：<span class="variable">$&#123;add&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-：<span class="variable">$&#123;reduce&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*：<span class="variable">$&#123;cheng&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/：<span class="variable">$&#123;chu&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"%：<span class="variable">$&#123;quyu&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>注意：条件表达式要放在方括号之间，并且要有空格，例如: <code>[$a==$b]</code> 是错误的，必须写成 <code>[ $a == $b ]</code></li></ul><h3 id="5-2-关系运算符"><a href="#5-2-关系运算符" class="headerlink" title="5.2 关系运算符"></a>5.2 关系运算符</h3><ul><li>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</li><li>下表列出了常用的关系运算符，假定变量 <code>a</code> 为 <code>10</code>，变量 <code>b</code> 为 <code>20</code>：</li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>检测两个数是否相等，相等返回 <code>true</code></td><td><code>[ $a -eq $b ]</code> 返回 <code>false</code></td></tr><tr><td><code>-ne</code></td><td>检测两个数是否相等，不相等返回 <code>true</code></td><td><code>[ $a -ne $b ]</code> 返回 <code>true</code></td><td>。</td></tr><tr><td><code>-gt</code></td><td>检测左边的数是否大于右边的，如果是，则返回 <code>true</code></td><td><code>[ $a -gt $b ]</code> 返回 <code>false</code></td></tr><tr><td><code>-lt</code></td><td>检测左边的数是否小于右边的，如果是，则返回 <code>true</code></td><td><code>[ $a -lt $b ]</code> 返回 <code>true</code></td></tr><tr><td><code>-ge</code></td><td>检测左边的数是否大于等于右边的，如果是，则返回 <code>true</code></td><td><code>[ $a -ge $b ]</code>返回 <code>false</code></td></tr><tr><td><code>-le</code></td><td>检测左边的数是否小于等于右边的，如果是，则返回 <code>true</code></td><td><code>[ $a -le $b ]</code>返回 <code>true</code></td></tr></tbody></table><h3 id="5-3-布尔运算符"><a href="#5-3-布尔运算符" class="headerlink" title="5.3 布尔运算符"></a>5.3 布尔运算符</h3><ul><li>下表列出了常用的布尔运算符，假定变量 <code>a</code> 为 <code>10</code>，变量 <code>b</code> 为 <code>20</code>：</li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>!</code></td><td>非运算，表达式为 <code>true</code> 则返回 <code>false</code>，否则返回 <code>true</code>。</td><td><code>[ ! false ]</code> 返回 <code>true</code></td></tr><tr><td><code>-o</code></td><td>或运算，有一个表达式为 <code>true</code>则返回 <code>true</code>。</td><td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 <code>true</code></td></tr><tr><td><code>-a</code></td><td>与运算，两个表达式都为 <code>true</code> 才返回 <code>true</code>。</td><td><code>[ $a -lt 20 -a $b -gt 100 ]</code>返回 <code>false</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:author</span></span><br><span class="line"><span class="comment"># url:blog.poetries.top</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="5-4-逻辑运算符"><a href="#5-4-逻辑运算符" class="headerlink" title="5.4 逻辑运算符"></a>5.4 逻辑运算符</h3><ul><li>以下介绍 Shell 的逻辑运算符，假定变量 <code>a</code> 为 <code>10</code>，变量 <code>b</code>为 <code>20</code></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑的 <code>AND</code></td><td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code>返回 <code>false</code></td></tr><tr><td>`</td><td></td><td>`</td><td>逻辑的 <code>OR</code></td><td>`[[ $a -lt 100</td><td></td><td>$b -gt 100 ]]<code>返回</code>true`</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 true"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"返回 false"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="5-5-字符串运算符"><a href="#5-5-字符串运算符" class="headerlink" title="5.5 字符串运算符"></a>5.5 字符串运算符</h3><ul><li>下表列出了常用的字符串运算符，假定变量 <code>a</code> 为 <code>&quot;abc&quot;</code>，变量 <code>b</code> 为 <code>&quot;efg&quot;</code></li></ul><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>=</code></td><td>检测两个字符串是否相等，相等返回 <code>true</code></td><td><code>[ $a = $b ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>!=</code></td><td>检测两个字符串是否相等，不相等返回 <code>true</code>。</td><td><code>[ $a != $b ]</code>返回 <code>true</code>。</td></tr><tr><td><code>-z</code></td><td>检测字符串长度是否为<code>0</code>，为<code>0</code>返回 <code>true</code>。</td><td><code>[ -z $a ]</code>返回 <code>false</code></td><td>。</td></tr><tr><td><code>-n</code></td><td>检测字符串长度是否为<code>0</code>，不为<code>0</code>返回 <code>true</code>。</td><td><code>[ -n $a ]</code> 返回 <code>true</code>。</td></tr><tr><td><code>str</code></td><td>检测字符串是否为空，不为空返回 <code>true</code>。</td><td><code>[ $a ]</code> 返回 <code>true</code>。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"abc"</span></span><br><span class="line">b=<span class="string">"efg"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串不为空"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串为空"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="5-6-文件测试运算符"><a href="#5-6-文件测试运算符" class="headerlink" title="5.6 文件测试运算符"></a>5.6 文件测试运算符</h3><ul><li>文件测试运算符用于检测 <code>Unix</code> 文件的各种属性</li></ul><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>-b file</code></td><td>检测文件是否是块设备文件，如果是，则返回 <code>true</code>。</td><td><code>[ -b $file ]</code>返回 <code>false</code>。</td></tr><tr><td><code>-c file</code></td><td>检测文件是否是字符设备文件，如果是，则返回 <code>true</code>。</td><td><code>[ -c $file ]</code>返回 <code>false</code>。</td></tr><tr><td><code>-d file</code></td><td>检测文件是否是目录，如果是，则返回 <code>true</code>。</td><td><code>[ -d $file ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>-f file</code></td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 <code>true</code>。</td><td><code>[ -f $file ]</code>返回 <code>true</code>。</td></tr><tr><td><code>-g file</code></td><td>检测文件是否设置了 <code>SGID</code>位，如果是，则返回 <code>true</code>。</td><td><code>[ -g $file ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>-k file</code></td><td>检测文件是否设置了粘着位(<code>Sticky Bit</code>)，如果是，则返回 <code>true</code>。</td><td><code>[ -k $file ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>-p file</code></td><td>检测文件是否是有名管道，如果是，则返回 <code>true</code>。</td><td><code>[ -p $file ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>-u file</code></td><td>检测文件是否设置了 <code>SUID</code> 位，如果是，则返回 <code>true</code>。</td><td><code>[ -u $file ]</code> 返回 <code>false</code>。</td></tr><tr><td><code>-r file</code></td><td>检测文件是否可读，如果是，则返回 <code>true</code>。</td><td><code>[ -r $file ]</code> 返回 <code>true</code>。</td></tr><tr><td><code>-w file</code></td><td>检测文件是否可写，如果是，则返回 <code>true</code>。</td><td><code>[ -w $file ]</code> 返回 <code>true</code>。</td></tr><tr><td><code>-x file</code></td><td>检测文件是否可执行，如果是，则返回 <code>true</code>。</td><td><code>[ -x $file ]</code> 返回 <code>true</code>。</td></tr><tr><td><code>-s file</code></td><td>检测文件是否为空（文件大小是否大于<code>0</code>），不为空返回 <code>true</code>。</td><td><code>[ -s $file ]</code> 返回 <code>true</code>。</td></tr><tr><td><code>-e file</code></td><td>检测文件（包括目录）是否存在，如果是，则返回 <code>true</code>。</td><td><code>[ -e $file ]</code> 返回 <code>true</code>。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=<span class="string">"/homee/shell/test1.sh"</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可读"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可读"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可写"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可写"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件可执行"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不可执行"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为普通文件"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为特殊文件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件是个目录"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不是个目录"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不为空"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件为空"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件存在"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"文件不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="六、echo用法"><a href="#六、echo用法" class="headerlink" title="六、echo用法"></a>六、echo用法</h2><ul><li><code>Shell</code> 的 <code>echo</code> 指令与 <code>PHP</code> 的 <code>echo</code> 指令类似，都是用于字符串的输出。命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> string</span><br></pre></td></tr></table></figure><h3 id="6-1-显示普通字符串"><a href="#6-1-显示普通字符串" class="headerlink" title="6.1 显示普通字符串:"></a>6.1 显示普通字符串:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure><ul><li>这里的双引号完全可以省略，以下命令与上面实例效果一致</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="6-2-显示转义字符"><a href="#6-2-显示转义字符" class="headerlink" title="6.2 显示转义字符"></a>6.2 显示转义字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"\"It is a test\""</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;It is a test&quot;</span><br></pre></td></tr></table></figure><h3 id="6-3-显示变量"><a href="#6-3-显示变量" class="headerlink" title="6.3 显示变量"></a>6.3 显示变量</h3><ul><li><code>read</code> 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> It is a test"</span></span><br></pre></td></tr></table></figure><ul><li>以上代码保存为 <code>test.sh</code>，<code>name</code> 接收标准输入的变量，结果将是</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># sh test.sh</span></span><br><span class="line">poetry                     <span class="comment">#标准输入</span></span><br><span class="line">poetry It is a <span class="built_in">test</span>        <span class="comment">#输出</span></span><br></pre></td></tr></table></figure><h3 id="6-4-显示换行"><a href="#6-4-显示换行" class="headerlink" title="6.4 显示换行"></a>6.4 显示换行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \n"</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It it a test"</span></span><br></pre></td></tr></table></figure><h3 id="6-5-显示不换行"><a href="#6-5-显示不换行" class="headerlink" title="6.5 显示不换行"></a>6.5 显示不换行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \c"</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure><h3 id="6-6-显示结果定向至文件"><a href="#6-6-显示结果定向至文件" class="headerlink" title="6.6 显示结果定向至文件"></a>6.6 显示结果定向至文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</span><br></pre></td></tr></table></figure><h3 id="6-7-显示命令执行结果"><a href="#6-7-显示命令执行结果" class="headerlink" title="6.7 显示命令执行结果"></a>6.7 显示命令执行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><ul><li>注意： 这里使用的是反引号 `, 而不是单引号 ‘</li><li>结果将显示当前日期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thu Feb 22 14:34:57 GMT 2018</span><br></pre></td></tr></table></figure><h2 id="七、printf用法"><a href="#七、printf用法" class="headerlink" title="七、printf用法"></a>七、printf用法</h2><ul><li><code>printf</code> 命令模仿 <code>C</code> 程序库（<code>library</code>）里的 <code>printf()</code> 程序</li><li><code>printf</code> 由 <code>POSIX</code> 标准所定义，因此使用 <code>printf</code> 的脚本比使用 <code>echo</code> 移植性好</li><li>默认 <code>printf</code> 不会像 <code>echo</code>自动添加换行符，我们可以手动添加 <code>\n</code></li></ul><p><strong>printf 命令的语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure><ul><li><code>format-string</code>: 为格式控制字符串</li><li><code>arguments</code>: 为参数列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello, Shell"</span></span><br><span class="line">Hello, Shell</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">"Hello, Shell\n"</span></span><br><span class="line">Hello, Shell</span><br><span class="line">$</span><br></pre></td></tr></table></figure><ul><li>接下来,用一个脚本来体现<code>printf</code>的强大功能</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4s\n"</span> 姓名 性别 体重kg  </span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span> 郭靖 男 66.1234 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span> 杨过 男 48.6543 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span> 郭芙 女 47.9876</span><br></pre></td></tr></table></figure><ul><li>执行脚本，输出结果如下所示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名     性别   体重kg</span><br><span class="line">郭靖     男      66.12</span><br><span class="line">杨过     男      48.65</span><br><span class="line">郭芙     女      47.99</span><br></pre></td></tr></table></figure><ul><li><code>%s</code> <code>%c</code> <code>%d</code> <code>%f</code>都是格式替代符</li><li><code>%-10s</code> 指一个宽度为<code>10</code>个字符（<code>-</code>表示左对齐，没有则表示右对齐），任何字符都会被显示在<code>10</code>个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来</li><li><code>%-4.2f</code> 指格式化为小数，其中<code>.2</code>指保留<code>2</code>位小数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># format-string为双引号</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%d %s\n"</span> 1 <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号与双引号效果一样 </span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'%d %s\n'</span> 1 <span class="string">"abc"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有引号也可以输出</span></span><br><span class="line"><span class="built_in">printf</span> %s abcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></span><br><span class="line"><span class="built_in">printf</span> %s abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s\n"</span> abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s %s %s\n"</span> a b c d e f g h i j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s and %d \n"</span></span><br></pre></td></tr></table></figure><p><strong>printf的转义序列</strong></p><table><thead><tr><th>序列</th><th>说明</th></tr></thead><tbody><tr><td><code>\a</code></td><td>警告字符，通常为<code>ASCII</code>的<code>BEL</code>字符</td></tr><tr><td><code>\b</code></td><td>后退</td></tr><tr><td><code>\c</code></td><td>抑制（不显示）输出结果中任何结尾的换行字符（只在<code>%b</code>格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td><code>\f</code></td><td>换页（formfeed）</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车（Carriage return）</td></tr><tr><td><code>\t</code></td><td>水平制表符</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\\</code></td><td>一个字面上的反斜杠字符</td></tr><tr><td><code>\ddd</code></td><td>表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td><code>\0ddd</code></td><td>表示1到3位的八进制值字符</td></tr></tbody></table><h2 id="八、test命令"><a href="#八、test命令" class="headerlink" title="八、test命令"></a>八、test命令</h2><ul><li><code>Shell</code>中的 <code>test</code> 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</li></ul><h3 id="8-1-数值测试"><a href="#8-1-数值测试" class="headerlink" title="8.1 数值测试"></a>8.1 数值测试</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>等于则为真</td></tr><tr><td><code>-ne</code></td><td>不等于则为真</td></tr><tr><td><code>-gt</code></td><td>大于则为真</td></tr><tr><td><code>-ge</code></td><td>大于等于则为真</td></tr><tr><td><code>-lt</code></td><td>小于则为真</td></tr><tr><td><code>-le</code></td><td>小于等于则为真</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个数相等！'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个数不相等！'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个数相等！</span><br></pre></td></tr></table></figure><ul><li>代码中的 <code>[]</code> 执行基本的算数运算</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=5</span><br><span class="line">b=6</span><br><span class="line"></span><br><span class="line">result=$[a+b] <span class="comment"># 注意等号两边不能有空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"result 为： <span class="variable">$result</span>"</span></span><br></pre></td></tr></table></figure><h3 id="8-2-字符串测试"><a href="#8-2-字符串测试" class="headerlink" title="8.2 字符串测试"></a>8.2 字符串测试</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>`=</td><td>`    等于则为真</td></tr><tr><td><code>!=</code></td><td>不相等则为真</td></tr><tr><td><code>-z</code></td><td>字符串</td><td>字符串的长度为零则为真</td></tr><tr><td><code>-n</code></td><td>字符串</td><td>字符串的长度不为零则为真</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">"poetries"</span></span><br><span class="line">num2=<span class="string">"poetries1"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num1</span> = <span class="variable">$num2</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个字符串相等!'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个字符串不相等!'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个字符串不相等!</span><br></pre></td></tr></table></figure><h3 id="8-3-文件测试"><a href="#8-3-文件测试" class="headerlink" title="8.3 文件测试"></a>8.3 文件测试</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-e</code> 文件名</td><td>如果文件存在则为真</td></tr><tr><td><code>-r</code> 文件名</td><td>如果文件存在且可读则为真</td></tr><tr><td><code>-w</code>文件名</td><td>如果文件存在且可写则为真</td></tr><tr><td><code>-x</code> 文件名</td><td>如果文件存在且可执行则为真</td></tr><tr><td><code>-s</code> 文件名</td><td>如果文件存在且至少有一个字符则为真</td></tr><tr><td><code>-d</code> 文件名</td><td>如果文件存在且为目录则为真</td></tr><tr><td><code>-f</code> 文件名</td><td>如果文件存在且为普通文件则为真</td></tr><tr><td><code>-c</code> 文件名</td><td>如果文件存在且为字符型特殊文件则为真</td></tr><tr><td><code>-b</code> 文件名</td><td>如果文件存在且为块特殊文件则为真</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file=/home/shell/test.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e <span class="variable">$file</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'test.sh文件存在'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'test.sh不存在'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.sh文件存在</span><br></pre></td></tr></table></figure><ul><li>另外，<code>Shell</code>还提供了与( <code>-a</code> )、或( <code>-o</code> )、非( <code>!</code> )三个逻辑操作符用于将测试条件连接起来，其优先级为：”<code>!</code>“最高，”<code>-a</code>“次之，”<code>-o</code>“最低。例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">file=/home/shell/test.sh</span><br><span class="line">file1=/home/poetry</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$file1</span> -o -e <span class="variable">$file</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'至少有一个文件存在'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'两个文件都不存在'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一个文件存在!</span><br></pre></td></tr></table></figure><h2 id="九、流程控制if-while-case"><a href="#九、流程控制if-while-case" class="headerlink" title="九、流程控制if/while/case"></a>九、流程控制if/while/case</h2><h3 id="9-1-if"><a href="#9-1-if" class="headerlink" title="9.1 if"></a>9.1 if</h3><ul><li><code>if</code> 语句语法格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>写成一行（适用于终端命令提示符）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $(ps -ef | grep -c <span class="string">"ssh"</span>) -gt 1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"true"</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="9-2-if-else"><a href="#9-2-if-else" class="headerlink" title="9.2 if else"></a>9.2 if else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="9-3-if-else-if-else"><a href="#9-3-if-else-if-else" class="headerlink" title="9.3 if else-if else"></a>9.3 if else-if else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>以下实例判断两个变量是否相等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 等于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 大于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 小于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"没有符合的条件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 小于 b</span><br></pre></td></tr></table></figure><ul><li><code>if else</code>语句经常与<code>test</code>命令结合使用，如下所示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个数字相等!'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'两个数字不相等!'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="9-4-for-循环"><a href="#9-4-for-循环" class="headerlink" title="9.4 for 循环"></a>9.4 for 循环</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>写成一行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><ul><li>当变量值在列表里，<code>for</code>循环即执行一次所有命令，使用变量名获取列表中的当前取值。</li><li>命令可为任何有效的<code>shell</code>命令和语句</li><li><code>in</code>列表可以包含替换、字符串和文件名</li><li><code>in</code>列表是可选的，如果不用它，<code>for</code>循环使用命令行的位置参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value is: <span class="variable">$loop</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">'This is a string'</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a string</span><br></pre></td></tr></table></figure><h3 id="9-5-while-语句"><a href="#9-5-while-语句" class="headerlink" title="9.5 while 语句"></a>9.5 while 语句</h3><ul><li><code>while</code>循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>以下是一个基本的<code>while</code>循环，测试条件是：如果<code>int</code>小于等于<code>5</code>，那么条件返回真。<code>int</code>从<code>0</code>开始，每次循环处理时，<code>int</code>加<code>1</code>。运行上述脚本，返回数字<code>1</code>到<code>5</code>，然后终止</li><li>使用中使用了 <code>Bash let</code> 命令，它用于执行一个或多个表达式，变量计算中不需要加上 <code>$</code> 来表示变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">int=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=5 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">"int++"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9-6-until-循环"><a href="#9-6-until-循环" class="headerlink" title="9.6 until 循环"></a>9.6 until 循环</h3><ul><li><code>until</code>循环执行一系列命令直至条件为真时停止</li><li><code>until</code>循环与<code>while</code>循环在处理方式上刚好相反</li><li>一般<code>while</code>循环优于<code>until</code>循环，但在某些时候—也只是极少数情况下，<code>until</code>循环更加有用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9-7-case"><a href="#9-7-case" class="headerlink" title="9.7 case"></a>9.7 case</h3><ul><li><code>Shell case</code>语句为多选择语句。可以用<code>case</code>语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。<code>case</code>语句格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><ul><li><code>case</code>工作方式如上所示。取值后面必须为单词<code>in</code>，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至</li><li>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 <code>*</code> 捕获该值，再执行后面的命令</li><li>下面的脚本提示输入<code>1</code>到<code>4</code>，与每一种模式进行匹配</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'输入 1 到 4 之间的数字:'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'你输入的数字为:'</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">'你选择了 1'</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">'你选择了 2'</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">'你选择了 3'</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">'你选择了 4'</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">'你没有输入 1 到 4 之间的数字'</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="9-8-跳出循环"><a href="#9-8-跳出循环" class="headerlink" title="9.8 跳出循环"></a>9.8 跳出循环</h3><ul><li>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：<code>break</code>和<code>continue</code></li></ul><p><strong>break命令</strong></p><ul><li><code>break</code>命令允许跳出所有循环（终止执行后面的所有循环）</li><li>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到<code>shell</code>提示符下，需要使用<code>break</code>命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"输入 1 到 5 之间的数字:"</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">"你输入的数字为 <span class="variable">$aNum</span>!"</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">"你输入的数字不是 1 到 5 之间的! 游戏结束"</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9-9-continue"><a href="#9-9-continue" class="headerlink" title="9.9 continue"></a>9.9 continue</h3><ul><li><code>continue</code>命令与<code>break</code>命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"输入 1 到 5 之间的数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">"你输入的数字为 <span class="variable">$aNum</span>!"</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">"你输入的数字不是 1 到 5 之间的!"</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"游戏结束"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="十、函数"><a href="#十、函数" class="headerlink" title="十、函数"></a>十、函数</h2><ul><li>linux shell 可以定义函数，然后在shell脚本中可以随便调用。</li><li>shell中函数的定义格式如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以带<code>function fun()</code> 定义，也可以直接<code>fun()</code> 定义,不带任何参数。</li><li>参数返回，可以显示加：<code>return</code> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <code>return</code>后跟数值<code>n(0-255)</code></li></ul><blockquote><p>下面的例子定义了一个函数并进行调用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这是我的第一个 shell 函数!"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-----函数开始执行-----"</span></span><br><span class="line">demoFun</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-----函数执行完毕-----"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----函数开始执行-----</span><br><span class="line">这是我的第一个 shell 函数!</span><br><span class="line">-----函数执行完毕-----</span><br></pre></td></tr></table></figure><ul><li>下面定义一个带有<code>return</code>语句的函数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这个函数会对输入的两个数字进行相加运算..."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第一个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第二个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !"</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">sum=fun</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输入的两个数字之和为 <span class="variable">$&#123;sum&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>输出类似下面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个函数会对输入的两个数字进行相加运算...</span><br><span class="line">输入第一个数字: </span><br><span class="line">1</span><br><span class="line">输入第二个数字: </span><br><span class="line">2</span><br><span class="line">两个数字分别为 1 和 2 !</span><br><span class="line">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>所有函数在使用前必须定义</strong>。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li></ul><p><strong>函数参数</strong></p><ul><li>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数..</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第一个参数为 <span class="variable">$1</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第二个参数为 <span class="variable">$2</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$10</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$&#123;10&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十一个参数为 <span class="variable">$&#123;11&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"参数总数有 <span class="variable">$#</span> 个!"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"作为一个字符串输出所有参数 $* !"</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近使用&lt;code&gt;shell&lt;/code&gt;比较多，这里记录一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、初识shell&quot;&gt;&lt;a href=&quot;#一、初识shell&quot; class=&quot;headerlink&quot; title=&quot;一、初识she
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Linux" scheme="http://blog.poetries.top/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.poetries.top/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>nodejs系列之express</title>
    <link href="http://blog.poetries.top/2018/12/23/express/"/>
    <id>http://blog.poetries.top/2018/12/23/express/</id>
    <published>2018-12-23T15:02:10.000Z</published>
    <updated>2019-01-25T09:06:54.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><blockquote><p>官网 <a href="http://expressjs.com/zh-cn/" target="_blank" rel="noopener">http://expressjs.com/zh-cn/</a></p></blockquote><blockquote><p><code>Express</code>是目前最流行的基于Node.js的Web开发框架，可以快速地搭建一个完整功能的网站</p></blockquote><p><strong>环境搭建</strong></p><blockquote><p><a href="http://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">http://www.expressjs.com.cn/starter/generator.html</a></p></blockquote><blockquote><p>通过应用生成器工具 <code>express-generator</code>可以快速创建一个应用的骨架</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-generator -g</span><br></pre></td></tr></table></figure><h2 id="二、运行原理"><a href="#二、运行原理" class="headerlink" title="二、运行原理"></a>二、运行原理</h2><p><strong>底层：http模块</strong></p><blockquote><p>Express框架建立在node.js内置的http模块上。http模块生成服务器的原始代码如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Express框架的核心是对http模块的再包装。上面的代码用Express改写如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Express框架等于在http模块之上，加了一个中间层</p></blockquote><p><strong>什么是中间件</strong></p><blockquote><ul><li>简单说，中间件（middleware）就是处理HTTP请求的函数。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件</li><li>每个中间件可以从App实例，接收三个参数，依次为request对象（代表HTTP请求）、response对象（代表HTTP回应），next回调函数（代表下一个中间件）。每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。</li></ul></blockquote><ul><li>一个不进行任何操作、只传递<code>request</code>对象的中间件，就是下面这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码的next就是下一个中间件。如果它带有参数，则代表抛出一个错误，参数为错误文本</li><li>抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uselessMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next(<span class="string">'出错了！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、use方法"><a href="#三、use方法" class="headerlink" title="三、use方法"></a>三、use方法</h2><blockquote><p>use是express注册中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"In comes a "</span> + request.method + <span class="string">" to "</span> + request.url);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码使用app.use方法，注册了两个中间件。收到HTTP请求后，先调用第一个中间件，在控制台输出一行信息，然后通过next方法，将执行权传给第二个中间件，输出HTTP回应。由于第二个中间件没有调用next方法，所以request对象就不再向后传递了</p></blockquote><ul><li>use方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">"/"</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Welcome to the homepage!\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url == <span class="string">"/about"</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"404 error!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码通过<code>request.url</code>属性，判断请求的网址，从而返回不同的内容。注意，<code>app.use</code>方法一共登记了三个中间件，只要请求路径匹配，就不会将执行权交给下一个中间件。因此，最后一个中间件会返回<code>404</code>错误，即前面的中间件都没匹配请求路径，找不到所要请求的资源</p></blockquote><ul><li>除了在回调函数内部判断请求的网址，<code>use</code>方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只对根目录的请求，调用某个中间件</span></span><br><span class="line">app.use(<span class="string">'/path'</span>, someMiddleware);</span><br></pre></td></tr></table></figure><ul><li>因此，上面的代码可以写成下面的样子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ar express = require(&quot;express&quot;);</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.use(&quot;/home&quot;, function(request, response, next) &#123;</span><br><span class="line">  response.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;text/plain&quot; &#125;);</span><br><span class="line">  response.end(&quot;Welcome to the homepage!\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&quot;/about&quot;, function(request, response, next) &#123;</span><br><span class="line">  response.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;text/plain&quot; &#125;);</span><br><span class="line">  response.end(&quot;Welcome to the about page!\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(function(request, response) &#123;</span><br><span class="line">  response.writeHead(404, &#123; &quot;Content-Type&quot;: &quot;text/plain&quot; &#125;);</span><br><span class="line">  response.end(&quot;404 error!\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(1337)</span><br></pre></td></tr></table></figure><h2 id="四、Express的方法"><a href="#四、Express的方法" class="headerlink" title="四、Express的方法"></a>四、Express的方法</h2><p><strong>all方法和HTTP动词方法</strong></p><blockquote><p>针对不同的请求，Express提供了use方法的一些别名。比如，上面代码也可以用别名的形式来写</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response, next</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"Welcome to the homepage!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/about"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"Welcome to the about page!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.end(<span class="string">"404!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(<span class="number">1337</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>上面代码的all方法表示，所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。get方法则是只有GET动词的HTTP请求通过该中间件，它的第一个参数是请求的路径。由于get方法的回调函数没有调用next方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用了</li><li>除了get方法以外，Express还提供post、put、delete方法，即HTTP动词都是Express的方法</li></ul></blockquote><ul><li>除了get方法以外，Express还提供post、put、delete方法，即HTTP动词都是Express的方法</li><li>这些方法的第一个参数，都是请求的路径。除了绝对匹配以外，Express允许模式匹配</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/hello/:who"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">"Hello, "</span> + req.params.who + <span class="string">"."</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、set方法"><a href="#五、set方法" class="headerlink" title="五、set方法"></a>五、set方法</h2><blockquote><p>set方法用于指定变量的值</p></blockquote><ul><li>使用set方法，为系统变量“views”和“view engine”指定值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">"views"</span>, __dirname + <span class="string">"/views"</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"jade"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、response对象"><a href="#六、response对象" class="headerlink" title="六、response对象"></a>六、response对象</h2><p><strong>（1）response.redirect方法</strong></p><blockquote><p>response.redirect方法允许网址的重定向</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.redirect(<span class="string">"/hello/anime"</span>);</span><br><span class="line">response.redirect(<span class="string">"http://www.example.com"</span>);</span><br><span class="line">response.redirect(<span class="number">301</span>, <span class="string">"http://www.example.com"</span>);</span><br></pre></td></tr></table></figure><p><strong>（2）response.sendFile方法</strong></p><blockquote><p>response.sendFile方法用于发送文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendFile(<span class="string">"/path/to/anime.mp4"</span>);</span><br></pre></td></tr></table></figure><p><strong>（3）response.render方法</strong></p><blockquote><p>response.render方法用于渲染网页模板。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//  使用render方法，将message变量传入index模板，渲染成HTML网页</span><br><span class="line">app.get(&quot;/&quot;, function(request, response) &#123;</span><br><span class="line">  response.render(&quot;index&quot;, &#123; message: &quot;Hello World&quot; &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="七、requst对象"><a href="#七、requst对象" class="headerlink" title="七、requst对象"></a>七、requst对象</h2><p><strong>（1）request.ip</strong></p><blockquote><p>request.ip属性用于获得HTTP请求的IP地址</p></blockquote><p><strong>（2）request.files</strong></p><blockquote><p>request.files用于获取上传的文件</p></blockquote><h2 id="八、搭建HTTPs服务器"><a href="#八、搭建HTTPs服务器" class="headerlink" title="八、搭建HTTPs服务器"></a>八、搭建HTTPs服务器</h2><blockquote><p>使用Express搭建HTTPs加密服务器，也很简单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">'E:/ssl/myserver.key'</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">'E:/ssl/myserver.crt'</span>),</span><br><span class="line">  passphrase: <span class="string">'1234'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World Expressjs'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = https.createServer(options, app);</span><br><span class="line">server.listen(<span class="number">8084</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running on port 8084'</span>);</span><br></pre></td></tr></table></figure><h2 id="九、静态网页模板"><a href="#九、静态网页模板" class="headerlink" title="九、静态网页模板"></a>九、静态网页模板</h2><blockquote><ul><li>在项目目录之中，建立一个子目录views，用于存放网页模板</li><li>假定这个项目有三个路径：根路径（/）、自我介绍（/about）和文章（/article）。那么，app.js可以这样写</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向服务器发送信息的方法，从send变成了sendfile，后者专门用于发送文件</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/about.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.sendfile(<span class="string">'./views/article.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="十、动态网页模板"><a href="#十、动态网页模板" class="headerlink" title="十、动态网页模板"></a>十、动态网页模板</h2><p><strong>安装模板引擎</strong></p><blockquote><p>Express支持多种模板引擎，这里采用Handlebars模板引擎的服务器端版本hbs模板引擎</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hbs --save-dev</span><br></pre></td></tr></table></figure><ul><li>安装模板引擎之后，就要改写app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载hbs模块</span></span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定模板文件的后缀名为html</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行hbs模块</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.render(<span class="string">'article'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码改用render方法，对网页模板进行渲染。render方法的参数就是模板的文件名，默认放在子目录views之中，后缀名已经在前面指定为html，这里可以省略。所以，res.render(‘index’) 就是指，把子目录views下面的index.html文件，交给模板引擎hbs渲染</p></blockquote><h2 id="十一、新建数据脚本"><a href="#十一、新建数据脚本" class="headerlink" title="十一、新建数据脚本"></a>十一、新建数据脚本</h2><blockquote><ul><li>渲染是指将数据代入模板的过程。实际运用中，数据都是保存在数据库之中的，这里为了简化问题，假定数据保存在一个脚本文件中</li><li>在项目目录中，新建一个文件blog.js，用于存放数据。blog.js的写法符合CommonJS规范，使得它可以被require语句加载</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// blog.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> entries = [</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="string">"title"</span>:<span class="string">"第一篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/2/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">2</span>, <span class="string">"title"</span>:<span class="string">"第二篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/3/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">3</span>, <span class="string">"title"</span>:<span class="string">"第三篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/4/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">4</span>, <span class="string">"title"</span>:<span class="string">"第四篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/5/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">5</span>, <span class="string">"title"</span>:<span class="string">"第五篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/10/2013"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">6</span>, <span class="string">"title"</span>:<span class="string">"第六篇"</span>, <span class="string">"body"</span>:<span class="string">"正文"</span>, <span class="string">"published"</span>:<span class="string">"6/12/2013"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">exports.getBlogEntries = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.getBlogEntry = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; entries.length; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(entries[i].id == id) <span class="keyword">return</span> entries[i];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、新建网页模板"><a href="#十二、新建网页模板" class="headerlink" title="十二、新建网页模板"></a>十二、新建网页模板</h2><blockquote><p>接着，新建模板文件<code>index.html</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- views/index.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;文章列表&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&#123;&#123;#each entries&#125;&#125;</span></span><br><span class="line"><span class="regexp">   &lt;p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;a href="/</span>article/&#123;&#123;id&#125;&#125;<span class="string">"&gt;&#123;&#123;title&#125;&#125;&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">      Published: &#123;&#123;published&#125;&#125;</span></span><br><span class="line"><span class="string">   &lt;/p&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;/each&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- views/about.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;自我介绍&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;p&gt;正文&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- views/article.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123;blog.title&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">Published: &#123;&#123;blog.published&#125;&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;p/</span>&gt;</span><br><span class="line"> </span><br><span class="line">&#123;&#123;blog.body&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，上面三个模板文件都只有网页主体。因为网页布局是共享的，所以布局的部分可以单独新建一个文件<code>layout.html</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- views/layout.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class="line"> </span><br><span class="line">   &lt;footer&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">         &lt;a href=<span class="string">"/"</span>&gt;首页&lt;<span class="regexp">/a&gt; - &lt;a href="/</span>about<span class="string">"&gt;自我介绍&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/footer&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十三、渲染模板"><a href="#十三、渲染模板" class="headerlink" title="十三、渲染模板"></a>十三、渲染模板</h2><blockquote><p>最后，改写app.js文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hbs = <span class="built_in">require</span>(<span class="string">'hbs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载数据模块</span></span><br><span class="line"><span class="keyword">var</span> blogEngine = <span class="built_in">require</span>(<span class="string">'./blog'</span>);</span><br><span class="line"> </span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, hbs.__express);</span><br><span class="line">app.use(express.bodyParser());</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>,&#123;<span class="attr">title</span>:<span class="string">"最近文章"</span>, <span class="attr">entries</span>:blogEngine.getBlogEntries()&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'about'</span>, &#123;<span class="attr">title</span>:<span class="string">"自我介绍"</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/article/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> entry = blogEngine.getBlogEntry(req.params.id);</span><br><span class="line">   res.render(<span class="string">'article'</span>,&#123;<span class="attr">title</span>:entry.title, <span class="attr">blog</span>:entry&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li>上面代码中的render方法，现在加入了第二个参数，表示模板变量绑定的数据</li></ul><h2 id="十四、指定静态文件目录"><a href="#十四、指定静态文件目录" class="headerlink" title="十四、指定静态文件目录"></a>十四、指定静态文件目录</h2><blockquote><p>模板文件默认存放在views子目录。这时，如果要在网页中加载静态文件（比如样式表、图片等），就需要另外指定一个存放静态文件的目录</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure><blockquote><p>上面代码在文件app.js之中，指定静态文件存放的目录是public。于是，当浏览器发出非HTML文件请求时，服务器端就到public目录寻找这个文件。比如，浏览器发出如下的样式表请求：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=<span class="string">"/bootstrap/css/bootstrap.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>服务器端就到<code>public/bootstrap/css/</code>目录中寻找<code>bootstrap.css</code>文件</li></ul><h2 id="十五、Express-Router用法"><a href="#十五、Express-Router用法" class="headerlink" title="十五、Express.Router用法"></a>十五、Express.Router用法</h2><blockquote><p>从<code>Express 4.0</code>开始，路由器功能成了一个单独的组件<code>Express.Router</code>。它好像小型的<code>express</code>应用程序一样，有自己的<code>use</code>、<code>get</code>、<code>param</code>和<code>route</code>方法</p></blockquote><p><strong>基本用法</strong></p><blockquote><p>首先，Express.Router是一个构造函数，调用后返回一个路由器实例。然后，使用该实例的HTTP动词方法，为不同的访问路径，指定回调函数；最后，挂载到某个路径。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'首页'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'关于'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, router);</span><br></pre></td></tr></table></figure><blockquote><ul><li>上面代码先定义了两个访问路径，然后将它们挂载到根目录</li><li>这种路由器可以自由挂载的做法，为程序带来了更大的灵活性，既可以定义多个路由器实例，也可以为将同一个路由器实例挂载到多个路径。</li></ul></blockquote><h2 id="十六、router-route方法"><a href="#十六、router-route方法" class="headerlink" title="十六、router.route方法"></a>十六、router.route方法</h2><blockquote><p>router实例对象的route方法，可以接受访问路径作为参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.route(<span class="string">'/api'</span>)</span><br><span class="line">.post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">.get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">Bear.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, bears</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) res.send(err);</span><br><span class="line">res.json(bears);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, router);</span><br></pre></td></tr></table></figure><h2 id="十七、router中间件"><a href="#十七、router中间件" class="headerlink" title="十七、router中间件"></a>十七、router中间件</h2><blockquote><p>use方法为router对象指定中间件，即在数据正式发给用户之前，对数据进行处理。下面就是一个中间件的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(req.method, req.url);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，回调函数的next参数，表示接受其他中间件的调用。函数体中的next()，表示将数据传递给下一个中间件</li><li>注意，中间件的放置顺序很重要，等同于执行顺序。而且，中间件必须放在HTTP动词方法之前，否则不会执行</li></ul><h2 id="十八、对路径参数的处理"><a href="#十八、对路径参数的处理" class="headerlink" title="十八、对路径参数的处理"></a>十八、对路径参数的处理</h2><blockquote><p>router对象的param方法用于路径参数的处理，可以</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.param(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next, name</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 对name进行验证或其他处理……</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">req.name = name;</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/hello/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.send(<span class="string">'hello '</span> + req.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，get方法为访问路径指定了name参数，param方法则是对name参数进行处理。注意，param方法必须放在HTTP动词方法之前</p></blockquote><h2 id="十九、app-route"><a href="#十九、app-route" class="headerlink" title="十九、app.route"></a>十九、app.route</h2><blockquote><ul><li>假定app是Express的实例对象，Express 4.0为该对象提供了一个route属性。app.route实际上是express.Router()的缩写形式，直接挂载到根路径</li><li>因此，对同一个路径指定get和post方法的回调函数，可以写成链式形式</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.route(<span class="string">'/login'</span>)</span><br><span class="line">.get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.send(<span class="string">'this is the login form'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'processing'</span>);</span><br><span class="line">res.send(<span class="string">'processing the login form!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二十、上传文件"><a href="#二十、上传文件" class="headerlink" title="二十、上传文件"></a>二十、上传文件</h2><ul><li>首先，在网页插入上传文件的表单</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/pictures/upload"</span> method=<span class="string">"POST"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">  Select an image to upload:</span><br><span class="line">  &lt;input type=<span class="string">"file"</span> name=<span class="string">"image"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Upload Image"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后，服务器脚本建立指向/upload目录的路由。这时可以安装multer模块，它提供了上传文件的许多功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploading = multer(&#123;</span><br><span class="line">  dest: __dirname + <span class="string">'../public/uploads/'</span>,</span><br><span class="line">  <span class="comment">// 设定限制，每次最多上传1个文件，文件大小不超过1MB</span></span><br><span class="line">  limits: &#123;<span class="attr">fileSize</span>: <span class="number">1000000</span>, <span class="attr">files</span>:<span class="number">1</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/upload'</span>, uploading, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;官网 &lt;a href=&quot;http://expressjs.com/zh-cn/&quot; target=&quot;
      
    
    </summary>
    
      <category term="Back-End" scheme="http://blog.poetries.top/categories/Back-End/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="Express" scheme="http://blog.poetries.top/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>nodejs系列之Koa2</title>
    <link href="http://blog.poetries.top/2018/12/23/koa2/"/>
    <id>http://blog.poetries.top/2018/12/23/koa2/</id>
    <published>2018-12-23T11:10:43.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源互联网</p></blockquote><h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><blockquote><p>Koa 就是一种简单好用的 Web 框架。它的特点是优雅、简洁、表达力强、自由度高</p></blockquote><p><strong>1.1 架设 HTTP 服务</strong></p><blockquote><p>只要三行代码，就可以用 <code>Koa</code> 架设一个 <code>HTTP</code> 服务。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>打开浏览器，访问<code>http://127.0.0.1:3000</code> 。你会看到页面显示”Not Found”，表示没有发现任何内容。这是因为我们并没有告诉 <code>Koa</code> 应该显示什么内容</p></blockquote><p><strong>通过脚手架构建服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa-generator -g</span><br></pre></td></tr></table></figure><blockquote><p>创建一个项目 <code>koa2 -e hello-koa2</code> <code>-e</code>表示<code>ejs</code>语法，不写则是<code>jade</code>语法</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1f13c3fb768c8910.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>打开浏览器，访问<code>http://127.0.0.1:3000</code> </p></blockquote><p><strong>1.2 Context 对象</strong></p><blockquote><p><code>Koa</code> 提供一个 <code>Context</code> 对象，表示一次对话的上下文（包括 <code>HTTP</code> 请求和 <code>HTTP</code> 回复）。通过加工这个对象，就可以控制返回给用户的内容</p></blockquote><ul><li><code>Context.response.body</code>属性就是发送给用户的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123; <span class="comment">//处理请求的中间件</span></span><br><span class="line">    ctx.response.body = <span class="string">"hello world"</span>;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>main</code>函数用来设置<code>ctx.response.body</code>。然后，使用<code>app.use</code>方法加载<code>main</code>函数</p></blockquote><ul><li><code>ctx.response</code>代表 <code>HTTP Response</code>。同样地，<code>ctx.request</code>代表 <code>HTTP Request</code></li></ul><p><strong>1.3 HTTP Response 的类型</strong></p><blockquote><p><code>Koa</code> 默认的返回类型是<code>text/plain</code>，如果想返回其他类型的内容，可以先用<code>ctx.request.accepts</code>判断一下，客户端希望接受什么数据（根据 <code>HTTP Request</code> 的Accept字段），然后使用<code>ctx.response.type</code>指定返回类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.request.accepts(<span class="string">'xml'</span>)) &#123;</span><br><span class="line">        ctx.response.type = <span class="string">'xml'</span>;</span><br><span class="line">        ctx.response.body = <span class="string">'&lt;data&gt;Hello World&lt;/data&gt;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.request.accepts(<span class="string">'json'</span>)) &#123;</span><br><span class="line">        ctx.response.type = <span class="string">'json'</span>;</span><br><span class="line">        ctx.response.body = &#123; <span class="attr">data</span>: <span class="string">'Hello World'</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctx.request.accepts(<span class="string">'html'</span>)) &#123;</span><br><span class="line">        ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">        ctx.response.body = <span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.response.type = <span class="string">'text'</span>;</span><br><span class="line">        ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>1.4 网页模板</strong></p><blockquote><p>实际开发中，返回给用户的网页往往都写成模板文件。我们可以让 Koa 先读取模板文件，然后将这个模板返回给用户</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">    ctx.response.body = fs.createReadStream(<span class="string">'./demos/template.html'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h2><blockquote><p>网站一般都有多个页面。通过<code>ctx.request.path</code>可以获取用户请求的路径，由此实现简单的路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.request.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line">        ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">        ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page1&lt;/a&gt;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>2.2 koa-route 模块</strong></p><blockquote><p>原生路由用起来不太方便，我们可以使用封装好的<code>koa-route</code>模块</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">'koa-route'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = route.get(<span class="string">"/"</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">    ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page1&lt;/a&gt;'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> about = route.get(<span class="string">"/about"</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.use(about);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>2.3 静态资源</strong></p><blockquote><p>如果网站提供静态资源（图片、字体、样式表、脚本……），为它们一个个写路由就很麻烦，也没必要。<code>koa-static</code>模块封装了这部分的请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问 http://localhost:3000/test.json</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = serve(path.join(__dirname, <span class="string">"../public/"</span>));</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>2.4 重定向</strong></p><blockquote><p>有些场合，服务器需要重定向（<code>redirect</code>）访问请求。比如，用户登陆以后，将他重定向到登陆前的页面。<code>ctx.response.redirect()</code>方法可以发出一个<code>302</code>跳转，将用户导向另一个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">"koa-route"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redirect = route.get(<span class="string">"/redirect"</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.redirect(<span class="string">'/'</span>);</span><br><span class="line">    ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page&lt;/a&gt;'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> main = route.get(<span class="string">"/"</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.body = <span class="string">"hello world"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.use(redirect);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="三、中间件"><a href="#三、中间件" class="headerlink" title="三、中间件"></a>三、中间件</h2><p><strong>3.1 Logger 功能</strong></p><blockquote><p>Koa 的最大特色，也是最重要的一个设计，就是中间件（middleware）。为了理解中间件，我们先看一下 Logger （打印日志）功能的实现</p></blockquote><p><strong>3.2 中间件的概念</strong></p><blockquote><p>“中间件”（middleware），它处在 HTTP Request 和 HTTP Response 中间，用来实现某种中间功能。app.use()用来加载中间件</p></blockquote><ul><li>基本上，Koa 所有的功能都是通过中间件实现的，前面例子里面的main也是中间件</li><li>每个中间件默认接受两个参数，第一个参数是 Context 对象，第二个参数是next函数。只要调用next函数，就可以把执行权转交给下一个中间件</li></ul><p><strong>3.3 中间件栈</strong></p><blockquote><p>多个中间件会形成一个栈结构（<code>middle stack</code>），以”先进后出”（<code>first-in-last-out</code>）的顺序执行</p></blockquote><ul><li>最外层的中间件首先执行。</li><li>调用next函数，把执行权交给下一个中间件。</li><li>…</li><li>最内层的中间件最后执行。</li><li>执行结束后，把执行权交回上一层的中间件。</li><li>…</li><li>最外层的中间件收回执行权之后，执行next函数后面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; one'</span>);</span><br><span class="line">  next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; one'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> two = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; two'</span>);</span><br><span class="line">  next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; two'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> three = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; three'</span>);</span><br><span class="line">  next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; three'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(one);</span><br><span class="line">app.use(two);</span><br><span class="line">app.use(three);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; one</span><br><span class="line">&gt;&gt; two</span><br><span class="line">&gt;&gt; three</span><br><span class="line">&lt;&lt; three</span><br><span class="line">&lt;&lt; two</span><br><span class="line">&lt;&lt; one</span><br></pre></td></tr></table></figure><blockquote><p>如果中间件内部没有调用<code>next</code>函数，那么执行权就不会传递下去</p></blockquote><p><strong>3.4 异步中间件</strong></p><blockquote><p>如果有异步操作（比如读取数据库），中间件就必须写成 <code>async</code> 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs.promised'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">  ctx.response.body = <span class="keyword">await</span> fs.readFile(<span class="string">'./demos/template.html'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>fs.readFile</code>是一个异步操作，必须写成<code>await fs.readFile()</code>，然后中间件必须写成 <code>async</code>函数。</p></blockquote><p><strong>3.5 中间件的合成</strong></p><blockquote><p><code>koa-compose</code>模块可以将多个中间件合成为一个</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">'koa-compose'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span> <span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span>`</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewares = compose([logger, main]);</span><br><span class="line"></span><br><span class="line">app.use(middlewares);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="四、错误处理"><a href="#四、错误处理" class="headerlink" title="四、错误处理"></a>四、错误处理</h2><p><strong>4.1 500 错误</strong></p><blockquote><p>如果代码运行过程中发生错误，我们需要把错误信息返回给用户。HTTP 协定约定这时要返回500状态码</p></blockquote><ul><li><code>Koa</code>提供了<code>ctx.throw()</code>方法，用来抛出错误，<code>ctx.throw(500)</code>就是抛出<code>500</code>错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.throw(<span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>4.2 404错误</strong></p><blockquote><p>如果将<code>ctx.response.status</code>设置成<code>404</code>，就相当于<code>ctx.throw(404)</code>，返回<code>404</code>错误</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.status = <span class="number">404</span>;</span><br><span class="line">  ctx.response.body = <span class="string">'Page Not Found'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>4.3 处理错误的中间件</strong></p><blockquote><p>为了方便处理错误，最好使用<code>try...catch</code>将其捕获。但是，为每个中间件都写<code>try...catch</code>太麻烦，我们可以让最外层的中间件，负责所有中间件的错误处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    ctx.response.status = err.statusCode || err.status || <span class="number">500</span>;</span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">      message: err.message</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.throw(<span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(handler);</span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>4.4 error 事件的监听</strong></p><blockquote><p>运行过程中一旦出错，Koa 会触发一个error事件。监听这个事件，也可以处理错误</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.throw(<span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'server error'</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>访问 <a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a> ，你会在命令行窗口看到”server error xxx”。</p></blockquote><h2 id="五、Web-App-的功能"><a href="#五、Web-App-的功能" class="headerlink" title="五、Web App 的功能"></a>五、Web App 的功能</h2><p><strong>5.1 Cookies</strong></p><blockquote><p>ctx.cookies用来读写 Cookie</p></blockquote><blockquote><p>访问 <a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a> ，你会看到1 views。刷新一次页面，就变成了2 views。再刷新，每次都会计数增加1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="built_in">Number</span>(ctx.cookies.get(<span class="string">'view'</span>) || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    ctx.cookies.set(<span class="string">'view'</span>, n);</span><br><span class="line">    ctx.response.body = n + <span class="string">' views'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>5.2 表单</strong></p><blockquote><p><code>Web</code>应用离不开处理表单。本质上，表单就是<code>POST</code> 方法发送到服务器的键值对。<code>koa-body</code>模块可以用来从 <code>POST</code> 请求的数据体里面提取键值对</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> body = ctx.request.body;</span><br><span class="line">  <span class="keyword">if</span> (!body.name) ctx.throw(<span class="number">400</span>, <span class="string">'.name required'</span>);</span><br><span class="line">  ctx.body = &#123; <span class="attr">name</span>: body.name &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(koaBody());</span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li>打开另一个命令行窗口，运行下面的命令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST --data <span class="string">"name=Jack"</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl -X POST --data <span class="string">"name"</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span></span><br><span class="line">name required</span><br></pre></td></tr></table></figure><blockquote><p>上面代码使用 POST 方法向服务器发送一个键值对，会被正确解析。如果发送的数据不正确，就会收到错误提示。</p></blockquote><p><strong>2.3 文件上传</strong></p><blockquote><p>koa-body模块还可以用来处理文件上传</p></blockquote><ul><li>打开另一个命令行窗口，运行下面的命令，上传一个文件。注意，<code>/path/to/file</code>要更换为真实的文件路径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl --form upload=@/path/to/file http:<span class="comment">//127.0.0.1:3000</span></span><br><span class="line">[<span class="string">"/tmp/file"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tmpdir = os.tmpdir();</span><br><span class="line">  <span class="keyword">const</span> filePaths = [];</span><br><span class="line">  <span class="keyword">const</span> files = ctx.request.body.files || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> files) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = files[key];</span><br><span class="line">    <span class="keyword">const</span> filePath = path.join(tmpdir, file.name);</span><br><span class="line">    <span class="keyword">const</span> reader = fs.createReadStream(file.path);</span><br><span class="line">    <span class="keyword">const</span> writer = fs.createWriteStream(filePath);</span><br><span class="line">    reader.pipe(writer);</span><br><span class="line">    filePaths.push(filePath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ctx.body = filePaths;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(koaBody(&#123; <span class="attr">multipart</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、基本用法&quot;&gt;&lt;a href=&quot;#一、基本用法&quot; class=&quot;headerlink&quot; title=&quot;一、基本用法&quot;&gt;&lt;/a&gt;一、基本用法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;K
      
    
    </summary>
    
      <category term="Back-End" scheme="http://blog.poetries.top/categories/Back-End/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="Koa2" scheme="http://blog.poetries.top/tags/Koa2/"/>
    
  </entry>
  
  <entry>
    <title>Object.defineProperty详解</title>
    <link href="http://blog.poetries.top/2018/12/23/Object.defineProperty/"/>
    <id>http://blog.poetries.top/2018/12/23/Object.defineProperty/</id>
    <published>2018-12-23T01:40:12.000Z</published>
    <updated>2019-01-25T09:06:54.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自网络</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>兼容性</strong></p><blockquote><p>在<code>ie8</code>下只能在<code>DOM</code>对象上使用，尝试在原生的对象使用 <code>Object.defineProperty()</code>会报错。</p></blockquote><p>定义对象可以使用构造函数或字面量的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>;  <span class="comment">//obj = &#123;&#125;</span></span><br><span class="line">obj.name = <span class="string">"张三"</span>;  <span class="comment">//添加描述</span></span><br><span class="line">obj.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  <span class="comment">//添加行为</span></span><br></pre></td></tr></table></figure><blockquote><p>除了以上添加属性的方式，还可以使用<code>Object.defineProperty</code>定义新属性或修改原有的属性</p></blockquote><h2 id="二、Object-defineProperty"><a href="#二、Object-defineProperty" class="headerlink" title="二、Object.defineProperty()"></a>二、Object.defineProperty()</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><code>obj</code>：必需。目标对象 </li><li><code>prop</code>：必需。需定义或修改的属性的名字</li><li><code>descriptor</code>：必需。目标属性所拥有的特性</li></ul><blockquote><p>返回值：传入函数的对象。即第一个参数<code>obj</code></p></blockquote><ul><li>针对属性，我们可以给这个属性设置一些特性，比如是否只读不可以写；是否可以被<code>for..in</code>或<code>Object.keys()</code>遍历。</li></ul><p><strong>给对象的属性添加特性描述，目前提供两种形式：数据描述和存取器描述</strong></p><h3 id="2-2-数据描述"><a href="#2-2-数据描述" class="headerlink" title="2.2 数据描述"></a>2.2 数据描述</h3><blockquote><p>当修改或定义对象的某个属性的时候，给这个属性添加一些特性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    test:<span class="string">"hello"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象已有的属性添加特性描述</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"test"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    value:任意类型的值,</span><br><span class="line">    writable:<span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对象新添加的属性的特性描述</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    value:任意类型的值,</span><br><span class="line">    writable:<span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>数据描述中的属性都是可选的，来看一下设置每一个属性的作用</p></blockquote><h4 id="2-2-1-value"><a href="#2-2-1-value" class="headerlink" title="2.2.1 value"></a>2.2.1 value</h4><blockquote><p>属性对应的值,可以使任意类型的值，默认为<code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//第一种情况：不设置value属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//undefined</span></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment">//第二种情况：设置value属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-writable"><a href="#2-2-2-writable" class="headerlink" title="2.2.2 writable"></a>2.2.2 writable</h4><blockquote><p>属性的值是否可以被重写。设置为<code>true</code>可以被重写；设置为<code>false</code>，不能被重写。默认为<code>false</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//第一种情况：writable设置为false，不能重写。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//更改newKey的值</span></span><br><span class="line">obj.newKey = <span class="string">"change value"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：writable设置为true，可以重写</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//更改newKey的值</span></span><br><span class="line">obj.newKey = <span class="string">"change value"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//change value</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-enumerable"><a href="#2-2-3-enumerable" class="headerlink" title="2.2.3 enumerable"></a>2.2.3 enumerable</h4><blockquote><p>此属性是否可以被枚举（使用<code>for...in</code>或<code>Object.keys()</code>）。设置为<code>true</code>可以被枚举；设置为<code>false</code>，不能被枚举。默认为<code>false</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//第一种情况：enumerable设置为false，不能被枚举。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举对象的属性</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> attr <span class="keyword">in</span> obj )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( attr );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种情况：enumerable设置为true，可以被枚举。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举对象的属性</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> attr <span class="keyword">in</span> obj )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( attr );  <span class="comment">//newKey</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-configurable"><a href="#2-2-4-configurable" class="headerlink" title="2.2.4 configurable"></a>2.2.4 configurable</h4><blockquote><p>是否可以删除目标属性或是否可以再次修改属性的特性（<code>writable</code>, <code>configurable</code>, <code>enumerable</code>）。设置为<code>true</code>可以被删除或可以重新设置特性；设置为<code>false</code>，不能被可以被删除或不可以重新设置特性。默认为<code>false</code></p></blockquote><p><strong>这个属性起到两个作用</strong></p><ul><li>目标属性是否可以使用<code>delete</code>删除</li><li>目标属性是否可以再次设置特性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------测试目标属性是否能被删除------------------------</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//第一种情况：configurable设置为false，不能被删除。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    configurable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.newKey;</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：configurable设置为true，可以被删除。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    configurable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.newKey;</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------测试是否可以再次修改特性------------------------</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//第一种情况：configurable设置为false，不能再次修改特性。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    configurable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新修改特性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span>,</span><br><span class="line">    configurable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//报错：Uncaught TypeError: Cannot redefine property: newKey</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：configurable设置为true，可以再次修改特性。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    configurable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新修改特性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    value:<span class="string">"hello"</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span>,</span><br><span class="line">    configurable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><blockquote><p>除了可以给新定义的属性设置特性，也可以给已有的属性设置特性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义对象的时候添加的属性，是可删除、可重写、可枚举的。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    test:<span class="string">"hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改写值</span></span><br><span class="line">obj.test = <span class="string">'change value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj.test ); <span class="comment">//'change value'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"test"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//再次改写值</span></span><br><span class="line">obj.test = <span class="string">'change value again'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj.test ); <span class="comment">//依然是：'change value'</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：一旦使用<code>Object.defineProperty</code>给对象添加属性，那么如果不设置属性的特性，那么<code>configurable</code>、<code>enumerable</code>、<code>writable</code>这些值都为默认的<code>false</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//定义的新属性后，这个属性的特性中configurable，enumerable，writable都为默认的值false</span></span><br><span class="line"><span class="comment">//这就导致了neykey这个是不能重写、不能枚举、不能再次设置特性</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'newKey'</span>,&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">obj.newKey = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.newKey);  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> attr <span class="keyword">in</span> obj )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置的特性总结</strong></p><ul><li><code>value</code>: 设置属性的值</li><li><code>writable</code>: 值是否可以重写。<code>true</code> | <code>false</code></li><li><code>enumerable</code>: 目标属性是否可以被枚举。<code>true</code> | <code>false</code></li><li><code>configurable</code>: 目标属性是否可以被删除或是否可以再次修改特性 <code>true</code> | <code>false</code></li></ul><h3 id="2-3-存取器描述"><a href="#2-3-存取器描述" class="headerlink" title="2.3 存取器描述"></a>2.3 存取器描述</h3><h4 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h4><blockquote><p>当使用存取器描述属性的特性的时候，允许设置以下特性属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; | <span class="literal">undefined</span>,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;&#125; | <span class="literal">undefined</span></span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当使用了<code>getter</code>或<code>setter</code>方法，不允许使用<code>writable</code>和<code>value</code>这两个属性</p></blockquote><h4 id="2-3-2-getter-setter"><a href="#2-3-2-getter-setter" class="headerlink" title="2.3.2 getter/setter"></a>2.3.2 getter/setter</h4><blockquote><p>当设置或获取对象的某个属性的值的时候，可以提供<code>getter/setter</code>方法。</p></blockquote><ul><li><code>getter</code> 是一种获得属性值的方法</li><li><code>setter</code>是一种设置属性值的方法</li></ul><blockquote><p>在特性中使用<code>get/set</code>属性来定义对应的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> initValue = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//当获取值的时候触发的函数</span></span><br><span class="line">        <span class="keyword">return</span> initValue;    </span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//当设置值的时候触发的函数,设置的新值通过参数value拿到</span></span><br><span class="line">        initValue = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey );  <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">obj.newKey = <span class="string">'change value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( obj.newKey ); <span class="comment">//change value</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：get或set不是必须成对出现，任写其一就可以。如果不设置方法，则<code>get</code>和<code>set</code>的默认值为<code>undefined</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来自网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;兼容性&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Object.defineProperty" scheme="http://blog.poetries.top/tags/Object-defineProperty/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中的复制粘贴功能</title>
    <link href="http://blog.poetries.top/2018/12/23/js-copy/"/>
    <id>http://blog.poetries.top/2018/12/23/js-copy/</id>
    <published>2018-12-23T01:10:43.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源网络</p></blockquote><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><h3 id="1-1-API-介绍"><a href="#1-1-API-介绍" class="headerlink" title="1.1 API 介绍"></a>1.1 API 介绍</h3><p><strong>复制、剪切、粘贴事件</strong></p><ul><li><code>copy</code> 发生复制操作时触发;</li><li><code>cut</code> 发生剪切操作时触发;</li><li><code>paste</code> 发生粘贴操作时触发</li></ul><blockquote><p>每个事件都有一个 <code>before</code> 事件对应：<code>beforecopy</code>、<code>beforecut</code>、<code>beforepaste</code>。这几个 <code>before</code> 一般不怎么用，所以我们把注意力放在另外三个事件就可以了</p></blockquote><p><strong>触发条件</strong></p><ul><li>鼠标右键菜单的<code>复制</code>、<code>粘贴</code>、<code>剪切</code></li><li>使用了相应的键盘组合键，比如:<code>command+c</code>、<code>command+v</code></li></ul><p><strong>使用姿势</strong></p><blockquote><p>以 <code>copy</code> 为例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 监听全局复制 做点什么</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 还有这种写法：</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'copy'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="comment">// 监听全局复制 做点什么</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面是在<code>document.body</code>上全局监听的，然而很多人不知道的是，我们还可以为某些 <code>dom</code> 单独添加剪切板事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// html结构</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 写法一样：</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> test1 = <span class="built_in">document</span>.querySelector(<span class="string">'#test1'</span>);</span></span><br><span class="line"><span class="javascript">    test1.oncopy = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监听test1发生的复制事件 做点什么</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// test1发生的复制事件会触发回调，其他地方不会触发回调</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其他事件也是一样的</p></blockquote><h3 id="1-2-clipboardData"><a href="#1-2-clipboardData" class="headerlink" title="1.2 clipboardData"></a>1.2 clipboardData</h3><p><strong>clipboardData 对象:用于访问以及修改剪贴板中的数据</strong></p><blockquote><p>不同浏览器，所属的对象不同：在 <code>IE</code> 中这个对象是<code>window</code>对象的属性，在<code>Chrome</code>、<code>Safari</code>和<code>Firefox</code>中，这个对象是相应的<code>event</code>对象的属性。所以我们在使用的时候，需要做一下如下兼容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clipboardData = e.clipboardData || <span class="built_in">window</span>.clipboardData;</span><br><span class="line">  <span class="comment">// 获取clipboardData对象 + do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>对象方法</strong></p><blockquote><p>对象有三个方法: <code>getData()</code>、<code>setData()</code>、<code>clearData()</code></p></blockquote><p><strong>getData() 访问剪切板中的数据</strong></p><blockquote><p><code>getData()</code>接受一个<code>text</code>参数，即要取得的数据的格式</p></blockquote><p><strong>在复制、剪切、粘贴触发的事件的数据</strong></p><blockquote><p>实际上在 <code>chorme</code> 上测试只有<code>paste</code>粘贴的时候才能用<code>getData()</code>访问到数据，用法如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要粘贴的数据：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onpaste = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clipboardData = e.clipboardData || <span class="built_in">window</span>.clipboardData; <span class="comment">// 兼容处理</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'要粘贴的数据'</span>, clipboardData.getData(<span class="string">'text'</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>被复制/剪切的数据</strong>：</p><blockquote><p>在复制和剪切中的数据，需要通过<code>window.getSelection(0).toString()</code>来访问:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'被复制的数据:'</span>, <span class="built_in">window</span>.getSelection(<span class="number">0</span>).toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>setData(): 修改剪切板中的数据</strong></p><blockquote><p>第一个参数也是<code>text</code>，第二个参数是要放在剪切板中的文本</p></blockquote><p><strong>clearData()</strong></p><h2 id="二、应用"><a href="#二、应用" class="headerlink" title="二、应用"></a>二、应用</h2><h3 id="2-1-复制大段文本"><a href="#2-1-复制大段文本" class="headerlink" title="2.1 复制大段文本"></a>2.1 复制大段文本</h3><p><strong>实现类知乎/掘金复制大段文本添加版权信息</strong></p><blockquote><p>实现很简单：取消默认复制之后，主要是在被复制的内容后面添加信息，然后根据 <code>clipboardData</code> 的 <code>setData()</code>方法将信息写入剪贴板</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 掘金这里不是全局监听，应该只是监听文章的dom范围内。</span></span><br><span class="line"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault(); <span class="comment">// 取消默认的复制事件</span></span><br><span class="line">  <span class="keyword">let</span> textFont,</span><br><span class="line">    copyFont = <span class="built_in">window</span>.getSelection(<span class="number">0</span>).toString(); <span class="comment">// 被复制的文字 等下插入</span></span><br><span class="line">  <span class="comment">// 防知乎掘金 复制一两个字则不添加版权信息 超过一定长度的文字 就添加版权信息</span></span><br><span class="line">  <span class="keyword">if</span> (copyFont.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    textFont =</span><br><span class="line">      copyFont +</span><br><span class="line">      <span class="string">'\n'</span> +</span><br><span class="line">      <span class="string">'作者：OBKoro1\n'</span> +</span><br><span class="line">      <span class="string">'链接：https://juejin.im/user/58714f0e325b123db4a2eb95372/posts\n'</span> +</span><br><span class="line">      <span class="string">'来源：掘金\n'</span> +</span><br><span class="line">      <span class="string">'著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    textFont = copyFont; <span class="comment">// 没超过十个字 则采用被复制的内容。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (event.clipboardData) &#123;</span><br><span class="line">    <span class="keyword">return</span> event.clipboardData.setData(<span class="string">'text'</span>, textFont); <span class="comment">// 将信息写入粘贴板</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 兼容IE</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">'text'</span>, textFont);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后 <code>command+c</code>、<code>command+v</code>，输出:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你复制的内容</span><br><span class="line">作者：OBKoro1</span><br><span class="line">链接：https://juejin.im/user/58714f0eb123db4a2eb95372/posts</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="2-2-防复制功能"><a href="#2-2-防复制功能" class="headerlink" title="2.2 防复制功能"></a>2.2 防复制功能</h3><ul><li>禁止复制+剪切</li><li>禁止右键，右键某些选项:全选，复制，粘贴等。</li><li>禁用文字选择，能选择却不能复制，体验很差。</li><li><code>user-select</code> 用 <code>css</code> 禁止选择文本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁止右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.body.oncontextmenu = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="string">'右键'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// e.preventDefault();</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 禁止文字选择。</span></span><br><span class="line"><span class="built_in">document</span>.body.onselectstart = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="string">'文字选择'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// e.preventDefault();</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 禁止复制</span></span><br><span class="line"><span class="built_in">document</span>.body.oncopy = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="string">'copy'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// e.preventDefault();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁止剪切</span></span><br><span class="line"><span class="built_in">document</span>.body.oncut = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="string">'cut'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// e.preventDefault();</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 禁止粘贴</span></span><br><span class="line"><span class="built_in">document</span>.body.onpaste = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e, <span class="string">'paste'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// e.preventDefault();</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** css 禁止文本选择 这样不会触发js**/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>e.preventDefault()</code>也可以禁用，但建议使用<code>return false</code>这样就不用去访问<code>e</code>和<code>e</code>的方法了。</li><li>示例中<code>document.body</code>全局都禁用了，也可以对 <code>dom</code>(某些区域)进行禁用</li></ul><p><strong>破解防复制</strong></p><p>上面的防复制方法通过<code>js+css</code>实现的，所以思路就是：禁用<code>js+取消user-select</code>样式。</p><blockquote><p><code>Chrome</code>浏览器的话：打开浏览器控制台，按<code>F1</code>进入<code>Setting</code>，勾选<code>Disable</code> <code>JavaScript</code>(禁止 <code>js</code>)。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2f3188629fa5a86d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>此时如果还不能复制的话，就要去找<code>user-select</code>样式,取消这个样式就可以了</p></blockquote><h3 id="2-3-点击复制功能"><a href="#2-3-点击复制功能" class="headerlink" title="2.3 点击复制功能"></a>2.3 点击复制功能</h3><p><strong>不能使用 clipboardData</strong></p><ul><li>在 <code>IE</code> 中可以用<code>window.clipboardData.setData(&#39;text&#39;,&#39;内容&#39;)</code>实现</li><li>上文提到过，在 <code>IE</code> 中<code>clipboardData</code>是<code>window</code>的属性</li><li>而其他浏览器则是相应的<code>event</code>对象的属性，这实际上是一种安全措施，防止未经授权的访问,为了兼容其他浏览器，所以我们不能通过<code>clipboardData</code>来实现这种操作</li></ul><p><strong>具体做法</strong></p><ul><li>创建一个隐藏的<code>input</code>框</li><li>点击的时候，将要复制的内容放进<code>input</code>框中</li><li>选择文本内容<code>input.select()</code>。这里只能用<code>input</code>或者<code>textarea</code>才能选择文本</li><li><code>document.execCommand(&quot;copy&quot;)</code>，执行浏览器的复制命令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).innerText; <span class="comment">// 获取要复制的内容也可以传进来</span></span><br><span class="line">  <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>); <span class="comment">// 获取隐藏input的dom</span></span><br><span class="line">  input.value = text; <span class="comment">// 修改文本框的内容</span></span><br><span class="line">  input.select(); <span class="comment">// 选中文本</span></span><br><span class="line">  <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>); <span class="comment">// 执行浏览器复制命令</span></span><br><span class="line">  alert(<span class="string">'复制成功'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-第三方库clipboard"><a href="#2-4-第三方库clipboard" class="headerlink" title="2.4 第三方库clipboard"></a>2.4 第三方库clipboard</h3><blockquote><p><a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">https://github.com/zenorocha/clipboard.js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、基本使用&quot;&gt;&lt;a href=&quot;#一、基本使用&quot; class=&quot;headerlink&quot; title=&quot;一、基本使用&quot;&gt;&lt;/a&gt;一、基本使用&lt;/h2&gt;&lt;h3 id=&quot;1-1-API-介绍
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="复制粘贴" scheme="http://blog.poetries.top/tags/%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型链回顾</title>
    <link href="http://blog.poetries.top/2018/12/22/js-prototype-review/"/>
    <id>http://blog.poetries.top/2018/12/22/js-prototype-review/</id>
    <published>2018-12-22T04:13:53.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JS内置对象"><a href="#一、JS内置对象" class="headerlink" title="一、JS内置对象"></a>一、JS内置对象</h2><blockquote><p>所谓的内置对象 指的是：<code>JavaScript</code>本身就自己有的对象 可以直接拿来就用。例如<code>Array</code> <code>String</code> 等等。<code>JavaScript</code>一共有12内置对象</p></blockquote><p><strong>函数类型(10个)</strong></p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Function</code></li><li><code>Date</code></li><li><code>RegExp</code></li><li><code>Error</code></li><li><code>Object</code></li><li><code>Event</code></li></ul><blockquote><p>函数类型 有 <code>__proto__</code>和 <code>prototype</code> 属性</p></blockquote><p><strong>对象类型(2个)</strong></p><ul><li><code>Math</code></li><li><code>JSON</code></li></ul><blockquote><p>对象类型只有<code>__proto__</code>属性</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9b6c5ca4a84f967c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、JS原型链"><a href="#二、JS原型链" class="headerlink" title="二、JS原型链"></a>二、JS原型链</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-86427eafb257f868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>每个函数都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向原型。</li><li>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>__proto__</code> 来访问</li><li>对象可以通过 <strong>proto</strong> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链</li></ul><blockquote><p>打开浏览器的控制面板，随便输入一个<code>JS</code>内置的构造器函数，比如<code>Array</code>，控制台输出的是一个名为<code>Array</code>的函数体，这好像并没有什么稀奇的，但是，当你接着输入<code>Array.prototype</code>，控制面板输出了一堆我们经常用到的<code>Array</code>构造器的方法，把目光转移到最下方，有一个叫<code>__proto__</code>的属性，好奇的点开。列表列出的不是<code>Object</code>构造器的方法么，里边有我们非常熟悉的<code>hasOwnProperty</code>还有<code>toString</code>等方法。如果<code>Array</code>是构造器，那么控制面板输出的<code>Array.prototype</code>的所有属性中<code>constructor</code>又是什么构造器？点开看看，之后就像身处德罗斯特效应中一样，<code>__proto__</code>和<code>constructor</code>，还有<code>Array</code>构造器中常用的方法名不断的出现，一层套一层，一层层展开，没有尽头</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-33dcb28a487a5b1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>拿<code>Array</code>举例，<code>Array.prototype</code>中有一个<code>constructor</code>属性，这个属性的值就是<code>Array</code>构造器自己</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.constructor === Array //true</span><br></pre></td></tr></table></figure><h3 id="2-2-prototype"><a href="#2-2-prototype" class="headerlink" title="2.2 prototype"></a>2.2 prototype</h3><blockquote><p>这是一个显式原型属性，只有函数才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fun = <span class="built_in">Function</span>.prototype.bind()</span><br></pre></td></tr></table></figure><blockquote><p>如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 <code>prototype</code> 属性的</p></blockquote><h4 id="2-2-1-prototype-如何产生的"><a href="#2-2-1-prototype-如何产生的" class="headerlink" title="2.2.1 prototype 如何产生的"></a>2.2.1 prototype 如何产生的</h4><blockquote><p>当我们声明一个函数时，这个属性就被自动创建了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function Foo() &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>并且这个属性的值是一个对象（也就是原型），只有一个属性 <code>constructor</code></p></blockquote><ul><li><code>constructor</code> 对应着构造函数，也就是 <code>Foo</code></li></ul><h4 id="2-2-2-constructor"><a href="#2-2-2-constructor" class="headerlink" title="2.2.2 constructor"></a>2.2.2 constructor</h4><blockquote><p><code>constructor</code>是一个公有且不可枚举的属性。一旦我们改变了函数的 <code>prototype</code> ，那么新对象就没有这个属性了（当然可以通过原型链取到 <code>constructor</code>）</p></blockquote><p>那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：</p><ul><li>让实例对象知道是什么函数构造了它</li><li>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 <code>xx.constructor.method</code> 来扩展</li></ul><h3 id="2-3-proto"><a href="#2-3-proto" class="headerlink" title="2.3 __proto__"></a>2.3 <code>__proto__</code></h3><blockquote><p>这是每个对象都有的隐式原型属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>__proto__</code> 来访问</p></blockquote><ul><li>因为在 <code>JS</code> 中是没有类的概念的，为了实现类似继承的方式，通过 <code>__proto__</code> 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性</li></ul><h4 id="2-3-1-实例对象的-proto-如何产生的"><a href="#2-3-1-实例对象的-proto-如何产生的" class="headerlink" title="2.3.1 实例对象的 _proto_ 如何产生的"></a>2.3.1 实例对象的 <code>_proto_</code> 如何产生的</h4><blockquote><p>当我们使用 <code>new</code> 操作符时，生成的实例对象拥有了 <code>__proto__</code>属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 这个函数是 Function 的实例对象</span></span><br><span class="line"><span class="comment">// function 就是一个语法糖</span></span><br><span class="line"><span class="comment">// 内部调用了 new Function(...)</span></span><br></pre></td></tr></table></figure><blockquote><p>所以可以说，在 <code>new</code> 的过程中，新对象被添加了 <code>__proto__</code> 并且链接到构造函数的原型上</p></blockquote><h4 id="2-3-2-new-的过程"><a href="#2-3-2-new-的过程" class="headerlink" title="2.3.2 new 的过程"></a>2.3.2 new 的过程</h4><ul><li>新生成了一个对象</li><li>链接到原型</li><li>绑定 <code>this</code></li><li>返回新对象</li></ul><blockquote><p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    <span class="comment">// 获得构造函数</span></span><br><span class="line">    <span class="keyword">let</span> Con = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 链接到原型</span></span><br><span class="line">obj.__proto__ = Con.prototype</span><br><span class="line">    <span class="comment">// 绑定 this，执行构造函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 确保 new 出来的是个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code></li><li>对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 <code>new Object()</code>的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 就是个语法糖</span></span><br><span class="line"><span class="comment">// 内部等同于 new Function()</span></span><br><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="comment">// 这个字面量内部也是使用了 new Object()</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e4a91031a78eb153.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这里<code>Array</code> 内置对象 且是函数类型。所以<code>Array</code>有<code>__proto__</code>属性 指向的是函数类型 <code>(function（）{})</code>。所以当我们在输出<code>Array.__proto__.proto__</code>;就会返回对象类型<code>(Object{})</code>.但是再向上就<code>null</code>。因为<code>Object</code>就是父类了。所有的继承自<code>Object</code>。</p></blockquote><ul><li><code>JS</code>内置构造器其中之一的<code>Array</code>原本就是一个函数，而这个函数就是<code>Function</code>的<code>prototype</code>，所以<code>Function.prototype</code>有的方法，<code>JS</code>内置构造器都有，比如<code>call()</code>、<code>apply()</code>、<code>bind()</code>等（其实我们自定义的函数也是继承自<code>Function.prototype</code>，所以我们自己也可以定义构造器）。而<code>Function.prototype</code>的进化链指针又指向了<code>Object.prototype</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组实例的__proto__指向构造器的原型</span></span><br><span class="line"></span><br><span class="line">[].__proto__ === <span class="built_in">Array</span>.prototype</span><br></pre></td></tr></table></figure><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><ul><li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li><li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li><li><code>Function.prototype</code> 和 <code>Object.prototype</code> 是两个特殊的对象，他们由引擎来创建</li><li>除了以上两个特殊对象，其他对象都是通过构造器 <code>new</code> 出来的</li><li>函数的 <code>prototype</code> 是一个对象，也就是原型</li><li>对象的 <code>__proto__</code> 指向原型， <code>__proto__</code>将对象和原型连接起来组成了原型链</li></ul><p><strong>关于原型有3个相关的概</strong>念:</p><ul><li>函数对象的<code>prototype</code>属性, 可以称之为显式原型属性(简称: 显式原型)</li><li>实例对象的<code>__proto__</code>属性, 可以称之为隐式原型属性(简称: 隐式原型)</li><li>原型对象: 也就是<code>prototype</code>属性和<code>_proto__</code>属性指向的对象</li></ul><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype5.png" alt=""></p><blockquote><p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线</p></blockquote><h2 id="三、JSON和Math"><a href="#三、JSON和Math" class="headerlink" title="三、JSON和Math"></a>三、JSON和Math</h2><blockquote><p><code>JS</code>内置的构造器函数都可以使用<code>new</code>关键字实例化一个对象，我们称实例化后的这个对象就是某某构造器的一个实例</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ae2f194cbd110416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>我们试试<code>JSON</code> 和<code>Math</code> 能不能实例化对象</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1514936d90349c18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>JSON</code>和<code>Math</code>不是构造器函数，他们是普通的对象。只有构造器函数才能使用<code>new</code>关键字实例化一个对象，而<code>JSON</code>和<code>Math</code>已经是对象了，所以我们可以不用实例化直接使用<code>JSON</code>和<code>Math</code>中的属性和方法</p></blockquote><ul><li>所以<code>JSON</code>和<code>Math</code>不属于<code>10</code>个构造器函数，但他们<code>12</code>个共同属于<code>Javascript</code>的内置对象</li></ul><h2 id="四、更多参考"><a href="#四、更多参考" class="headerlink" title="四、更多参考"></a>四、更多参考</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript深入之从原型到原型链</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JS内置对象&quot;&gt;&lt;a href=&quot;#一、JS内置对象&quot; class=&quot;headerlink&quot; title=&quot;一、JS内置对象&quot;&gt;&lt;/a&gt;一、JS内置对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓的内置对象 指的是：&lt;code&gt;JavaScript&lt;/cod
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="原型链" scheme="http://blog.poetries.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="http://blog.poetries.top/2018/12/22/browser-render/"/>
    <id>http://blog.poetries.top/2018/12/22/browser-render/</id>
    <published>2018-12-22T02:20:43.000Z</published>
    <updated>2019-01-25T09:06:54.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、浏览器如何渲染网页"><a href="#一、浏览器如何渲染网页" class="headerlink" title="一、浏览器如何渲染网页"></a>一、浏览器如何渲染网页</h2><p><strong>概述：浏览器渲染一共有五步</strong></p><ol><li>处理 <code>HTML</code> 并构建 <code>DOM</code> 树。</li><li>处理 <code>CSS</code>构建 <code>CSSOM</code> 树。</li><li>将 <code>DOM</code> 与 <code>CSSOM</code> 合并成一个渲染树。</li><li>根据渲染树来布局，计算每个节点的位置。</li><li>调用 <code>GPU</code> 绘制，合成图层，显示在屏幕上</li></ol><blockquote><p>第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的渲染</p></blockquote><p>具体如下图过程如下图所示</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-08e6f204c42595ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-365009d6fa2d4b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>渲染</strong></p><ul><li>网页生成的时候，至少会渲染一次</li><li>在用户访问的过程中，还会不断重新渲染</li></ul><blockquote><p>重新渲染需要重复之前的第四步(重新生成布局)+第五步(重新绘制)或者只有第五个步(重新绘制)</p></blockquote><ul><li>在构建 <code>CSSOM</code> 树时，会阻塞渲染，直至 <code>CSSOM</code>树构建完成。并且构建 <code>CSSOM</code> 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的 <code>CSS</code> 选择器，执行速度越慢</li><li>当 <code>HTML</code> 解析到 <code>script</code> 标签时，会暂停构建 <code>DOM</code>，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 <code>JS</code> 文件。并且<code>CSS</code>也会影响 <code>JS</code> 的执行，只有当解析完样式表才会执行 <code>JS</code>，所以也可以认为这种情况下，<code>CSS</code> 也会暂停构建 <code>DOM</code></li></ul><h2 id="二、浏览器渲染五个阶段"><a href="#二、浏览器渲染五个阶段" class="headerlink" title="二、浏览器渲染五个阶段"></a>二、浏览器渲染五个阶段</h2><h3 id="2-1-第一步：解析HTML标签，构建DOM树"><a href="#2-1-第一步：解析HTML标签，构建DOM树" class="headerlink" title="2.1 第一步：解析HTML标签，构建DOM树"></a>2.1 第一步：解析HTML标签，构建DOM树</h3><blockquote><p>在这个阶段，引擎开始解析<code>html</code>，解析出来的结果会成为一棵<code>dom</code>树<br><code>dom</code>的目的至少有<code>2</code>个</p></blockquote><ul><li>作为下个阶段渲染树状图的输入</li><li>成为网页和脚本的交互界面。(最常用的就是<code>getElementById</code>等等)</li></ul><p><strong>当解析器到达script标签的时候，发生下面四件事情</strong></p><ol><li><code>html</code>解析器停止解析,</li><li>如果是外部脚本，就从外部网络获取脚本代码</li><li>将控制权交给<code>js</code>引擎，执行<code>js</code>代码</li><li>恢复<code>html</code>解析器的控制权</li></ol><blockquote><p>由此可以得到第一个结论1</p></blockquote><ul><li>由于<code>&lt;script&gt;</code>标签是阻塞解析的，将脚本放在网页尾部会加速代码渲染。</li><li><code>defer</code>和<code>async</code>属性也能有助于加载外部脚本。</li><li><code>defer</code>使得脚本会在<code>dom</code>完整构建之后执行；</li><li><code>async</code>标签使得脚本只有在完全<code>available</code>才执行，并且是以非阻塞的方式进行的</li></ul><h3 id="2-2-第二步：解析CSS标签，构建CSSOM树"><a href="#2-2-第二步：解析CSS标签，构建CSSOM树" class="headerlink" title="2.2 第二步：解析CSS标签，构建CSSOM树"></a>2.2 第二步：解析CSS标签，构建CSSOM树</h3><ul><li>我们已经看到<code>html</code>解析器碰到脚本后会做的事情，接下来我们看下<code>html</code>解析器碰到样式表会发生的情况</li><li><code>js</code>会阻塞解析，因为它会修改文档(<code>document</code>)。<code>css</code>不会修改文档的结构，如果这样的话，似乎看起来<code>css</code>样式不会阻塞浏览器<code>html</code>解析。但是事实上 <code>css</code>样式表是阻塞的。阻塞是指当<code>cssom</code>树建立好之后才会进行下一步的解析渲染</li></ul><p><strong>通过以下手段可以减轻cssom带来的影响</strong></p><ul><li>将<code>script</code>脚本放在页面底部</li><li>尽可能快的加载<code>css</code>样式表</li><li>将样式表按照<code>media type</code>和<code>media query</code>区分，这样有助于我们将<code>css</code>资源标记成非阻塞渲染的资源。</li><li>非阻塞的资源还是会被浏览器下载，只是优先级较低</li></ul><h3 id="2-3-第三步：把DOM和CSSOM组合成渲染树（render-tree）"><a href="#2-3-第三步：把DOM和CSSOM组合成渲染树（render-tree）" class="headerlink" title="2.3 第三步：把DOM和CSSOM组合成渲染树（render tree）"></a>2.3 第三步：把DOM和CSSOM组合成渲染树（render tree）</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c0d854c01697ceda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-4-第四步：在渲染树的基础上进行布局，计算每个节点的几何结构"><a href="#2-4-第四步：在渲染树的基础上进行布局，计算每个节点的几何结构" class="headerlink" title="2.4 第四步：在渲染树的基础上进行布局，计算每个节点的几何结构"></a>2.4 第四步：在渲染树的基础上进行布局，计算每个节点的几何结构</h3><blockquote><p>布局(<code>layout</code>)：定位坐标和大小，是否换行，各种<code>position</code>, <code>overflow</code>, <code>z-index</code>属性</p></blockquote><h3 id="2-5-调用-GPU-绘制，合成图层，显示在屏幕上"><a href="#2-5-调用-GPU-绘制，合成图层，显示在屏幕上" class="headerlink" title="2.5 调用 GPU 绘制，合成图层，显示在屏幕上"></a>2.5 调用 GPU 绘制，合成图层，显示在屏幕上</h3><blockquote><p>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制<code>painting</code></p></blockquote><h2 id="三、渲染优化相关"><a href="#三、渲染优化相关" class="headerlink" title="三、渲染优化相关"></a>三、渲染优化相关</h2><h3 id="3-1-Load-和-DOMContentLoaded-区别"><a href="#3-1-Load-和-DOMContentLoaded-区别" class="headerlink" title="3.1 Load 和 DOMContentLoaded 区别"></a>3.1 Load 和 DOMContentLoaded 区别</h3><ul><li><code>Load</code> 事件触发代表页面中的 <code>DOM</code>，<code>CSS</code>，<code>JS</code>，图片已经全部加载完毕。</li><li><code>DOMContentLoaded</code> 事件触发代表初始的 <code>HTML</code> 被完全加载和解析，不需要等待 <code>CSS</code>，<code>JS</code>，图片加载</li></ul><h3 id="3-2-图层"><a href="#3-2-图层" class="headerlink" title="3.2 图层"></a>3.2 图层</h3><blockquote><p>一般来说，可以把普通文档流看成一个图层。特定的属性可以生成一个新的图层。不同的图层渲染互不影响，所以对于某些频繁需要渲染的建议单独生成一个新图层，提高性能。但也不能生成过多的图层，会引起反作用。</p></blockquote><p><strong>通过以下几个常用属性可以生成新图层</strong></p><ul><li><code>3D</code> 变换：<code>translate3d</code>、<code>translateZ</code></li><li><code>will-change</code></li><li><code>video</code>、<code>iframe</code> 标签</li><li>通过动画实现的 <code>opacity</code> 动画转换</li><li><code>position: fixed</code></li></ul><h3 id="3-3-重绘（Repaint）和回流（Reflow）"><a href="#3-3-重绘（Repaint）和回流（Reflow）" class="headerlink" title="3.3 重绘（Repaint）和回流（Reflow）"></a>3.3 重绘（Repaint）和回流（Reflow）</h3><blockquote><p>重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大</p></blockquote><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 <code>color</code> 就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><blockquote><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流</p></blockquote><p><strong>以下几个动作可能会导致性能问题</strong></p><ul><li>改变 <code>window</code> 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><p><strong>很多人不知道的是，重绘和回流其实和 Event loop 有关</strong></p><ul><li>当 <code>Event loop</code> 执行完<code>Microtasks</code> 后，会判断 <code>document</code> 是否需要更新。因为浏览器是 <code>60Hz</code> 的刷新率，每 <code>16ms</code> 才会更新一次。</li><li>然后判断是否有 <code>resize</code> 或者 <code>scroll</code> ，有的话会去触发事件，所以 <code>resize</code> 和 <code>scroll</code> 事件也是至少 <code>16ms</code>才会触发一次，并且自带节流功能。</li><li>判断是否触发了 <code>media query</code></li><li>更新动画并且发送事件</li><li>判断是否有全屏操作事件</li><li>执行 <code>requestAnimationFrame</code> 回调</li><li>执行 <code>IntersectionObserver</code> 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li><li>更新界面</li><li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 <code>requestIdleCallback</code> 回调</li></ul><p><strong>常见的引起重绘的属性</strong></p><ul><li><code>color</code></li><li><code>border-style</code>    </li><li><code>visibility</code>    </li><li><code>background</code></li><li><code>text-decoration</code>    </li><li><code>background-image</code>    </li><li><code>background-position</code>    </li><li><code>background-repeat</code></li><li><code>outline-color</code>    </li><li><code>outline</code>    </li><li><code>outline-style</code>    </li><li><code>border-radius</code></li><li><code>outline-width</code>    </li><li><code>box-shadow</code>    </li><li><code>background-size</code>    </li></ul><h3 id="3-4-常见引起回流属性和方法"><a href="#3-4-常见引起回流属性和方法" class="headerlink" title="3.4 常见引起回流属性和方法"></a>3.4 常见引起回流属性和方法</h3><blockquote><p>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发重排，下面列一些栗子</p></blockquote><ul><li>添加或者删除可见的<code>DOM</code>元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在<code>input</code>框中输入文字</li><li>浏览器窗口尺寸改变——<code>resize</code>事件发生时</li><li>计算 <code>offsetWidth</code> 和 <code>offsetHeight</code> 属性</li><li>设置 <code>style</code> 属性的值</li></ul><p><strong>回流影响的范围</strong></p><blockquote><p>由于浏览器渲染界面是基于流失布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种</p></blockquote><ul><li>全局范围：从根节点<code>html</code>开始对整个渲染树进行重新布局。</li><li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局</li></ul><p><strong>全局范围回流</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>BDing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>male<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>coding<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>loving<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当<code>p</code>节点上发生<code>reflow</code>时，<code>hello</code>和<code>body</code>也会重新渲染，甚至<code>h5</code>和<code>ol</code>都会收到影响</p></blockquote><p><strong>局部范围回流</strong></p><blockquote><p>用局部布局来解释这种现象：把一个<code>dom</code>的宽高之类的几何信息定死，然后在<code>dom</code>内部触发重排，就只会重新渲染该<code>dom</code>内部的元素，而不会影响到外界</p></blockquote><h3 id="3-5-减少重绘和回流"><a href="#3-5-减少重绘和回流" class="headerlink" title="3.5 减少重绘和回流"></a>3.5 减少重绘和回流</h3><blockquote><p>使用 <code>translate</code> 替代 <code>top</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 10px;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 引起回流</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'.test'</span>).style.top = <span class="string">'100px'</span></span></span><br><span class="line"><span class="undefined">    &#125;, 1000)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li><li>把 <code>DOM</code> 离线后修改，比如：先把 <code>DOM</code> 给 <code>display:none</code> (有一次 <code>Reflow)</code>，然后你修改<code>100</code>次，然后再把它显示出来</li><li>不要把 <code>DOM</code> 结点的属性值放在一个循环里当成循环里的变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">'.test'</span>).style.offsetTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不要使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局</li><li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></li><li><code>CSS</code>选择符从右往左匹配查找，避免 <code>DOM</code>深度过深</li><li>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 <code>video</code>标签，浏览器会自动将该节点变为图层。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7820ddaab0b9710e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><a href="http://blog.poetries.top/2018/01/12/fed-performance-optimization/#%E5%85%AD%E3%80%81%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81">重绘与回流</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、浏览器如何渲染网页&quot;&gt;&lt;a href=&quot;#一、浏览器如何渲染网页&quot; class=&quot;headerlink&quot; title=&quot;一、浏览器如何渲染网页&quot;&gt;&lt;/a&gt;一、浏览器如何渲染网页&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;概述：浏览器渲染一共有五步&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="浏览器渲染" scheme="http://blog.poetries.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript运行机制Event Loop</title>
    <link href="http://blog.poetries.top/2018/12/21/js-event-loop/"/>
    <id>http://blog.poetries.top/2018/12/21/js-event-loop/</id>
    <published>2018-12-21T15:20:54.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JavaScript是单线程"><a href="#一、JavaScript是单线程" class="headerlink" title="一、JavaScript是单线程"></a>一、JavaScript是单线程</h2><ul><li><code>JavaScript</code>语言的一大特点就是单线程，也就是说，同一个时间只能做一件事</li><li>假定<code>JavaScript</code>同时有两个线程，一个线程在某个<code>DOM</code>节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</li><li>所以，为了避免复杂性，从一诞生，<code>JavaScript</code>就是单线程，这已经成了这门语言的核心特征，将来也不会改变</li><li>为了利用多核<code>CPU</code>的计算能力，<code>HTML5</code>提出<code>Web Worker</code>标准，允许<code>JavaScript</code>脚本创建多个线程，但是子线程完全受主线程控制，且不得操作<code>DOM</code>。所以，这个新标准并没有改变<code>JavaScript</code>单线程的本质。</li></ul><h2 id="二、任务队列"><a href="#二、任务队列" class="headerlink" title="二、任务队列"></a>二、任务队列</h2><ul><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着</li><li>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行</li></ul><blockquote><p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）</p></blockquote><ul><li>同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</li><li>异步任务指的是，不进入主线程、而进入”任务队列”（<code>task queue</code>）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</li></ul><p><strong>异步执行的运行机制</strong></p><ul><li>所有同步任务都在主线程上执行，形成一个执行栈</li><li>主线程之外，还存在一个”任务队列”（<code>task queue</code>）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li><li>主线程不断重复上面的第三步</li></ul><p>主线程和任务队列的示意图</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bd9b065237a09d55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>只要主线程空了，就会去读取”任务队列”，这就是<code>JavaScript</code>的运行机制。这个过程会不断重复</p></blockquote><h2 id="三、事件和回调函数"><a href="#三、事件和回调函数" class="headerlink" title="三、事件和回调函数"></a>三、事件和回调函数</h2><ul><li>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。</li><li>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。</li><li>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</li><li>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</li></ul><h2 id="四、JS中的event-loop"><a href="#四、JS中的event-loop" class="headerlink" title="四、JS中的event loop"></a>四、JS中的event loop</h2><h3 id="4-1-原理分析"><a href="#4-1-原理分析" class="headerlink" title="4.1 原理分析"></a>4.1 原理分析</h3><blockquote><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ca5b7ba49448a750.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数</p></blockquote><ul><li><code>JS</code> 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 <code>Task</code>（有多种 <code>task</code>） 队列中。一旦执行栈为空，<code>Event Loop</code> 就会从 <code>Task</code> 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>不同的任务源会被分配到不同的 <code>Task</code> 队列中，任务源可以分为 微任务（<code>microtask</code>） 和 宏任务（<code>macrotask</code>）。在 <code>ES6</code> 规范中，<code>microtask</code>称为 <code>jobs</code>，<code>macrotask</code> 称为 <code>task</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"><span class="comment">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码虽然 <code>setTimeout</code>写在 <code>Promise</code> 之前，但是因为 <code>Promise</code>属于微任务而 <code>setTimeout</code> 属于宏任务</p></blockquote><h3 id="4-2-微任务"><a href="#4-2-微任务" class="headerlink" title="4.2 微任务"></a>4.2 微任务</h3><ul><li><code>process.nextTick</code></li><li><code>promise</code></li><li><code>Object.observe</code></li><li><code>MutationObserver</code></li></ul><h3 id="4-3-宏任务"><a href="#4-3-宏任务" class="headerlink" title="4.3 宏任务"></a>4.3 宏任务</h3><ul><li><code>script</code></li><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>setImmediate</code></li><li><code>I/O</code></li><li><code>UI rendering</code></li></ul><blockquote><p>宏任务中包括了 <code>script</code> ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务</p></blockquote><h3 id="4-4-正确的Event-loop-顺序"><a href="#4-4-正确的Event-loop-顺序" class="headerlink" title="4.4 正确的Event loop 顺序"></a>4.4 正确的Event loop 顺序</h3><ul><li>执行同步代码，这属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所有微任务</li><li>必要的话渲染 <code>UI</code></li><li>然后开始下一轮 <code>Event loop</code>，执行宏任务中的异步代码</li></ul><blockquote><p>通过上述的 <code>Event loop</code> 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 <code>DOM</code> 的话，为了更快的响应界面响应，我们可以把操作 <code>DOM</code> 放入微任务中</p></blockquote><h2 id="五、Node-中的-Event-loop"><a href="#五、Node-中的-Event-loop" class="headerlink" title="五、Node 中的 Event loop"></a>五、Node 中的 Event loop</h2><ul><li><code>Node.js</code>也是单线程的<code>Event Loop</code>，但是它的运行机制不同于浏览器环境</li><li><code>Node</code> 的 <code>Event loop</code> 分为<code>6</code>个阶段，它们会按照顺序反复运行</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-56985351e0645f57.png" alt="image.png"></p><h3 id="5-1-Node-js的运行机制"><a href="#5-1-Node-js的运行机制" class="headerlink" title="5.1 Node.js的运行机制"></a>5.1 Node.js的运行机制</h3><ul><li><code>V8</code>引擎解析<code>JavaScript</code>脚本</li><li>解析后的代码，调用<code>Node API</code></li><li><code>libuv</code>库负责<code>Node API</code>的执行。它将不同的任务分配给不同的线程，形成一个<code>Event Loop</code>（事件循环），以异步的方式将任务的执行结果返回给V8引擎</li><li><code>V8</code>引擎再将结果返回给用户</li></ul><blockquote><p>除了<code>setTimeout</code>和<code>setInterval</code>这两个方法，<code>Node.js</code>还提供了另外两个与”任务队列”有关的方法：<code>process.nextTick</code>和s<code>etImmediate</code>。它们可以帮助我们加深对”任务队列”的理解</p></blockquote><h3 id="5-2-各个阶段"><a href="#5-2-各个阶段" class="headerlink" title="5.2 各个阶段"></a>5.2 各个阶段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;──connections───     │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><h4 id="5-2-1-timer"><a href="#5-2-1-timer" class="headerlink" title="5.2.1 timer"></a>5.2.1 timer</h4><ul><li><code>timers</code> 阶段会执行 <code>setTimeout</code> 和 <code>setInterval</code></li><li>一个 <code>timer</code> 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟</li><li>下限的时间有一个范围：<code>[1, 2147483647]</code> ，如果设定的时间不在这个范围，将被设置为<code>1</code>。</li></ul><h4 id="5-2-2-I-O"><a href="#5-2-2-I-O" class="headerlink" title="5.2.2 I/O"></a>5.2.2 I/O</h4><blockquote><p><code>I/O</code> 阶段会执行除了 <code>close</code> 事件，定时器和 <code>setImmediate</code> 的回调</p></blockquote><h4 id="5-2-3-idle-prepare"><a href="#5-2-3-idle-prepare" class="headerlink" title="5.2.3 idle, prepare"></a>5.2.3 idle, prepare</h4><blockquote><p><code>idle</code>, <code>prepare</code> 阶段内部实现</p></blockquote><h4 id="5-2-4-poll"><a href="#5-2-4-poll" class="headerlink" title="5.2.4 poll"></a>5.2.4 poll</h4><blockquote><p><code>poll</code> 阶段很重要，这一阶段中，系统会做两件事情</p></blockquote><ul><li>执行到点的定时器</li><li>执行 <code>poll</code> 队列中的事件</li></ul><blockquote><p>并且当 poll 中没有定时器的情况下，会发现以下两件事情</p></blockquote><ul><li>如果 <code>poll</code> 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制</li><li>如果 <code>poll</code> 队列为空，会有两件事发生<ul><li>如果有 <code>setImmediate</code> 需要执行，<code>poll</code> 阶段会停止并且进入到 <code>check</code> 阶段执行 <code>setImmediate</code></li><li>如果没有 <code>setImmediate</code> 需要执行，会等待回调被加入到队列中并立即执行回调</li></ul></li><li>如果有别的定时器需要被执行，会回到 <code>timer</code> 阶段执行回调</li></ul><h4 id="5-2-5-check"><a href="#5-2-5-check" class="headerlink" title="5.2.5 check"></a>5.2.5 check</h4><blockquote><p><code>check</code> 阶段执行 <code>setImmediate</code></p></blockquote><h4 id="5-2-6-close-callbacks"><a href="#5-2-6-close-callbacks" class="headerlink" title="5.2.6 close callbacks"></a>5.2.6 close callbacks</h4><ul><li><code>close callbacks</code> 阶段执行 <code>close</code> 事件</li><li>并且在 <code>Node</code> 中，有些情况下的定时器执行顺序是随机的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这里可能会输出 setTimeout，setImmediate</span></span><br><span class="line"><span class="comment">// 可能也会相反的输出，这取决于性能</span></span><br><span class="line"><span class="comment">// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate</span></span><br><span class="line"><span class="comment">// 否则会执行 setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><p>当然在这种情况下，执行顺序是相同的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 因为 readFile 的回调在 poll 中执行</span></span><br><span class="line"><span class="comment">// 发现有 setImmediate ，所以会立即跳到 check 阶段执行回调</span></span><br><span class="line"><span class="comment">// 再去 timer 阶段执行 setTimeout</span></span><br><span class="line"><span class="comment">// 所以以上输出一定是 setImmediate，setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><p>上面介绍的都是<code>macrotask</code> 的执行情况，<code>microtask</code> 会在以上每个阶段完成后立即执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码在浏览器和 node 中打印情况是不同的</span></span><br><span class="line"><span class="comment">// 浏览器中一定打印 timer1, promise1, timer2, promise2</span></span><br><span class="line"><span class="comment">// node 中可能打印 timer1, timer2, promise1, promise2</span></span><br><span class="line"><span class="comment">// 也可能打印 timer1, promise1, timer2, promise2</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Node</code> 中的 <code>process.nextTick</code> 会先于其他 <code>microtask</code> 执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"timer1"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"nextTick"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// nextTick, timer1, promise1</span></span><br></pre></td></tr></table></figure><h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JavaScript是单线程&quot;&gt;&lt;a href=&quot;#一、JavaScript是单线程&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript是单线程&quot;&gt;&lt;/a&gt;一、JavaScript是单线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ja
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Event Loop" scheme="http://blog.poetries.top/tags/Event-Loop/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript事件机制</title>
    <link href="http://blog.poetries.top/2018/12/21/js-event/"/>
    <id>http://blog.poetries.top/2018/12/21/js-event/</id>
    <published>2018-12-21T14:40:21.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p>事件流是一个事件沿着特定数据结构传播的过程。冒泡和捕获是事件流在<code>DOM</code>中两种不同的传播方法</p></blockquote><p><strong>事件流有三个阶段</strong></p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p><strong>事件捕获</strong></p><blockquote><p>事件捕获（<code>event capturing</code>）：通俗的理解就是，当鼠标点击或者触发<code>dom</code>事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件</p></blockquote><p><strong>事件冒泡</strong></p><blockquote><p>事件冒泡（dubbed bubbling）：与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点</p></blockquote><p>无论是事件捕获还是事件冒泡，它们都有一个共同的行为，就是事件传播</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f492b6a8997493d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、捕获和冒泡"><a href="#二、捕获和冒泡" class="headerlink" title="二、捕获和冒泡"></a>二、捕获和冒泡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">'div2'</span>);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    div1.onClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'1'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    div2.onClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'2'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当点击 <code>div2</code>时，会弹出两个弹出框。在 <code>ie8/9/10</code>、<code>chrome</code>浏览器，会先弹出”2”再弹出“1”，这就是事件冒泡：事件从最底层的节点向上冒泡传播。事件捕获则跟事件冒泡相反</p></blockquote><blockquote><p>W3C的标准是先捕获再冒泡， <code>addEventListener</code>的第三个参数决定把事件注册在捕获（<code>true</code>）还是冒泡(<code>false</code>)</p></blockquote><h2 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-350140df0758ccbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、事件流阻止"><a href="#四、事件流阻止" class="headerlink" title="四、事件流阻止"></a>四、事件流阻止</h2><blockquote><p>在一些情况下需要阻止事件流的传播，阻止默认动作的发生</p></blockquote><ul><li><code>event.preventDefault()</code>：取消事件对象的默认动作以及继续传播。</li><li><code>event.stopPropagation()/ event.cancelBubble = true</code>：阻止事件冒泡。</li></ul><p><strong>事件的阻止在不同浏览器有不同处理</strong></p><ul><li>在<code>IE</code>下使用 <code>event.returnValue= false</code>，</li><li>在非<code>IE</code>下则使用 <code>event.preventDefault()</code>进行阻止</li></ul><p><strong>preventDefault与stopPropagation的区别</strong></p><ul><li><code>preventDefault</code>告诉浏览器不用执行与事件相关联的默认动作（如表单提交）</li><li><code>stopPropagation</code>是停止事件继续冒泡，但是对IE9以下的浏览器无效</li></ul><h2 id="五、事件注册"><a href="#五、事件注册" class="headerlink" title="五、事件注册"></a>五、事件注册</h2><ul><li>通常我们使用 <code>addEventListener</code> 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 <code>useCapture</code> 参数来说，该参数默认值为 <code>false</code>。<code>useCapture</code> 决定了注册的事件是捕获事件还是冒泡事件</li><li>一般来说，我们只希望事件只触发在目标上，这时候可以使用 <code>stopPropagation</code> 来阻止事件的进一步传播。通常我们认为 <code>stopPropagation</code> 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。<code>stopImmediatePropagation</code> 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node.addEventListener(<span class="string">'click'</span>,(event) =&gt;&#123;</span><br><span class="line">event.stopImmediatePropagation()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'冒泡'</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 点击 node 只会执行上面的函数，该函数不会执行</span></span><br><span class="line">node.addEventListener(<span class="string">'click'</span>,(event) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'捕获 '</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="六、事件委托"><a href="#六、事件委托" class="headerlink" title="六、事件委托"></a>六、事件委托</h2><ul><li>在<code>js</code>中性能优化的其中一个主要思想是减少<code>dom</code>操作。</li></ul><blockquote><p>假设有<code>100</code>个<code>li</code>，每个<code>li</code>有相同的点击事件。如果为每<code>个Li</code>都添加事件，则会造成<code>dom</code>访问次数过多，引起浏览器重绘与重排的次数过多，性能则会降低。<br>使用事件委托则可以解决这样的问题</p></blockquote><p><strong>原理</strong></p><blockquote><p>实现事件委托是利用了事件的冒泡原理实现的。当我们为最外层的节点添加点击事件，那么里面的<code>ul</code>、<code>li</code>、<code>a</code>的点击事件都会冒泡到最外层节点上，委托它代为执行事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ulEle = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</span><br><span class="line">    ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//兼容IE</span></span><br><span class="line">        ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</span><br><span class="line">            alert( target.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;事件流是一个事件沿着特定数据结构传播的过程。冒泡和捕获是事件流在&lt;code&gt;DOM&lt;/code&gt;中
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="事件机制" scheme="http://blog.poetries.top/tags/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript防抖节流原理</title>
    <link href="http://blog.poetries.top/2018/12/21/js-debounce/"/>
    <id>http://blog.poetries.top/2018/12/21/js-debounce/</id>
    <published>2018-12-21T13:20:43.000Z</published>
    <updated>2019-01-25T09:06:54.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、防抖debounce"><a href="#一、防抖debounce" class="headerlink" title="一、防抖debounce"></a>一、防抖debounce</h2><blockquote><p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作</p></blockquote><ul><li>这些需求都可以通过函数防抖动来实现。如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作</li><li>防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于<code>wait</code>，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数<code>wait</code>）调用函数</li></ul><blockquote><p>持续触发<code>scroll</code>事件时，并不执行<code>handle</code>函数，当<code>1000</code>毫秒内没有触发<code>scroll</code>事件时，才会延时触发<code>scroll</code>事件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9ac8da1501c475d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>)   clearTimeout(timeout);        </span><br><span class="line">        timeout = setTimeout(fn, wait);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="comment">// 当持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><blockquote><p>我们先来看一个袖珍版的防抖理解一下防抖的实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func是用户传入需要防抖的函数</span></span><br><span class="line"><span class="comment">// wait是等待时间</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">50</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 缓存一个定时器id</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class="line">  <span class="comment">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class="line">  <span class="comment">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure><blockquote><p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有<code>immediate</code>选项，表示是否立即调用。这两者的区别，举个栗子来说</p></blockquote><ul><li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于<code>wait</code>的）函数触发之后调用。</li><li>例如用户给<code>interviewMap</code>点<code>star</code>的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变<code>star</code>按钮的样子，用户就可以立马得到反馈是否<code>star</code>成功了，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于<code>wait</code>才会触发</li></ul><p><strong>完整代码</strong></p><blockquote><p>下面我们来实现一个带有立即执行选项的防抖函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是用来获取当前时间戳的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">now</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125; func        回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125;  immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, wait = <span class="number">50</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer, context, args</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">    <span class="comment">// 使用到之前缓存的参数和上下文</span></span><br><span class="line">    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, wait)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次实际调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = later()</span><br><span class="line">      <span class="comment">// 如果是立即执行，调用函数</span></span><br><span class="line">      <span class="comment">// 否则缓存参数和调用上下文</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, params)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="keyword">this</span></span><br><span class="line">        args = params</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class="line">    <span class="comment">// 这样做延迟函数会重新计时</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = later()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 <code>null</code>，就可以再次点击了。</li><li>对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数<br>#</li></ul><h2 id="二、节流throttle"><a href="#二、节流throttle" class="headerlink" title="二、节流throttle"></a>二、节流throttle</h2><blockquote><p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行</p></blockquote><p>如下图，持续触发<code>scroll</code>事件时，并不立即执行<code>handle</code>函数，每隔<code>1000</code>毫秒才会执行一次<code>handle</code>函数</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-81791a77f37fcbb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>节流版本</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125;   func      回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;object&#125;     options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> *                                两者不能共存，否则函数不能执行</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context, args, result;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 之前的时间戳</span></span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 options 没传则设为空对象</span></span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 定时器回调函数</span></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class="line">      <span class="comment">// 用于下面函数的第一个 if 判断</span></span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">      <span class="comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获得当前时间戳</span></span><br><span class="line">      <span class="keyword">var</span> now = _.now();</span><br><span class="line">      <span class="comment">// 首次进入前者肯定为 true</span></span><br><span class="line">  <span class="comment">// 如果需要第一次不执行函数</span></span><br><span class="line">  <span class="comment">// 就将上次时间戳设为当前的</span></span><br><span class="line">      <span class="comment">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="comment">// 计算剩余时间</span></span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="keyword">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="comment">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class="line">      <span class="comment">// 或者用户手动调了时间</span></span><br><span class="line">   <span class="comment">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class="line">  <span class="comment">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class="line">  <span class="comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class="line">  <span class="comment">// 其实还是会进入的，因为定时器的延时</span></span><br><span class="line">  <span class="comment">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class="line">  <span class="comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="comment">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          clearTimeout(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否设置了定时器和 trailing</span></span><br><span class="line">    <span class="comment">// 没有的话就开启一个定时器</span></span><br><span class="line">        <span class="comment">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class="line">        timeout = setTimeout(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、防抖debounce&quot;&gt;&lt;a href=&quot;#一、防抖debounce&quot; class=&quot;headerlink&quot; title=&quot;一、防抖debounce&quot;&gt;&lt;/a&gt;一、防抖debounce&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你是否在日常开发中遇到一个问题，在
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="防抖节流" scheme="http://blog.poetries.top/tags/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
</feed>
